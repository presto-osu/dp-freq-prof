com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  F()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  e()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  <init>(android.view.View,android.app.Activity)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.features.record.RecordFragment:  android.app.Activity  E()
com.SearingMedia.Parrot.utilities.RepairUtility:  void  f(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,android.app.Activity)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  g()	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$10:  void  <clinit>()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$10:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  onDestroy()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.AnimatorSet)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRepairClick()	com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,android.app.Activity)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a()	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToDayNumberHumanReadableTwoDigits(long)
com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  android.view.View  onCreateDialogView()	com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  a()
com.SearingMedia.Parrot.views.lists.KeyValueAdapter$ViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.graphics.drawable.Drawable  o(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.util.List)
com.SearingMedia.Parrot.features.record.RecordAnimationController$8:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()	com.SearingMedia.Parrot.controllers.InstallTimingController:  boolean  b()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.view.View  f(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveTouchingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  d()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setBitRate(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  <init>()	com.SearingMedia.Parrot.features.record.RecordFragment$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  m()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupView)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  t()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  j(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  d(int)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  int  b(int[])	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Integer  getColor()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.di.TimeController:  void  <init>()
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToGoogleDriveToggled(boolean)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$2:  void  onCancelled(com.google.firebase.database.DatabaseError)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter  W()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(int,int,int)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  e(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.backup.BackupService:  int  onStartCommand(android.content.Intent,int,int)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  j()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$2:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  a(java.lang.String)
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.FragmentManager  n()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.utilities.PiracyUtility:  java.util.List  f()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter,com.SearingMedia.Parrot.models.events.TrackListChangedEvent)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  b()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.SearingMedia.Parrot.controllers.upgrade.ProValidationController  a(boolean)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)	com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails:  java.lang.String  getProductId()
com.SearingMedia.Parrot.features.main.MainActivity:  com.SearingMedia.Parrot.features.main.MainPresenter  m()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  c()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$2:  void  onResult(com.google.android.gms.common.api.Result)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$2:  void  a(com.google.android.gms.drive.DriveApi$MetadataBufferResult)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  <init>(java.util.ArrayList,com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  io.reactivex.Flowable  a()	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomSQLiteQuery)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()	com.SearingMedia.Parrot.services.MaintenanceService:  void  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$1:  void  <init>(long,android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  b()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.AudioRecordService$AudioRecordBinder:  com.SearingMedia.Parrot.services.AudioRecordService  a()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  com.SearingMedia.parrotlibrary.models.OnDemandRecording[]  newArray(int)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.ProgressBar  t()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  g(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$4:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,android.content.Context)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,boolean,android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  m()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.util.ArrayList  a(java.lang.String,java.util.ArrayList)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  a(android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment,android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.views.DurationPicker:  void  setSeconds(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  k()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  w()
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  i(float)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  c()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  c(float)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  <init>(com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$AudioControllerListener,com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(long)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  p()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  a(int)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  android.app.Activity  l()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  u()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  m()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  android.preference.ListPreference  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  b(com.google.android.exoplayer2.PlaybackParameters)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  long  e()
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2$2:  void  <init>(int,int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onOneYearClicked()
com.SearingMedia.Parrot.controllers.RateAppController:  void  e()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  onClick(android.content.DialogInterface,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$1:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressType:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressType[]  values()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  h()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  boolean  a()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  onDraw(android.graphics.Canvas)	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  a(android.graphics.Canvas)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  c()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$5:  void  onDismiss(android.content.DialogInterface)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  e(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  W()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  b()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  i(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService:  int  onStartCommand(android.content.Intent,int,int)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onNoButtonClicked()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  d()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  c()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  <init>(java.util.List)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$6:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar5Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  f()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.models.events.PlayNewTrackEvent:  void  <init>(java.lang.String)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecondsToHumanReadable(long)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecondsToHumanReadable(long,boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  o()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.TimedRecording$1:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setListener(com.SearingMedia.Parrot.views.components.QuickSettingsTile$Listener)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  onButton1Clicked()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  onDestroyView()	com.SearingMedia.Parrot.models.events.UpdateRecordingSettingsEvent:  void  <init>()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  <init>(com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setValue(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  b(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$8:  java.lang.Object  a(java.lang.Object)	com.SearingMedia.Parrot.controllers.TrackManagerController:  org.reactivestreams.Publisher  c(java.util.List)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  android.media.MediaFormat  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  v()
com.SearingMedia.Parrot.ParrotApplication:  void  l()	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.controllers.WebViewController:  void  a(java.lang.String,int,android.content.Context)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onDestroy()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.controllers.theme.ThemeController:  int  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  r()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  k()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  g()
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  c()	com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int,int)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ag()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  k(float)
com.SearingMedia.Parrot.services.AudioRecordService:  void  e(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,android.app.Activity)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  p()
com.SearingMedia.Parrot.models.ShareObject:  void  <init>(android.content.pm.ActivityInfo,android.content.pm.PackageManager)	com.SearingMedia.Parrot.models.ShareObject:  void  a(android.graphics.drawable.Drawable)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  b(int)	com.SearingMedia.Parrot.models.RecordingConstants:  int  d(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePlayingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  b()
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  java.util.List  getKeys()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.util.List  b()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(boolean)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  b()
com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.pm.ActivityInfo,com.SearingMedia.Parrot.models.ParrotFile,android.content.Context)	com.SearingMedia.Parrot.controllers.ShareController:  boolean  h()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  I()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showTopMenu$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  A()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  k()	com.SearingMedia.Parrot.utilities.JSONUtility:  java.util.Map  a(org.json.JSONObject)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  u()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  Y()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.backup.BackupPresenter$3:  void  run()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$$Lambda$0:  void  <init>(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getDuration()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  d()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ab()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  K()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsActivity$2:  void  run()	com.SearingMedia.Parrot.models.events.ProValidationEvent:  int  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$5:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)
com.SearingMedia.Parrot.features.record.BigRecordButton$State:  void  <clinit>()	com.SearingMedia.Parrot.features.record.BigRecordButton$State:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  j()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)
com.SearingMedia.Parrot.features.settings.SettingsShareFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsShareFragment)
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  void  <clinit>()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  void  <init>()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  int  c(int)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  shouldShowDayLayout()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(long,long)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$4:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.RecordingStateModel$State:  com.SearingMedia.parrotlibrary.models.RecordingStateModel$State[]  values()
com.SearingMedia.Parrot.models.ParrotFile:  void  a()	com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  t()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  a(java.util.ArrayList)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  java.lang.String  r(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ac()
com.SearingMedia.Parrot.controllers.RateAppController:  void  l()	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$Listener)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b(boolean)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  w()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.ParrotApplication:  void  k()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isOreoOrLater()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.Object)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ac()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  void  <init>()	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  onDestroy()	com.SearingMedia.Parrot.controllers.di.EventBusController:  void  b(java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  com.SearingMedia.Parrot.models.ScheduledRecordingViewModel  a(java.lang.String,java.util.Date)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  void  a(int)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  onDestroy()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  onDestroy()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  x()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  r()
com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController:  void  <clinit>()	com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  a(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  android.os.Handler  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.CircularProgressView  s()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  g()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  i()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  r()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b(android.preference.Preference)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setSampleRate(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$Companion:  void  <init>()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  h(android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  D()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  b()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  b(int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  java.lang.String  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,java.lang.String)
com.SearingMedia.Parrot.utilities.PrimitiveUtility:  boolean  a(java.lang.CharSequence)	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  boolean  b(java.lang.CharSequence)
com.SearingMedia.Parrot.controllers.RateAppController:  void  h()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  g()	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  e()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ay()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  l()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setName(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  d(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  i()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  r()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  i()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  d()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  v()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.RecordingActionEvent)	com.SearingMedia.Parrot.models.events.RecordingActionEvent:  int  a()
com.SearingMedia.Parrot.controllers.TestingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  onClick()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(long)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOne$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getRepeatButton()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  J()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  java.util.ArrayList  v()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  build()	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder,com.SearingMedia.parrotlibrary.models.OnDemandRecording$1)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getBitRate()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  x()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(com.google.android.exoplayer2.ExoPlaybackException)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  onDestroyView()	com.SearingMedia.Parrot.models.events.UpdateRecordingSettingsEvent:  void  <init>()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(long)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  <init>(com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$000(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  K()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  java.util.ArrayList  v()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a()	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(int)
com.SearingMedia.Parrot.models.ParrotFile:  long  w()	com.SearingMedia.Parrot.models.ParrotFile:  long  k()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  int  getMeasuredHeight(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  m()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  j(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$20:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$7:  void  onGlobalLayout()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.record.RecordButton$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordButton)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$10:  void  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  h(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  f(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  b()
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment$DeleteDialogListener,java.util.List)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.base.InformationDialogFragment$InformationDialogListener)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$6:  void  onClick(android.content.DialogInterface,int)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  int  f(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.services.BootJobIntentService$$Lambda$0:  void  a(java.lang.Object)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,java.util.List)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  f(int)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onBackPressed()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  i()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$3:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$1:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  a(int,java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  j()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel  a(java.lang.Class)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  p()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  void  <init>(int)	com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  void  a(int)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.receivers.EventReceiver:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDuration(java.lang.Long)
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding,com.SearingMedia.Parrot.features.save.SaveActivity)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  S()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  W()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.controllers.FeedbackController:  void  e(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  f(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  a(java.io.FileOutputStream)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.util.List)	com.SearingMedia.Parrot.models.ParrotFileList:  java.util.List  b()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$8:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.MediaPlayerService:  java.lang.String  v()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  m()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  c()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  e(android.widget.TextView)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long,long)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  Q()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  y()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  d()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  java.lang.String  s()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$3:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  com.android.vending.billing.IInAppBillingService  a(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController,com.android.vending.billing.IInAppBillingService)
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(boolean)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  o()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showNormalSpeedIcon$1:  void  run()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getDuration()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  boolean  q()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isDateSet()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  java.lang.String  j()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  y()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController  d()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(android.content.Intent)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment,android.content.Intent)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  v()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  b()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.ActionModeFinishedEvent)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isLollipopOrLater()
com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  e(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$2:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference,java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.functions.Action1,rx.Subscription)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  java.lang.Object  call()	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  java.util.List  a()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onNoButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b(java.io.FileOutputStream)	com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,long,int)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  c(android.widget.ImageView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.ImageView,int)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a()	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  removeDividers(android.widget.ListView)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  q()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  a()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openFormatSettingsDialog()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment,android.view.View)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMainFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  s()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$19:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(android.content.Context)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$6:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  <init>()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  android.content.ServiceConnection  o()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  int  q()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  n()	com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment:  com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment  a(com.SearingMedia.Parrot.models.FeatureModel)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  o()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  k()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,int)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(int)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  M()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  I()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onStartTrackingTouch(android.widget.SeekBar)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(int)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  c()	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  g()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  b()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.MediaPlayerService$MediaPlayerBinder:  com.SearingMedia.Parrot.services.MediaPlayerService  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  t()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  onPrepared(android.media.MediaPlayer)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  s()
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  android.media.MediaFormat  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  c(int)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupTask:  com.SearingMedia.Parrot.models.ParrotFileList  b()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$22:  android.graphics.Point  a()	com.SearingMedia.Parrot.features.record.RecordFragment:  android.graphics.Point  F()
com.SearingMedia.Parrot.controllers.RateAppController:  void  c()	com.SearingMedia.Parrot.controllers.FeedbackController:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$3:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  j()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  d(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.v7.widget.CardView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  d()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateCalendarIcon$1:  void  run()	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  java.util.ArrayList  b()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(android.support.v7.widget.RecyclerView$ViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.controllers.drawer.DrawerController$1:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerController,android.app.Activity,android.support.v4.widget.DrawerLayout,android.support.v7.widget.Toolbar,int,int)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  <init>(android.app.Activity)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  a(android.util.AttributeSet)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Integer  getColor()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  c()
com.SearingMedia.Parrot.features.backup.BackupService:  void  k()	com.SearingMedia.Parrot.features.backup.BackupService:  void  b()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  m(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  q()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  f()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.SeekBar)
com.SearingMedia.Parrot.utilities.comparators.DoubleValueComparator:  int  compare(java.lang.Object,java.lang.Object)	com.SearingMedia.Parrot.utilities.comparators.DoubleValueComparator:  int  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  l()
com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  long  a(int,int,int)	com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  float  b(int,int)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  z()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  b()
com.SearingMedia.Parrot.controllers.drawer.DrawerController$1:  void  a(android.view.View)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a(com.SearingMedia.Parrot.controllers.drawer.DrawerController)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  c()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.TimeDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)	com.SearingMedia.Parrot.controllers.di.EventBusController:  void  a(java.lang.Object)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  double  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  l()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDuration:  java.lang.String  b()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  g(android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording[])
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  onDismiss()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  u()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.models.ScreenshotModel$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.Parrot.models.ScreenshotModel$1:  com.SearingMedia.Parrot.models.ScreenshotModel[]  a(int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$4:  void  onClick(android.view.View)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  java.io.File  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  long  G()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  android.app.PendingIntent  c(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  android.content.Intent  b(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.models.ParrotFileList:  com.SearingMedia.Parrot.models.ParrotFileList  a(java.util.List)	com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>(int)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.design.widget.NavigationView  b()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  d()	com.SearingMedia.Parrot.models.events.ErrorPlayingFileEvent:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  void  c(java.io.File)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onSixMonthsClicked()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.content.Context  a(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(long)
com.SearingMedia.Parrot.utilities.TransitionsUtility:  void  a(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanLollipop()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(com.SearingMedia.Parrot.features.share.details.ShareActivityView)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  b()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  n()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  s()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  e()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  e()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  g(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.views.components.TimerInputView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.TimerInputView:  void  b()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  o()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  c()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  com.SearingMedia.Parrot.features.base.BaseActivity  c()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  com.SearingMedia.Parrot.models.ScheduledRecordingViewModel  a(java.lang.String,java.util.Date)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  void  a(java.lang.String)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  void  <clinit>()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupService:  void  f(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,boolean,int)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  onCallStateChanged(int,java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  g(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$10:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder,com.SearingMedia.parrotlibrary.models.OnDemandRecording$1)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  j()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$AudioFocus:  void  <clinit>()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$AudioFocus:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.support.design.widget.TabLayout$Tab)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.models.ParrotFile$3:  int  compare(java.lang.Object,java.lang.Object)	com.SearingMedia.Parrot.models.ParrotFile$3:  int  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <init>(java.lang.Long)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  f()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  d(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  e(java.util.List)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(android.app.Activity)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  g(android.content.Context)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  b()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$200(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.Long  getId()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  d()	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  e()
com.SearingMedia.Parrot.utilities.LogUtility:  void  <clinit>()	com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  onItemSelected(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.models.events.PresetReverbEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  c(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b(int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  <init>()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.String  getRecordingPath()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  t()
com.SearingMedia.Parrot.utilities.DisplayUtilty:  float  a(float,android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  float  getDensity(android.content.Context)
com.SearingMedia.Parrot.models.SecurePreferences:  java.lang.String  e(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  byte[]  a(javax.crypto.Cipher,byte[])
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  J()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ad()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getName()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.util.List)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  b(java.util.List)
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  b()	com.SearingMedia.Parrot.features.record.CustomGainCalculator:  int  b(double)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setName(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$1:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.lang.String,java.lang.Object[])	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(java.lang.String,java.lang.Object[])
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.ThemeController:  int  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  n()	com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  a(int)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$8:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onSevenClicked()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressType:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressType:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOne$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRepeatOneDrawable()
com.SearingMedia.Parrot.controllers.ShareController:  void  a()	com.SearingMedia.Parrot.controllers.ShareController:  void  j()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  f()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  s()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(float)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  k()
com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  run()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  float  getDensity(android.content.Context)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  p()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  android.app.Activity  l()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  android.app.Activity  r()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  a(float)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  m()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  h(long)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  m()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  com.SearingMedia.Parrot.models.ParrotFile  a(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  a()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$initializeWaveForm$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPreviousTrackClick()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  boolean  a()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.controllers.ShareController:  void  k()	com.SearingMedia.Parrot.controllers.ShareController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.ShareController)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordView)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  t()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(java.lang.Object)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  l()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  q()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  aA()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b()	com.SearingMedia.Parrot.models.ParrotFileList:  java.util.List  b()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRenameClick()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  l()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.events.PermissionDeniedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  <init>(int,com.SearingMedia.Parrot.models.PendingPermissionsModel$Listener)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  d()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder,io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1)
com.SearingMedia.Parrot.controllers.ShareController:  void  a()	com.SearingMedia.Parrot.controllers.ShareController:  void  i()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.init.InitController:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  am()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  w()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  y()
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  b()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onRenameClick()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListView)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(android.os.Parcel)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallUtility:  void  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  U()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  i(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,int)
com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile,android.view.View)	com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding,com.SearingMedia.Parrot.views.components.QuickSettingsTile)
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  java.lang.String  j()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  int  b(int)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  com.SearingMedia.Parrot.features.base.BaseActivity  c()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  run()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setProgress(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  z()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  a(android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setName(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment  a(com.SearingMedia.Parrot.models.ScreenshotModel)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  onCardClicked()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  android.preference.SwitchPreference  b(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  q()
com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  b(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  n()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  e()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  i()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile,java.lang.String,int,int,java.lang.String[],java.lang.String)	com.SearingMedia.Parrot.utilities.ListUtility:  java.util.List  a(android.content.res.TypedArray)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  m()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  n()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.Animator)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  int  access$300(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int,boolean)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  i(boolean)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a()	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  b()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  c()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  f(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  u()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$3:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  b(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(java.util.List)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  i(float)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  bitRate(java.lang.String)
com.SearingMedia.Parrot.features.share.list.ShareFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  i()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  a(android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.v7.widget.Toolbar  d()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  I()	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.AnalyticsEventModel:  void  <init>(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setSoundFile(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  j()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isKitKat()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  d(java.lang.String)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,boolean,android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setName(java.lang.String)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$Companion:  void  <init>()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  onDestroy()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  r()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  <init>()	com.SearingMedia.Parrot.features.record.RecordFragment$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  f(long)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ae()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  V()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  setScale(float)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  E()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onYesButtonClicked()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(boolean)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.CustomGainCalculator:  void  <init>(java.lang.String[],java.lang.String[])
com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  e()
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  a()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$4:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.io.File,com.google.android.gms.drive.DriveApi$DriveContentsResult,com.google.android.gms.drive.DriveFolder,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.features.main.MainActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.main.MainActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  a(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(android.content.Context)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$3:  void  onCancelled(com.google.firebase.database.DatabaseError)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  b()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.PresetReverbEvent)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  onDestroy()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  com.SearingMedia.Parrot.views.components.QuickSettingsTile$Listener  b(com.SearingMedia.Parrot.views.components.QuickSettingsTile)
com.SearingMedia.Parrot.features.record.RecordAnimationController$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.animation.AnimatorSet  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  f()
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  java.lang.String  a(android.content.Intent)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  J()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideTopMenu$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  java.lang.String  u()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  boolean  c()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  c()
com.SearingMedia.Parrot.features.save.SaveActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)	com.SearingMedia.Parrot.features.save.SavePresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  f()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  l()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$1:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter,com.SearingMedia.Parrot.models.events.TrackListChangedEvent)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.TextView  r()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  l()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.io.File)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.util.List)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile  r()	com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  java.io.File  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  c(long)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$7:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  w(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  t()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.utilities.ImageUtility:  com.bumptech.glide.load.Key  a(android.content.Context)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  g()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  M()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  F()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  g()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String,long)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.TextView  getRepeatLabel()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int,int,int)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  int  f()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  android.content.Intent  n()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  u()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  android.preference.ListPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,java.lang.String,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a()	com.SearingMedia.Parrot.features.backup.BackupService:  void  a()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  e()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  s()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  rx.Observer  b()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  b(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  boolean  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$2:  void  run()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,boolean)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  q()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  onInterceptTouchEvent(android.view.MotionEvent)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  a(android.view.MotionEvent)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(android.support.design.widget.NavigationView)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  e(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$8:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment$1:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  d(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  java.util.List  getKeys()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  c()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isInPowerSaverMode(android.content.Context)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  android.content.Intent  a(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupService:  int  onStartCommand(android.content.Intent,int,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.RecordingQualityOrEffectSettingChangedEvent:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.ParrotFile  R()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  double  af()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  d()	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c(android.preference.Preference)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$3:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  q()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$17:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(com.SearingMedia.Parrot.features.record.RecordingViewModel,boolean)	com.SearingMedia.Parrot.features.record.PauseButton:  void  b()
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  onCloseClick()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  c(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  invisibleViews(android.view.View[])
com.SearingMedia.Parrot.features.settings.SettingsActivity$3:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  b(com.SearingMedia.Parrot.features.settings.SettingsActivity)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$4:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(android.content.Intent)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  p()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  boolean  a()
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  c()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  invisibleViews(android.view.View[])
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$3:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  java.lang.String  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b(java.lang.String,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  e(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  run()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  d(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  <init>()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$5:  boolean  onPreferenceClick(android.preference.Preference)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  e()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  run()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  a(com.SearingMedia.Parrot.models.ScreenshotModel,android.support.v7.widget.AppCompatButton)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAppVersion(android.content.Context)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  g()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  void  a(boolean)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  v()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)
com.SearingMedia.Parrot.services.AudioRecordService:  void  b(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  android.support.v7.app.AppCompatActivity  e()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  n()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,boolean)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService,double)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  boolean  c()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()	com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.features.save.SavePresenter:  boolean  t()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  b(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  rx.Observer  b()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  aB()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  c()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  n()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  d(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  a(int)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.features.backup.BackupPresenter$4:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  c()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c(int)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setFormat(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDestroyView()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isTimeSet()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setFormat(java.lang.String)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$7:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.RatingView:  void  onStar4Click()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  b()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding,com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  c(int)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  A()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$5:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPausePlayClick()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToDateHumanReadable(long)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  P()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a(long)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onTwoClicked()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  l()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  invisibleView(android.view.View)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  v()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$9:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(com.SearingMedia.Parrot.models.AnalyticsEventModel)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,com.SearingMedia.Parrot.models.AnalyticsEventModel)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getDisplayWidth()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  a()
com.SearingMedia.Parrot.receivers.EventReceiver:  void  <clinit>()	com.SearingMedia.Parrot.receivers.EventReceiver$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(java.util.List,int)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ad()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  java.util.List  a()	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  java.lang.Object  c()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  M()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  y()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showUnableToPlayFileToast$1:  void  run()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(int,int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  g(android.content.Context)
com.SearingMedia.Parrot.models.ParrotFile:  long  i()	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  long  convertHumanReadableTimeToMilliseconds(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter  m()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRewindButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getPreviousButton()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(long)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  void  <init>()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  boolean  h()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$100(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment:  com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment  a(com.SearingMedia.Parrot.models.FeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  b()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  n()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails  f()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  q()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$8:  void  onAnimationEnd(android.animation.Animator)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  h(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  w()	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  M()
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.lang.String  i()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  o()
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)	com.SearingMedia.Parrot.models.RowModel:  int  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  G()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  boolean  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.io.File)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  boolean  b(java.io.File)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  c(long)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  k()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  m()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  c(java.lang.String,java.lang.String,android.app.Activity)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ac()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.controllers.FirebaseController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.FirebaseController:  void  b(java.util.concurrent.atomic.AtomicBoolean,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onDestroy()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  a(android.view.MotionEvent)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  a(int,android.view.MotionEvent)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  p()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter  m()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  t()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsActivity$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsActivity,android.widget.ListView)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$6:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onGainClicked()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  W()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  o()	com.SearingMedia.Parrot.exceptions.StopRecordingException:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  d()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()
com.SearingMedia.Parrot.controllers.ShareController:  boolean  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  z()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter  b(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveStoppedState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  h()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  p()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  d()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  <init>(int,com.SearingMedia.Parrot.models.PendingPermissionsModel$Listener)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.Parrot.controllers.RateAppController:  boolean  i()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  al()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.animation.AnimatorSet  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  rx.Observer  b()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  H()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onSkipSilenceClicked()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$2:  boolean  onLongClick(android.view.View)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  boolean  onLongClick()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  <init>(android.app.Activity)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.events.PermissionGrantedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Flowable  a(long)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel  a(android.util.AttributeSet)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  b()	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  E()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  run()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeView)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(android.app.Activity,int)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  com.SearingMedia.Parrot.models.ParrotFile  g(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  S()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setValue(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording,long)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  f()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  h()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  j()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  m()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  float  a(float,android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.support.v4.app.FragmentActivity  E()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(java.io.File)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  c()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$21:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  T()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController  c()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$4:  void  run()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isDateSet()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  d(android.arch.persistence.db.SupportSQLiteDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  java.util.List  a(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl)
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  java.util.ArrayList  b()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  a(int)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  d()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.io.File)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView  u()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  b(java.util.List)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  s()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  boolean  e()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  k()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  m()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(double)	com.SearingMedia.Parrot.features.record.CustomGainCalculator:  java.lang.String  a(double)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.view.View  i(int)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  com.google.android.exoplayer2.source.MediaSource  b(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordingModeIndicatorClick()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  p()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startDateClicked()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView,android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding,com.SearingMedia.Parrot.features.backup.CloudBackupCardView)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  d()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  boolean  isBluetoothPreferred()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  a(boolean)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <init>(java.lang.Long)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  d(float)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$seekBarChangeListener$1:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  java.util.ArrayList  c(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  v()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  d(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setKeys(java.util.List)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  f()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  d()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.v4.widget.DrawerLayout  a()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onEvent(com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent)	com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  boolean  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onLifetimeClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  d()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  q()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  c()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  c()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  java.util.concurrent.atomic.AtomicBoolean  d(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  int  access$300(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  int  f(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  int  f()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePausedState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.controllers.drawer.DrawerController$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  com.SearingMedia.Parrot.models.DrawerConfigurationModel  b(com.SearingMedia.Parrot.controllers.drawer.DrawerController)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  <init>()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController$Delegate)
com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onNextTrackClick()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment$DeleteDialogListener,java.util.List)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  P()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  b(int)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType:  void  <clinit>()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  b()
com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onEvent(com.SearingMedia.parrotlibrary.models.RecordingCommandModel)	com.SearingMedia.parrotlibrary.models.RecordingCommandModel:  int  getCommand()
com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.play.mini.PlayFragment  e()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.views.DurationPicker:  void  a(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.DurationPicker:  void  a(android.widget.NumberPicker[])
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  android.preference.SwitchPreference  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  <init>()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  j()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  H()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  G()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  g(int)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getSampleRate()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  <init>(long)
com.SearingMedia.Parrot.controllers.FirebaseController:  void  <clinit>()	com.SearingMedia.Parrot.controllers.FirebaseController:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  a()
com.SearingMedia.Parrot.models.events.BassBoostEvent:  void  <init>(int)	com.SearingMedia.Parrot.models.events.BassBoostEvent:  void  a(int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  c()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$3:  void  onClick(android.view.View)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setCurrentItem(int)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.utilities.ColorUtility:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingView)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  d()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  c()	com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  <init>(com.SearingMedia.Parrot.controllers.recording.ChronometerController)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  V()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  java.util.concurrent.atomic.AtomicBoolean  b(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setFromPendingRecording(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  build()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder,com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  w()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  aD()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  c()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  c()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  invisibleView(android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  a()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  v()
com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$1:  void  run()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.share.list.ShareFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDestroyView()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  e()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  f()
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  a()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.util.List  b()
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)
com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>()	com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel  a(android.os.Parcel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  A()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  boolean  c()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  onCompletion(android.media.MediaPlayer)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(boolean)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  aA()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  T()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  t()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  n()
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  java.util.concurrent.atomic.AtomicBoolean  f(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  b()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  b(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$2:  void  <init>(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  j()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  <init>(com.SearingMedia.Parrot.controllers.player.AudioPlayerRemote)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.android.vending.billing.IInAppBillingService  a(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter  a(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter  k()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(java.io.File,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  y()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  s()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService,long,long)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long,long)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onSixMonthsClicked()
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.parrotlibrary.models.ChangeLogModel:  int  getMinimumSDK()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  com.SearingMedia.Parrot.models.ParrotFileList  a()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.Parrot.features.play.MediaPlayerUtils:  void  <clinit>()	com.SearingMedia.Parrot.features.play.MediaPlayerUtils:  void  <init>()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  aC()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordingModeIndicatorClick()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.util.List)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$6:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  R()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.events.PermissionDeniedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onThreeClicked()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  y()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$2:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$0:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()
com.SearingMedia.Parrot.controllers.WaveSurfaceController_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.WaveSurfaceController,android.view.View)	com.SearingMedia.Parrot.controllers.WaveSurfaceController_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.WaveSurfaceController,android.content.Context)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  a(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.SearingMedia.Parrot.controllers.upgrade.ProValidationController  a(boolean)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  <init>(boolean,boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  x()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  m()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  k(float)
com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,long,int)	com.SearingMedia.Parrot.utilities.WavUtility:  int  a(int)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  c()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  java.util.ArrayList  e()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  l()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  g()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  C()
com.SearingMedia.Parrot.receivers.WidgetReceiver$$Lambda$0:  void  run()	com.SearingMedia.Parrot.receivers.WidgetReceiver:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  j()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  i()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter  m()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$4:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  c()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$17:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  J()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onResume()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onResume()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$6:  boolean  onTouch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar3Touch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$attachView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  n()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  E()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  float  c(int)
com.SearingMedia.Parrot.features.record.RecordAnimationController$3:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.view.ViewGroup  c(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  java.io.File  a(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment,com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  java.io.File  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String,long)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  int  l(int)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$7:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onFileTypeTextViewClicked()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  a()
com.SearingMedia.Parrot.models.SecurePreferences:  javax.crypto.spec.SecretKeySpec  b(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  byte[]  c(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  D()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  u()
com.SearingMedia.Parrot.features.save.SaveActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.save.SaveActivity:  com.SearingMedia.Parrot.features.save.SavePresenter  m()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCardClicked()
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall$$Lambda$0:  void  run()	com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$3:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  d()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  a(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording[])
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  onDestroy()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  onDestroy()	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  T()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  b(com.google.android.exoplayer2.PlaybackParameters)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  long  f()
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onPresetsClicked()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  J()	com.SearingMedia.Parrot.controllers.IntentController:  void  a(java.util.ArrayList,android.content.Context,android.support.v4.app.ActivityOptionsCompat)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  i()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  b(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  i(boolean)
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  c()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  e()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  name(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  c()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$3:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  j()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  n()
com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.interfaces.OnShareClickListener)	com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.models.ShareObject)
com.SearingMedia.Parrot.controllers.RateAppController:  void  e()	com.SearingMedia.Parrot.controllers.FeedbackController:  void  c(android.content.Context)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  b(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  e(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  h(int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  O()
com.SearingMedia.Parrot.features.share.list.ShareFragment:  com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter  a()	com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  J()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  g(java.lang.String)
com.SearingMedia.Parrot.models.events.CustomGainEvent:  void  <init>(double)	com.SearingMedia.Parrot.models.events.CustomGainEvent:  void  a(double)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  N()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  i(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  a()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  int  a(com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)	com.SearingMedia.Parrot.models.RecordingConstants:  java.util.List  a(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording,android.app.Activity)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  addScheduledRecordingClicked()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.FilterController:  double  a(byte[],double,com.SearingMedia.parrotlibrary.models.RecordingModel,int)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter  m()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  b(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  q()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onDestroy()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDuration(java.lang.Long)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  p()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onBackPressed()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  b()
com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  run()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  boolean  a(com.SearingMedia.Parrot.controllers.recording.ChronometerController)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onBackPressed()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  c()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  testButtonClicked()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onDestroyActionMode(android.view.ActionMode)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  o()
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment$DeleteDialogListener,java.util.List)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  void  a(com.SearingMedia.Parrot.features.base.InformationDialogFragment$InformationDialogListener)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onBackPressed()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.main.MainActivity:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.MainActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.main.MainActivity,com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.backup.BackupService:  void  b(java.lang.String)	com.SearingMedia.Parrot.features.backup.BackupService:  void  l()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  boolean  c()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$seekBarChangeListener$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.ParrotApplication:  void  c()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.backup.BackupPresenter$3:  void  run()	com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.base.BaseActivity  A()
com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  f()
com.SearingMedia.Parrot.controllers.drawer.DrawerController$1:  void  a(android.view.View)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  ao()
com.SearingMedia.Parrot.features.backup.BackupService:  void  b(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDuration:  java.lang.String  b()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$1:  void  onClick(android.view.View)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  java.io.File  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  k()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  g()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c_()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton3Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  a(android.content.Context,java.util.ArrayList,int)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.ScreenshotModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  c()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  e()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  c(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float,float,float)
com.SearingMedia.Parrot.features.share.list.ShareFragment:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.share.list.ShareFragment:  com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileDescription$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileProgress)	com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileProgress:  double  a()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  double  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  boolean  a(double)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  boolean  b()
com.SearingMedia.Parrot.utilities.TransitionsUtility:  android.support.v4.app.ActivityOptionsCompat  a(android.app.Activity,android.support.v4.util.Pair[])	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanLollipop()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onDestroy()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.views.DurationPicker:  java.lang.String  getFormattedDuration()
com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToDayNumberHumanReadable(long)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(double)	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  K()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  sampleRate(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  <init>()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  <init>()
com.SearingMedia.Parrot.receivers.WidgetReceiver:  android.app.PendingIntent  a(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  W()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  F()	com.SearingMedia.Parrot.utilities.AnimationUtility:  android.view.animation.ScaleAnimation  a(android.view.View,float,float,int,android.view.animation.Animation$AnimationListener)
com.SearingMedia.Parrot.models.ShareObject$1:  int  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.models.ShareObject)	com.SearingMedia.Parrot.models.ShareObject:  java.lang.String  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.views.DurationPicker:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  d()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  m()
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.parrotlibrary.models.TimedRecording$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.parrotlibrary.models.TimedRecording$1:  com.SearingMedia.parrotlibrary.models.TimedRecording[]  newArray(int)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  b()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getFormat()
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)	com.SearingMedia.Parrot.controllers.di.EventBusController:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  b()	com.SearingMedia.Parrot.utilities.SpannableUtils:  android.text.SpannableString  b(java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  c()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  d()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  d()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  android.os.Handler  c()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a(int)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onEvent(com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent)	com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  int  a()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.Converters:  long  dateToTimestamp(java.util.Date)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$5:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  c()	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.services.AudioRecordService:  int  onStartCommand(android.content.Intent,int,int)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.record.RecordFragment:  com.SearingMedia.Parrot.features.record.RecordPresenter  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  k()
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordFragment  e(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.utilities.RepairUtility$$Lambda$0:  void  run()	com.SearingMedia.Parrot.utilities.RepairUtility:  void  f(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  b(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  w()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent,java.util.List,int)	com.SearingMedia.Parrot.models.events.TrackListChangedEvent:  int  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,android.content.Intent)
com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isOreoOrLater()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ac()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a(java.lang.String[])
com.SearingMedia.Parrot.features.record.RecordAnimationController$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BigRecordButton  a(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  h()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  g(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  d()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileDescription$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.TextView  n()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  java.lang.String  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)
com.SearingMedia.Parrot.features.record.TimerLayout:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.TimerLayout:  void  a()
com.SearingMedia.Parrot.models.ParrotFileList:  java.lang.Object  clone()	com.SearingMedia.Parrot.models.ParrotFileList:  com.SearingMedia.Parrot.models.ParrotFileList  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent)	com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent:  com.SearingMedia.Parrot.models.ParrotFile  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.FeatureModel:  void  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(long)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  int  f()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  c(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  A()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.controllers.FirebaseController:  com.google.firebase.database.FirebaseDatabase  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.SearingMedia.Parrot.controllers.upgrade.ProValidationController  b(boolean)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  <init>(boolean,boolean)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  k()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  j()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$WhenMappings:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.RepeatMode:  com.SearingMedia.Parrot.features.play.full.RepeatMode[]  values()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  c()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  b(boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  h()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  h()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  f(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  l()	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector$OnScaleDragGestureListener)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  f()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  o()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPauseButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getPauseDrawable()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$Listener  a(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  <init>(int,com.SearingMedia.Parrot.models.PendingPermissionsModel$Listener)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  r()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  A()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  void  <init>()
com.SearingMedia.Parrot.views.DurationPicker:  void  <clinit>()	com.SearingMedia.Parrot.views.DurationPicker$1:  void  <init>()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  boolean  e()
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.parrotlibrary.models.ChangeLogModel:  java.lang.String  getChangeLog()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.main.MainActivity:  void  v()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(java.lang.String)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  c(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  g()	com.SearingMedia.Parrot.utilities.GooglePlayServicesUtility:  android.support.v4.util.Pair  a(android.content.Context)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(com.google.firebase.database.DataSnapshot)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(com.google.firebase.database.DataSnapshot)
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()	com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a()	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  b()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  b(android.view.ViewGroup,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder  a(android.view.ViewGroup,int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  ao()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.nio.ByteBuffer)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  n()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.record.RecordAnimationController$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.PauseButton  b(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  onResume()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Flowable  a(long)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(boolean)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  b(java.lang.String)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  h()	com.SearingMedia.parrotlibrary.models.TimeModel:  long  getTime()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  h()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToGoogleDriveToggled(boolean)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  b(boolean)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar5Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  e()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  <init>(com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  double  af()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.io.File)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  S()	com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$2:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  am()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$3:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$7:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onTrackClick()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  k(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(android.content.Intent)
com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  g()	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  f()
com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$7:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(com.SearingMedia.Parrot.features.save.SaveView)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  C()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  R()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  onEvent(com.SearingMedia.Parrot.models.events.UpdateRecordingSettingsEvent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  f()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)	com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(int,android.app.Notification,android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationManagerCompat  b(android.content.Context)
com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  float  getDensity(android.content.Context)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  d()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  h(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.receivers.WidgetReceiver:  void  onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])	com.SearingMedia.Parrot.receivers.WidgetReceiver:  void  a(android.content.Context,android.appwidget.AppWidgetManager,int[],java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  b()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  j()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(int)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  k()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  b(float)
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  <init>(android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$AudioRecorderDispatcherListener)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.FeatureModel:  void  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackupClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  f()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ah()
com.SearingMedia.Parrot.controllers.RateAppController:  void  c()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  m()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.parrotlibrary.models.RecordingModel  t()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	io.reactivex.Flowable:  io.reactivex.Flowable  b(io.reactivex.Scheduler)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.Switch)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$0:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  b(int,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  d()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$4:  void  run()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(long)
com.SearingMedia.Parrot.controllers.analytics.FirebaseAnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall[])
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFileList:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.backup.BackupActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.controllers.RateAppController:  void  b()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$4:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$15:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,java.lang.String[],int[])
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  d(android.view.ViewGroup,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter$TrackListFooterHolder:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  int  convertSecondsToMilliseconds(int)
com.SearingMedia.Parrot.models.ShareObject:  void  <clinit>()	com.SearingMedia.Parrot.models.ShareObject$1:  void  <init>()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  f(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a_(boolean)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  boolean  r()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  F()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onResume()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onResume()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  y()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$Companion:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$3:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  l()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>()	com.SearingMedia.Parrot.models.ParrotFile:  void  v()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  d()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  com.SearingMedia.Parrot.models.ParrotFile  g(android.content.Intent)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  U()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$2:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  t()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  d()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  o()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(java.io.File,com.SearingMedia.Parrot.features.backup.cloud.CloudController)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  j()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$4:  void  onShow(android.content.DialogInterface)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  n()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  s()	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  java.lang.String  f()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  d()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  c(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context,java.lang.String,int,int,boolean,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  B()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveStoppedState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDestroyView()	com.SearingMedia.Parrot.models.events.UpdateRecordingSettingsEvent:  void  <init>()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.view.MenuItem)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  y()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  u()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  a()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterView)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  v()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,int)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  d(android.widget.TextView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  java.lang.String  c()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  d()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingFinishedEvent)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  onItemSelected(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  int  d(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  L()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePlayingState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setKeys(java.util.List)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  a(java.util.List)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatAll$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getRepeatButton()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  d(java.lang.String)
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  b()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  w()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  T()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  g()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  c_()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$dismissProgressView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,boolean)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  void  c(java.io.File)
com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToMonthHumanReadable(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDeleteClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  e()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  o()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  f(android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  f()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  c()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  m()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  e()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  b()
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  java.util.ArrayList  c(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  d()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,com.SearingMedia.Parrot.views.DurationPicker)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.MediaPlayerUtils:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  a(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setBitRate(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$0:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  d(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener  a(android.support.design.widget.TabLayout)	com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter,android.support.design.widget.TabLayout,android.support.design.widget.TabLayout)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  m()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Exception,java.lang.String,com.bumptech.glide.request.target.Target,boolean)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.ProgressBar  t()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  b(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  <init>()	com.SearingMedia.parrotlibrary.models.TimeModel:  void  <init>(long)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  v()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$1:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  F()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  w()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecurrenceInterval()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  H()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  g(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$4:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListView)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  w()
com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.content.Intent  a(com.SearingMedia.Parrot.features.play.mini.PlayFragment,android.content.Intent)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPlayButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getPlayDrawable()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context,android.app.PendingIntent)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  i()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$8:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  com.google.android.exoplayer2.source.MediaSource  b(java.lang.String)
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$3:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$Listener  a(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$2:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  o()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.io.File  a(java.io.File)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  c(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)	com.SearingMedia.Parrot.controllers.FirebaseController:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  g(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  t()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.time.TimePickerDialog  a(com.wdullaer.materialdatetimepicker.time.TimePickerDialog$OnTimeSetListener)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a()	com.SearingMedia.Parrot.controllers.recorders.helpers.AudioFocusHelper:  boolean  b()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  g()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallow()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(com.SearingMedia.Parrot.models.AnalyticsEventModel)
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  android.app.PendingIntent  b(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  f()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  onRecordButtonClicked()	com.SearingMedia.parrotlibrary.models.TimedRecording:  java.lang.Long  getDuration()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  R()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  long  b(long)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  b(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  e()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  <init>(int,com.SearingMedia.Parrot.models.PendingPermissionsModel$Listener)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupTask:  java.lang.String  d()
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  c()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  T()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(android.content.ServiceConnection)
com.SearingMedia.Parrot.ParrotApplication:  void  l()	com.SearingMedia.Parrot.receivers.EventReceiver:  void  <init>()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  d()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackDeletedEvent)	com.SearingMedia.Parrot.services.MediaPlayerService:  java.lang.String  v()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  e()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  b(java.lang.CharSequence)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getId()
com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isOreoOrLater()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  d()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  d(float)
com.SearingMedia.Parrot.controllers.ShareController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.ShareController:  void  e()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  k()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$1:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  f()
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.backup.BackupService:  void  c(boolean,int)
com.SearingMedia.Parrot.features.record.BottomBarLayout:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.BottomBarLayout:  void  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  boolean  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  nameClicked()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  E()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onSaveInstanceState(android.os.Bundle)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  g()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  h(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  e()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  l()	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  o()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  o()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,android.view.View)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.TimerInputView:  void  onBackspaceClicked()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment,int)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  E()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  r()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$OnDismissListener  u(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  onDestroy()
com.SearingMedia.wearexchange.WearExchangeController:  void  onConnected(android.os.Bundle)	com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController,com.SearingMedia.wearexchange.WearExchangeController$1)
com.SearingMedia.Parrot.utilities.RenameUtility:  void  b()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$9:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  f(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  k()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  n()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)
com.SearingMedia.Parrot.views.DurationPicker:  java.lang.String  getFormattedDuration()	com.SearingMedia.Parrot.views.DurationPicker:  int  getSecondsValue()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  boolean  d(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  P()	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,android.content.Context)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  aq()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  e(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.utilities.RenameUtility:  void  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.featurepager.transformers.TransformerType:  void  <clinit>()	com.SearingMedia.featurepager.transformers.TransformerType:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  m()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordClicked()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  m()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.views.components.TimerInputView:  void  onRestoreInstanceState(android.os.Parcelable)	com.SearingMedia.Parrot.views.components.TimerInputView:  void  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  i()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  android.support.v7.app.AppCompatActivity  e()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.models.RowModel:  java.lang.String  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  colorClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  g()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController:  void  <init>()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  onReceive(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  b(java.lang.CharSequence)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  p()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  t()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$21:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSampleRate(java.lang.String)
com.SearingMedia.Parrot.features.record.BigRecordButton:  int  getReadyToRecordMicColor()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$recalculateWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  k()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder  a(android.view.ViewGroup,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  void  <init>(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  x()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  <init>()
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  boolean  b()
com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  boolean  a()	com.SearingMedia.Parrot.ParrotApplication:  int  f()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility$$Lambda$0:  void  onSuccess(java.lang.Object)	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  a(java.lang.Void)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  saveTrack()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  c()
com.SearingMedia.Parrot.features.record.BottomBarLayout:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.BottomBarLayout:  void  a()
com.SearingMedia.parrotlibrary.models.RecordingStateModel$State:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.RecordingStateModel$State:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterView)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateSeekBar$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.SeekBar  getSeekBar()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  W()
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.FragmentManager  n()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v7.app.AppCompatActivity  p()
com.SearingMedia.Parrot.features.backup.BackupService:  int  onStartCommand(android.content.Intent,int,int)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,int,android.content.Context)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  f()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.TestingController:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onConnectClicked()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onOneYearClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  b()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  onRecordButtonClicked()	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent)	com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent:  float  a()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerActivity:  int  p()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  e()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  android.app.Activity  b()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  n()	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$9:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.lang.String[]  d()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanLollipop()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  g()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayGainLevelEvent)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(int)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onSaveInstanceState(android.os.Bundle)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  f()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  int  d()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  l()	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  android.media.MediaFormat  a()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  e()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  p()
com.SearingMedia.Parrot.features.record.PauseButton:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.services.AudioProcessingService:  android.content.Intent  a(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService:  android.content.Intent  d(java.lang.String)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  com.SearingMedia.parrotlibrary.models.DeviceInformationModel  getDeviceInformationModel()	com.SearingMedia.parrotlibrary.models.DeviceInformationModel:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(int,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  com.SearingMedia.parrotlibrary.models.PendingRecording  a()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  android.arch.persistence.room.RoomDatabase  a(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  java.lang.Object  call()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  com.SearingMedia.parrotlibrary.models.PendingRecording  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ac()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.view.View)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.main.MainActivity:  void  u()
com.SearingMedia.Parrot.views.DurationPicker:  long  getDurationInMillis()	com.SearingMedia.Parrot.views.DurationPicker:  int  getMinutesValue()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d(java.util.List)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.FeatureModel:  void  c(int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onResume()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onResume()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  j()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getName()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(long)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onGrantStoragePermissionClicked()
com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  com.SearingMedia.Parrot.interfaces.AudioRecorderListener  x()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setSource(int)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  a()	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  a()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(android.support.v4.widget.DrawerLayout)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.views.DurationPicker:  long  getDurationInMillis()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.models.ScreenshotModel$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.Parrot.models.ScreenshotModel$1:  com.SearingMedia.Parrot.models.ScreenshotModel  a(android.os.Parcel)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  <init>()	com.SearingMedia.Parrot.thirdparty.utils.Option:  com.SearingMedia.Parrot.thirdparty.utils.Option  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateTime$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.TextView  getEndTimeTextView()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.v4.widget.DrawerLayout  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  P()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  O()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.GoogleAnalyticsController:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  d()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Q()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$16:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  f(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.RecordingQualityOrEffectSettingChangedEvent:  void  <init>()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$9:  void  onGlobalLayout()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.interfaces.OnShareClickListener)	com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.interfaces.OnShareClickListener)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  X()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.settings.SettingsActivity$3:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.ImageView  a(com.SearingMedia.Parrot.features.settings.SettingsActivity,android.widget.ListView,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  a(android.widget.TextView,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.models.ShareGroupModel:  java.lang.String  b()
com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.utilities.ResourceUtility:  float  a(android.content.Context,int)
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  r()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  d()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.views.DurationPicker:  void  setMinutes(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRewindButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRewindDrawable()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$10:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  g(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  G()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  android.os.Handler  l()	com.SearingMedia.Parrot.ParrotApplication:  android.os.Handler  e()
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  f()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$11:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  N()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.Converters:  long  dateToTimestamp(java.util.Date)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  e()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onSyncClick()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b(boolean)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,int,android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  g(android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  l()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$4:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  h()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getNamedDensity(android.content.Context)
com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  javax.crypto.spec.SecretKeySpec  b(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$7:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  sourceClicked()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$5:  void  run()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(long)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long,long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.IntentController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter$TrackListFooterHolder:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter  a(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a(android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  e()
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.views.DurationPicker:  java.lang.String  getFormattedDuration()	com.SearingMedia.Parrot.views.DurationPicker:  int  getHoursValue()
com.SearingMedia.Parrot.services.MaintenanceService:  void  c()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.SearingMedia.Parrot.controllers.upgrade.ProValidationController  a(boolean)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(long,long)	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  long  a(long,long)
com.SearingMedia.Parrot.views.DurationPicker:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.DurationPicker:  void  a(android.content.Context,android.util.AttributeSet)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  b(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity,android.view.View,boolean)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  E()	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  android.preference.ListPreference  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  M()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePausedState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupTask:  java.lang.String  c()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  D()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  a(android.view.animation.Animation)
com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  com.SearingMedia.parrotlibrary.models.ChangeLogModel[]  newArray(int)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getRepeatButton()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(android.content.Context)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.ArrayList  d()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$5:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  i()
com.SearingMedia.parrotlibrary.models.TimedRecording$1:  com.SearingMedia.parrotlibrary.models.TimedRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.view.View  i(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton2Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  a(android.content.Context,java.util.ArrayList,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  java.lang.String  j()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onLifetimeClicked()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  boolean  c()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(android.os.Bundle)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setPagingEnabled(boolean)
com.SearingMedia.Parrot.features.backup.BackupService:  void  d(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,boolean,int)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  boolean  t()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.io.File)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onOneMonthClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  a()
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$2:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  i(java.lang.String)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <clinit>()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneMonthClicked()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  u()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(com.SearingMedia.Parrot.models.AnalyticsEventModel)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  i()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  n()
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  run()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setMaxProgress(int)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  j()
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackClick()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.content.Context  f()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$0:  void  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  k()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  u()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onPresetsClicked()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  j()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  at()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$3:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)
com.SearingMedia.Parrot.features.record.MiddleLayout:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.MiddleLayout:  void  a()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.controllers.RateAppController:  void  h()	com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a()	com.SearingMedia.Parrot.views.components.NumberPadView:  void  setListener(com.SearingMedia.Parrot.views.components.NumberPadView$Listener)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  e(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.views.DurationPicker:  long  getDurationInMillis()	com.SearingMedia.Parrot.views.DurationPicker:  int  getHoursValue()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.ActionModeStartedEvent)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isLollipopOrLater()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.MediaPlayerService$MediaPlayerBinder:  com.SearingMedia.Parrot.services.MediaPlayerService  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ai()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  C()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a(android.preference.Preference)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.features.backup.BackupService:  void  b(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  <init>(android.app.Activity,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setFormat(java.lang.String)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openSampleRateSettingsDialog()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  com.SearingMedia.Parrot.features.base.BaseActivity  c()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String,long)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,com.SearingMedia.Parrot.models.AnalyticsEventModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel  b(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  java.lang.String  g()
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController$1:  void  <init>(com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$9:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  s()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  b()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  long  f()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.ScreenshotModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  V()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  y()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(double)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.RecordingQualityOrEffectSettingChangedEvent:  void  <init>()
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  b(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.PresetReverbEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  a(com.SearingMedia.Parrot.models.ScreenshotModel,android.support.v7.widget.AppCompatButton)	com.SearingMedia.Parrot.models.ScreenshotModel:  int  a()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.utilities.TransitionsUtility:  void  a(android.app.Activity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateLoadFileProgress$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,int)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDuration(java.lang.Long)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  M()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  d()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  G()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  r()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$18:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	io.reactivex.Flowable:  io.reactivex.Single  c()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  a()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  H()	com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.String  getPhoneNumber()
com.SearingMedia.Parrot.models.events.PresetReverbEvent:  void  <init>(int)	com.SearingMedia.Parrot.models.events.PresetReverbEvent:  void  a(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()	com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  b(int)
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(java.lang.String,android.os.Bundle)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  d(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.BassBoostEvent)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(int)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$OnTabSelectedListener  b()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  g(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  java.lang.Void  a(java.lang.Void[])	com.SearingMedia.wearexchange.WearExchangeController:  com.google.android.gms.common.api.GoogleApiClient  a(com.SearingMedia.wearexchange.WearExchangeController)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  e()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isKitKat()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  b(boolean)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment  a()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  <init>()
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  m()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  d()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onDestroy()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  as()
com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  e(android.widget.TextView)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  n()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  java.lang.Object  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(int)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  d(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ag()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingFinishedEvent)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  j()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a_(boolean)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()	com.SearingMedia.Parrot.models.events.RecordingFinishedEvent:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel  a(com.SearingMedia.Parrot.views.components.QuickSettingsTile)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  c()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$3:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  c(android.support.v7.widget.RecyclerView$ViewHolder,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  int  l(int)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  onDestroy()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  a(android.support.v7.app.ActionBarDrawerToggle)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  an()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(int)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.PresetReverbEvent)	com.SearingMedia.Parrot.models.events.PresetReverbEvent:  int  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,boolean)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  aw()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  b(java.lang.String,boolean)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(com.bumptech.glide.load.resource.drawable.GlideDrawable,java.lang.String,com.bumptech.glide.request.target.Target,boolean,boolean)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  a(android.widget.TextView,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  c(android.widget.TextView)
com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(long)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  c()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  d(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(com.google.android.exoplayer2.Timeline,java.lang.Object)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(long,long)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  au()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  c(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  x()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  z()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  P()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  o()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.Integer  getCallType()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.FeatureModel:  void  a(int)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$8:  boolean  onTouch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar4Touch(android.view.View,android.view.MotionEvent)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.Integer  getCallType()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(java.util.List)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(android.app.Activity,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(android.app.Activity,int,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  m()	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  G()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileSuccessToast$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$2:  boolean  onPreDraw()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.widget.RelativeLayout  d(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(java.util.List,java.lang.String)	com.SearingMedia.Parrot.models.ShareGroupModel:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.io.File,boolean)	com.SearingMedia.Parrot.models.ParrotFile:  void  a(java.io.File)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  p()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  i()
com.SearingMedia.Parrot.features.play.full.CircularProgressView$1:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  d()	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.utilities.PreferenceViewUtility:  void  a(android.preference.ListPreference,android.preference.Preference$OnPreferenceChangeListener)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  n()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$start30MinuteTimeout$1:  void  run()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  d(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile  r()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.io.File  a(java.io.File)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$1:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  i()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	io.reactivex.Flowable:  io.reactivex.Flowable  d()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDuration:  java.lang.String  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onOneMonthClicked()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  onTaskRemoved(android.content.Intent)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  h()
com.SearingMedia.Parrot.features.backup.BackupPresenter$1:  void  run()	com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.base.BaseActivity  A()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()	com.SearingMedia.Parrot.features.init.InitController:  void  <init>()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()	com.SearingMedia.Parrot.models.ParrotFileList:  com.SearingMedia.Parrot.models.ParrotFileList  a()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  <init>()	com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getBottomY()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder,io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRenameClick()	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  l()	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.parrotlibrary.models.PendingRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PendingRecording$1:  com.SearingMedia.parrotlibrary.models.PendingRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  e(long)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  b()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  k()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getSimAndLocale(android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getSimCardCountry(android.content.Context)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getMaxOffset()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onNoButtonClicked()
com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  b(int,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getMaxWidth()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(android.content.Context)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  g()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  d()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8:  void  onEvent(int,java.lang.String)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.lang.String,java.lang.Object[])
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDate(java.util.Date)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.Parrot.models.databases.TrackDurationDao  m()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  c(int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  v()
com.SearingMedia.Parrot.features.backup.BackupActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.backup.BackupPresenter  m()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String,java.lang.String,int)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  boolean  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context,java.lang.String,int,int,boolean,int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showFastForwardButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getFastForwardDrawable()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  n()	com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  b(java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(int,int,int)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  f()
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  b(byte[],long)
com.SearingMedia.Parrot.features.record.TickerBarLayout:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.TickerBarLayout:  void  a()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  l(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  I()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.CustomGainEvent:  void  <init>(double)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  N()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  h()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  c()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  <init>(int,com.SearingMedia.Parrot.models.PendingPermissionsModel$Listener)
com.SearingMedia.Parrot.features.record.BottomBarLayout:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.BottomBarLayout:  void  a()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  c(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  f(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  d()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(int,boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.events.PermissionGrantedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openFormatSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  long  b(long,long)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  int  d()
com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingType:  void  <clinit>()	com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingType:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.share.details.ShareActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.share.details.ShareActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$0:  void  <clinit>()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$0:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  a(java.util.ArrayList)
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.features.record.RecordButton$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordButton)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.parrotlibrary.models.OnDemandRecording,android.content.Context)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$10:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onNineClicked()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  p()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.CircularProgressView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView,android.view.View)	com.SearingMedia.Parrot.features.play.full.CircularProgressView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView,android.content.Context)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a_(boolean)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()	com.SearingMedia.Parrot.controllers.recorders.helpers.AudioFocusHelper:  void  <init>(android.content.Context,com.SearingMedia.Parrot.interfaces.AudioFocusListener)
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BigRecordButton  a(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double[]  a(int)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$attachView$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  java.lang.String  x()
com.SearingMedia.Parrot.controllers.RateAppController:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  j()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  c()
com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  onClick(android.content.DialogInterface,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  h()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  i()
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  b(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ab()
com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  a(com.SearingMedia.Parrot.thirdparty.utils.UnitFunction)	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  java.lang.Object  c()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  a(int)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.receivers.WidgetReceiver:  android.app.PendingIntent  d(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDestroyView()
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  a(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,boolean,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$5:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  int  d(int)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  h()	com.SearingMedia.Parrot.services.AudioProcessingService:  android.content.Intent  d(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  e()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c(android.app.Activity)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(long)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.features.record.PauseButton:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.PauseButton:  void  c()
com.SearingMedia.Parrot.features.backup.BackupService:  void  c(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  n()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  b(android.view.View)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  d(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  b(int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  <init>(android.app.Activity)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  d()	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  h(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.lang.String  i()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.backup.BackupService:  void  l()	com.SearingMedia.Parrot.features.backup.BackupService:  void  b()
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.lang.String  i()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  e(float)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  aj()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  A()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$AudioRecorderDispatcherListener)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  o()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PhoneCallEndedEvent)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  b()
com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  javax.crypto.spec.IvParameterSpec  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  R()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  f(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isExpired()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  b(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  h()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  o()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(com.bumptech.glide.load.resource.drawable.GlideDrawable,java.lang.String,com.bumptech.glide.request.target.Target,boolean,boolean)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  long  t(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$2:  void  run()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  d(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  l()
com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$1:  void  run()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.main.MainActivity:  void  n()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.utilities.PreferenceViewUtility:  void  a(android.preference.ListPreference)
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  java.util.concurrent.atomic.AtomicBoolean  b(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  boolean  a(com.SearingMedia.parrotlibrary.models.PendingRecording,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  boolean  equals(java.lang.Object)
com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  <init>()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$4:  void  onShow(android.content.DialogInterface)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  d(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$7:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onSixClicked()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  short[]  a(byte[])
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  c()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  ak()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  k()	com.SearingMedia.Parrot.utilities.GooglePlayServicesUtility:  android.support.v4.util.Pair  a(android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b(boolean)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  boolean  b(android.content.Context)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  o()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  e(long)
com.SearingMedia.Parrot.models.ScreenshotModel:  void  <clinit>()	com.SearingMedia.Parrot.models.ScreenshotModel$1:  void  <init>()
com.SearingMedia.Parrot.features.main.MainPresenter:  boolean  l()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  C()
com.SearingMedia.Parrot.controllers.ShareController:  void  e()	com.SearingMedia.Parrot.utilities.ShareUtility:  java.util.ArrayList  a(android.content.Intent,android.content.Context)
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  android.app.PendingIntent  a(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)
com.SearingMedia.Parrot.features.init.InitController:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(double)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,double)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  d()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onSpeedClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  g()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  a(android.widget.ListView)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$1:  void  run()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  M()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  java.util.List  h()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  long  getItemId(int)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  java.lang.Object  getItem(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  <init>(com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeView)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  q(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter$TrackListFooterHolder:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter,android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  n()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  o()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  b()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingView)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  u()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  void  onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])	com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  void  a(android.content.Context,android.appwidget.AppWidgetManager,int[],java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$7:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(java.util.List)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  F()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  D()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  addScheduledRecordingClicked()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  u()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  h()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  g()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController  a()
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onSyncClick()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  aa()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.views.DurationPicker:  long  getDurationInMillis()	com.SearingMedia.Parrot.views.DurationPicker:  int  getSecondsValue()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$6:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  f(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int,boolean)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  y()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  e()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.views.DurationPicker:  void  setHours(int)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onDestroy()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  g()
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Intent)	com.SearingMedia.Parrot.services.MaintenanceService:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  c(java.lang.String)
com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  c()	com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  boolean  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.models.RowModel  g(int)	com.SearingMedia.Parrot.utilities.ColorUtility:  java.lang.String  b(int,android.content.Context)
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPauseButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.support.design.widget.FloatingActionButton  getPausePlayButton()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  u()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  w()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  t()
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  double  af()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openFormatSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  a(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,java.util.List)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  s()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  P()
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  f(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  r()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  android.content.ServiceConnection  o()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$3:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,java.util.List)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(java.util.List)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(int)	com.SearingMedia.Parrot.models.events.ProValidationEvent:  void  <init>(int)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  p()	com.SearingMedia.Parrot.utilities.ImageUtility:  com.bumptech.glide.load.Key  a(android.content.Context)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  m()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ae()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)	com.SearingMedia.Parrot.ParrotApplication:  android.os.Handler  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  S()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  android.content.Intent  b(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  writeToParcel(android.os.Parcel,int)
com.SearingMedia.Parrot.features.backup.BackupService:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  <init>(android.app.Activity)
com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  z()
com.SearingMedia.Parrot.controllers.FeedbackController:  void  c(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.main.MainActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.main.MainActivity:  com.SearingMedia.Parrot.features.main.MainPresenter  m()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(java.util.List,int)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(long)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  t()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  d(boolean)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  d(int)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  java.lang.String  i(int)
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility$$Lambda$0:  void  <clinit>()	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility$$Lambda$0:  void  <init>()
com.SearingMedia.Parrot.features.record.MiddleLayout:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.MiddleLayout:  void  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  k()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  o()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.main.MainPresenter$3:  void  a(android.support.design.widget.TabLayout$Tab)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.support.design.widget.TabLayout$Tab)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  w()	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setCurrentItem(int)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecordingId()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  o()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  b()	com.SearingMedia.Parrot.controllers.recording.PostRecordController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recording.PostRecordController)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  g()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  p()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$14:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  c(boolean)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)	io.reactivex.Flowable:  io.reactivex.Flowable  a(io.reactivex.Scheduler)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getOSVersion()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  e(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  g(float)
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  b(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.share.list.ShareFragment  f()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  e(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$spinPausePlayButton$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.support.design.widget.FloatingActionButton  getPausePlayButton()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  d(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  java.lang.String[]  getValues()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()	com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  h(float)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideWaveTouchingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  d()
com.SearingMedia.Parrot.features.record.RecordFragment:  com.SearingMedia.Parrot.features.record.RecordPresenter  a()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  d(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  o()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,java.lang.String,com.SearingMedia.Parrot.models.ParrotFileList,android.content.Context)	com.SearingMedia.Parrot.models.ParrotFileList:  java.util.ArrayList  c()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  c(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView,android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding,com.SearingMedia.Parrot.features.backup.CloudBackupCardView)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCheckChanged(android.widget.CompoundButton,boolean)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(boolean)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  r()	com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.base.BaseActivity  A()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  a(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  onCardClicked()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.PauseButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackPressed()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$onBackPressed$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDeleteClick()
com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.main.TabsPagerAdapter  o()	com.SearingMedia.Parrot.features.main.MainActivity:  com.SearingMedia.Parrot.features.main.TabsPagerAdapter  t()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  b()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(com.wdullaer.materialdatetimepicker.date.DatePickerDialog,int,int,int)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertDatePartsToHumanReadable(int,int,int)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  sampleRate(java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  m(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  O()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(android.view.View)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  java.lang.String  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  y()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  java.io.File  d()
com.SearingMedia.Parrot.features.record.TickerBarLayout:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.TickerBarLayout:  void  a()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  k()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  l()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  c()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.v4.widget.DrawerLayout  a()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  c()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$19:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  H()
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  void  d(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording[])
com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$6:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDetailsClick()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  G()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  float  c(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  a(long)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  org.json.JSONObject  h()
com.SearingMedia.Parrot.models.ShareObject:  void  <init>(android.content.pm.ActivityInfo,android.content.pm.PackageManager)	com.SearingMedia.Parrot.models.ShareObject:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  e(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.record.TimerLayout:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.TimerLayout:  void  a()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onYesButtonClicked()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton2Clicked()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment)	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment$Listener)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f(java.util.List)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(boolean,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  <init>(com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$4:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(double)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  p()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  boolean  c()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <init>(java.lang.Long)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  b(android.support.v4.app.Fragment)
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Long)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService,long,long)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDontShowGrantPermissionButtonClicked()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  a()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()
com.SearingMedia.Parrot.features.settings.SettingsActivity$2:  void  run()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.app.ProgressDialog  a(com.SearingMedia.Parrot.features.settings.SettingsActivity)
com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onDestroy()	com.SearingMedia.Parrot.controllers.di.EventBusController:  void  b(java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  h(float)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getBitRate()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$1:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  g()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileFailedToast$1:  void  run()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDate(java.util.Date)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  s()	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecondsToHumanReadable(long)
com.SearingMedia.Parrot.services.MaintenanceService:  void  d()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  d()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  j()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  ap()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  android.app.Activity  a(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.services.MediaPlayerService$2:  void  <clinit>()	com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState:  com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState[]  values()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.graphics.PointF  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltipUtils:  android.graphics.RectF  b(android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(double)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setValue(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  o()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  boolean  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onSixMonthsClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  b()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  c()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  java.lang.String  j()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$3:  boolean  onTouch(android.view.View,android.view.MotionEvent)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  f(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  f(long)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.utilities.TransitionsUtility:  void  a(android.app.Activity)
com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  w()	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  <init>(android.view.LayoutInflater,java.util.List,com.SearingMedia.Parrot.interfaces.OnShareClickListener)
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$onBackPressed$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  a(double)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  com.SearingMedia.Parrot.controllers.encoders.AudioEncoder  a(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()	com.SearingMedia.Parrot.features.play.full.CircularProgressView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView)
com.SearingMedia.Parrot.features.record.RecordFragment$1:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordClicked()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  O()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  o()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$4:  void  run()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment,boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeView)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  f(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.TextView  getRepeatLabel()
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController,com.SearingMedia.wearexchange.WearExchangeController$1)	com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  g()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.InstallTimingController:  void  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  ak()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$7:  void  a(java.lang.Object)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setFormat(java.lang.String)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  c()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  com.SearingMedia.parrotlibrary.models.DeviceInformationModel  getDeviceInformationModel()	com.SearingMedia.parrotlibrary.models.DeviceInformationModel:  void  setModel(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$1:  void  run()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  a(int)	com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  b(int)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  doneButtonClicked()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$10:  void  a(java.lang.Object)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$recalculateWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.controllers.theme.ThemeController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.theme.ThemeController:  int  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.android.vending.billing.IInAppBillingService  a(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController,com.android.vending.billing.IInAppBillingService)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onEvent(com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent)	com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  int  a()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.features.settings.SettingsShareFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c(android.app.Activity)
com.SearingMedia.Parrot.ParrotApplication$$Lambda$0:  void  run()	com.SearingMedia.Parrot.ParrotApplication:  void  h()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  java.lang.String  G()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  java.lang.String  s()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$2:  void  onResult(com.google.android.gms.common.api.Result)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveFolder$DriveFolderResult)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onResume()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  g()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  a()
com.SearingMedia.Parrot.models.ParrotFile:  void  <clinit>()	com.SearingMedia.Parrot.models.ParrotFile$1:  void  <init>()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  n()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  b(android.support.v4.app.Fragment)
com.SearingMedia.Parrot.controllers.drawer.DrawerController$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  com.SearingMedia.Parrot.features.base.BaseActivity  c()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  q()
com.SearingMedia.Parrot.controllers.ShareController:  void  <init>(java.lang.String,int)	com.SearingMedia.Parrot.controllers.ShareController:  void  a()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setProgress(int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  e()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  b()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  a(java.util.ArrayList)	com.SearingMedia.Parrot.views.lists.KeyValueAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  h()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  P()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  f(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  a()
com.SearingMedia.Parrot.controllers.TestingController:  void  d(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$seekBarChangeListener$1:  void  onStartTrackingTouch(android.widget.SeekBar)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  java.util.ArrayList  c(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  f()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(int)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$16:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  m()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  G()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  int  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordFragment  e(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$5:  void  onDismiss(android.content.DialogInterface)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  m()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$6:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  h()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getId()
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  android.media.MediaFormat  a()	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.lang.String  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList,int)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  j(android.content.Context)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)	com.SearingMedia.Parrot.models.events.BackupFinishedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecurrenceInterval()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  d(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float,float,float)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Integer  getSource()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a(double)	com.SearingMedia.Parrot.models.events.CustomGainEvent:  void  <init>(double)
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding,com.SearingMedia.Parrot.features.save.SaveActivity)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter  m()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  f()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateCalendarIcon$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.tracks.list.CalendarIconView  o()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver,android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  h()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onRequestFeatureClicked()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,java.lang.String)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  q()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  O()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startTimeClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  d()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  android.arch.persistence.db.SupportSQLiteOpenHelper  b(android.arch.persistence.room.DatabaseConfiguration)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  <init>(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl,int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  i(java.lang.String)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setValue(java.lang.String)
com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDestroyView()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <init>()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter  m()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDeleteClick()	com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  h()
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  a()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.lang.String  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  boolean  t()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  c()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  b(android.content.Context,java.lang.String)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  java.util.List  a()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  android.arch.persistence.room.RoomDatabase  a(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  i()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  f()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  android.util.Pair  b(long)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment,boolean)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  boolean  h()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  b()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  boolean  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneYearClicked()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.animation.AnimatorSet  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  h()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  c()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  b(long)
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  c(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingView)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  m()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  t()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  long  S()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getMaxOffset()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  invisibleView(android.view.View)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  n()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setColor(java.lang.Integer)
com.SearingMedia.Parrot.models.ParrotFile:  void  <clinit>()	com.SearingMedia.Parrot.models.ParrotFile$2:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController  d()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(android.content.Intent)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  a(android.support.v7.app.ActionBarDrawerToggle)
com.SearingMedia.Parrot.features.record.BigRecordButton$1:  void  <clinit>()	com.SearingMedia.Parrot.features.record.BigRecordButton$State:  com.SearingMedia.Parrot.features.record.BigRecordButton$State[]  values()
com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  b(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.main.MainActivity:  void  u()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener  a(android.support.design.widget.TabLayout)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$WhenMappings:  void  <clinit>()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState[]  values()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  c()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  s()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(android.os.Parcel)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent)	com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent:  float  a()
com.SearingMedia.Parrot.controllers.ShareController:  void  i()	com.SearingMedia.Parrot.controllers.ShareController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.ShareController)
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  m()	com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  b(com.afollestad.materialdialogs.MaterialDialog)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  com.SearingMedia.Parrot.features.base.InformationDialogFragment$InformationDialogListener  a(com.SearingMedia.Parrot.features.base.InformationDialogFragment)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  s()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  n()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  y()
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.RowModel:  void  a(int)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment,java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a(android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.Long  getId()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  k(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.RecordingQualityOrEffectSettingChangedEvent:  void  <init>()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  S()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  t()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment,int,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording,long)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  <init>()	com.SearingMedia.Parrot.services.AudioProcessingService$FullPlayerServiceBinder:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.record.TimerLayout:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.TimerLayout:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showUnableToPlayFileToast$1:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showUnableToPlayFileToast$1:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()	com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  setClearIconVisible(boolean)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$3:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  com.android.vending.billing.IInAppBillingService  a(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController,com.android.vending.billing.IInAppBillingService)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.play.mini.PlayFragment  e()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  java.lang.String  r(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  b(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment:  com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment  a(com.SearingMedia.Parrot.models.FeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  a()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  h()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(int,java.lang.String[],int[])
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  n()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  l()	com.SearingMedia.Parrot.utilities.ListUtility:  void  d(java.util.List)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  java.util.List  c(java.util.List)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  n()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.utilities.PreferenceViewUtility:  void  a(android.preference.ListPreference)
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  p()
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.models.events.RecordingActionEvent:  void  <init>(int)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  n()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  e(int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$3:  void  run()	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(boolean,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  b(double)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(double)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment,int)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(boolean)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(boolean)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  onDestroy()	com.SearingMedia.Parrot.utilities.ListUtility:  void  d(java.util.List)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  O()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.view.View,android.content.Context)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  java.lang.String[]  getValues()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.lang.String[]  d()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$100(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b()
com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  x()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController  d()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  long  a(long,long)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  a(java.util.ArrayList)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setFormat(java.lang.String)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  j()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.models.RowModel  g(int)	com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,int)
com.SearingMedia.Parrot.features.record.RecordAnimationController$5:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController,android.animation.ObjectAnimator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyCard:  void  setPrice(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onRenameClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  g()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  e()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$initializeButtons$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter  m()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  b(int,android.content.Context)
io.github.douglasjunior.androidSimpleTooltip.ArrowDrawable:  void  onBoundsChange(android.graphics.Rect)	io.github.douglasjunior.androidSimpleTooltip.ArrowDrawable:  void  a(android.graphics.Rect)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController,java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  f(java.lang.String)
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  onDestroyView()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  e(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isInPowerSaverMode(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  ar()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController,com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  k()	com.SearingMedia.Parrot.controllers.FeedbackController:  void  c(android.content.Context)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  k()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  onDestroy()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(java.util.List,java.lang.String)	com.SearingMedia.Parrot.models.ShareGroupModel:  void  a(int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Exception,java.lang.String,com.bumptech.glide.request.target.Target,boolean)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  java.lang.String  b()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  o()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  e()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  b(java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  n()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  p()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onNoButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  b()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.Converters:  long  dateToTimestamp(java.util.Date)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  sourceClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  e()
com.SearingMedia.Parrot.utilities.RepairUtility:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  <init>()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOff$1:  void  run()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.backup.BackupService:  void  b()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  b()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  onTaskRemoved(android.content.Intent)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  boolean  c(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  l()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity$1:  void  run()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.SearingMedia.Parrot.views.lists.KeyValueAdapter  a(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$4:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.models.ShareObject:  java.lang.String  d()	com.SearingMedia.Parrot.models.ShareObject:  android.content.pm.ActivityInfo  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController$6:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.PauseButton  b(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <init>(java.lang.Long)
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a(int)	com.SearingMedia.Parrot.views.components.TimerInputView:  void  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  p()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  z()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  d()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  a()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  t()
com.SearingMedia.Parrot.models.events.RecordingActionEvent:  void  <init>(int)	com.SearingMedia.Parrot.models.events.RecordingActionEvent:  void  a(int)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar4Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  f()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  b(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordAnimationController$6:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile,android.app.Activity)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  c()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  d()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  android.app.PendingIntent  c(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecordingId()
com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  com.SearingMedia.parrotlibrary.models.ChangeLogModel  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.ChangeLogModel:  void  <init>(android.os.Parcel)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$000(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  l()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  c(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a(android.widget.SeekBar,int)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getId()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a_(boolean)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onResume()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter  m()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  onDestroy()	com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  b()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  c()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onFeedbackClicked()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  r()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  a()	com.SearingMedia.Parrot.utilities.ResourceUtility:  float  a(android.content.Context,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  o()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  N()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  w()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  m()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  w()
com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  <init>()	com.SearingMedia.Parrot.models.FeatureModel:  void  <init>()
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()	com.SearingMedia.Parrot.features.main.MainActivity:  android.support.v4.view.ViewPager  s()
com.SearingMedia.Parrot.services.AudioRecordService:  void  onEventBackgroundThread(com.SearingMedia.Parrot.models.events.RecordingNotificationEvent)	com.SearingMedia.Parrot.models.events.RecordingNotificationEvent:  android.app.Notification  b()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  b()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsShareFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsShareFragment)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  d(android.app.Activity)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  h()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  android.preference.ListPreference  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  c()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  b(long)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$10:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  O()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  double  b(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  d(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.BassBoostEvent:  void  <init>(int)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.ImageView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  H()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  l()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPlayButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.support.design.widget.FloatingActionButton  getPausePlayButton()
com.SearingMedia.Parrot.controllers.recording.PostRecordController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  c()
com.SearingMedia.Parrot.features.share.list.ShareFragment:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(android.preference.Preference)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  com.SearingMedia.Parrot.models.ParrotFileList  a()	com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.MediaPlayerUtils:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  a(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingStateEvent)	com.SearingMedia.Parrot.models.events.RecordingStateEvent:  int  a()
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a(java.lang.String)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.pm.ActivityInfo,java.util.List,android.content.Context)
com.SearingMedia.Parrot.features.share.list.ShareFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  h(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  H()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  k()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  finish()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onDestroy()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(long,java.lang.String)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.views.components.TimerInputView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.TimerInputView:  void  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  long  a(int)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)	com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()
com.SearingMedia.Parrot.features.play.full.RepeatMode:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.RepeatMode:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.FeatureModel:  void  c(int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$2:  void  <clinit>()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState[]  values()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDeleteClick()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.ProgressBar  t()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertDatePartsToHumanReadable(int,int,int)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertDateToHumanReadable(java.util.Date)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  y()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  a()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.record.RecordButton:  void  b()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.AnimatorSet)
com.SearingMedia.Parrot.features.record.RecordPresenter:  int  af()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  K()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  boolean  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  boolean  d(int)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.TrackManagerController:  org.reactivestreams.Publisher  c(java.util.List)	io.reactivex.Flowable:  io.reactivex.Flowable  b(java.lang.Object)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  q()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$4:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePlayingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  c(int)	com.SearingMedia.Parrot.utilities.ColorUtility:  java.lang.String  b(int,android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$1:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,long,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long,long)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.TestingController:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState:  void  <clinit>()	com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  boolean  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.MediaPlayerService$MediaPlayerBinder:  com.SearingMedia.Parrot.services.MediaPlayerService  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  minimumVolumeLevel(int)
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.TestingController:  void  d(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.ScreenshotModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  f(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$3:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference,java.lang.String)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  f()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$4:  void  onCancelled(com.google.firebase.database.DatabaseError)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.Long  getId()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  K()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String)
com.SearingMedia.parrotlibrary.models.ChangeLogModel:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  void  <init>()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  boolean  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  F()
com.SearingMedia.Parrot.utilities.TransitionsUtility:  android.support.v4.app.ActivityOptionsCompat  a(android.app.Activity,android.view.View,java.lang.String)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanLollipop()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.FeatureModel:  void  b(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  b()	com.SearingMedia.Parrot.utilities.SpannableUtils:  android.text.SpannableString  a(java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  d()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformDelegate)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getDisplayWidth()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(java.lang.String,boolean)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  d()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  long  getTimeInMillis()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  k()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  j()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSampleRate(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDestroy()
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  h()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  g()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  p()	com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  boolean  c()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$10:  boolean  onTouch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar5Touch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  M()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  d(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  C()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$1:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  b()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileTitle$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.TextView  m()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(android.widget.LinearLayout)	com.SearingMedia.Parrot.features.settings.SettingsActivity$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsActivity)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setAmplitudes(int[])	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(int[])
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$1:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  a(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController,com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,boolean,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(boolean,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$10:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  h(int)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setScrollDurationFactor(double)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDate(java.util.Date)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneViews(android.view.View[])
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.controllers.FirebaseController:  void  b()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  onRecordButtonClicked()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setColor(java.lang.Integer)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  i(android.content.Context)
com.SearingMedia.Parrot.controllers.di.EventBusController:  void  b(java.lang.Object)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  android.app.Activity  g()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  android.app.Activity  t()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,android.app.Activity)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,boolean,android.content.Context)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$9:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.RatingView:  void  onStar5Click()
com.SearingMedia.Parrot.controllers.ShareController:  boolean  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  onClick()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Flowable  a(long)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  io.reactivex.Flowable  a(long)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  n(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.models.SecurePreferences:  void  <init>(android.content.Context,java.lang.String,java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  i()
com.SearingMedia.Parrot.thirdparty.widget.TextWatcherAdapter:  void  onTextChanged(java.lang.CharSequence,int,int,int)	com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a(android.widget.EditText,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  g(int)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getName()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView$1:  void  onAnimationUpdate(android.animation.ValueAnimator)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  android.graphics.Paint  a(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onYesButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  b(int,java.lang.String)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  int  b(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getDuration()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onResume()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(android.os.Bundle)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$0:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  a(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.controllers.TestingController:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  d(int)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  x()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  e(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.utilities.SpannableUtils:  void  <clinit>()	com.SearingMedia.Parrot.utilities.SpannableUtils:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  T()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setValue(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  d()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  b(long)
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setSoundFile(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSource(java.lang.Integer)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  c()	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  d()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$15:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  g(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  c()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.InstallTimingController:  boolean  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  aj()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ac()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter  m()
com.SearingMedia.Parrot.models.ParrotFileList:  boolean  add(java.lang.Object)	com.SearingMedia.Parrot.models.ParrotFileList:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  r()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onDestroy()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  void  a(boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.models.ParrotFile:  void  a(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  setProgress(int)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  c(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onResume()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  g()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayGainLevelEvent)	com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  int  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  t()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$8:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  P()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  ap()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  c(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.ShareController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.ShareController:  void  f()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onOpenSystemSettingsClick()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a()
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  android.app.PendingIntent  a(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  E()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  D()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  e()	com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult:  void  <init>(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingType)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(long)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDuration(java.lang.Long)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  j()	com.SearingMedia.parrotlibrary.models.TimeModel:  void  setTimeElapsed(long)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setListener(com.SearingMedia.Parrot.features.play.full.waveform.WaveformListener)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.waveform.WaveformListener)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onResume()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onResume()
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(java.lang.String,java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  G()	com.SearingMedia.Parrot.utilities.AnimationUtility:  android.view.animation.ScaleAnimation  a(android.view.View,float,float,int,android.view.animation.Animation$AnimationListener)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(java.io.File)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileTitle$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingStateEvent)	com.SearingMedia.Parrot.models.events.RecordingStateEvent:  int  a()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a()	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToMonthHumanReadable(long)
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  b()	com.SearingMedia.Parrot.utilities.PiracyUtility:  java.lang.String  e()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Long)	com.SearingMedia.Parrot.services.MediaPlayerService:  com.SearingMedia.Parrot.controllers.player.AudioPlayer  a(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.services.AudioRecordService:  void  e(android.content.Context)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  a()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  boolean  c()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  o()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  i()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(java.util.List,int)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment,android.widget.ListView)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  y()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  x()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  <init>(com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  p()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatAll$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRepeatAllDrawable()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  int  b(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  b(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  g(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  l()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  p()
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.io.File)	com.SearingMedia.Parrot.models.ParrotFile:  void  b(java.io.File)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  P()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  z()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startTimeClicked()
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,boolean,android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(float)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  k()	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDetailsClick()	com.SearingMedia.Parrot.controllers.IntentController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,android.content.Context)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  n()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$1:  void  onClick(android.view.View)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  boolean  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.io.File)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  m()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  java.io.File  v()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  <clinit>()	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsView)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  o()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  U()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  d()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingFinishedEvent)	com.SearingMedia.Parrot.models.events.RecordingFinishedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openSampleRateSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  f()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateCalendarIcon$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  I()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  Q()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  n()	com.SearingMedia.Parrot.utilities.BatteryUtility:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,long)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,long)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  c(int,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$10:  void  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.FeatureModel:  void  a(int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  d(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  <init>(int,com.SearingMedia.Parrot.models.PendingPermissionsModel$Listener)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  android.widget.TextView  A()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  e(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  c()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter  m()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int,java.lang.String[],int[])
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  f()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  int  b(int)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  int  a()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  e()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController  a()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onSpeedClick()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$3:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.lang.String,java.lang.Object[])
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity)
com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(java.lang.String,boolean)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  c()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  e()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.record.RecordPresenter$1:  void  run()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  B()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ae()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  android.preference.ListPreference  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$8:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  Q()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isDateSet()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  i()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  b(int)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$1:  void  onResult(com.google.android.gms.common.api.Result)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveApi$DriveIdResult)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecordingId()
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  <init>()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  b()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  g()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.Parrot.models.databases.TrackDurationDao  m()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  q(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  java.lang.String  w()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  c(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  boolean  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  e(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ad()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openSampleRateSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$2:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(float,float)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  boolean  b()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileFailedToast$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  onCreateActionMode(android.view.ActionMode,android.view.Menu)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  y()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$0:  void  a(java.lang.Object)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onRepeatClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  f()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.animation.ValueAnimator  b(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.controllers.RateAppController:  void  j()	com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment$Listener)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(long,long)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)	com.SearingMedia.Parrot.models.RowModel:  java.lang.String  b()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  i()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  b(com.google.android.exoplayer2.PlaybackParameters)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(long,long)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  A()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  com.SearingMedia.Parrot.models.ScheduledRecordingViewModel  a(java.lang.String,java.util.Date)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  void  <init>(int)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  c(int)
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BottomBarButton  g(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2$3:  void  <init>(int,int)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter$$Lambda$1:  void  <clinit>()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter$$Lambda$1:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(int,int,int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  t()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  h()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  d()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  e(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  a(android.view.ViewGroup,int)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,java.util.List)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.models.ParrotFile:  long  i()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  d()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  d(int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.controllers.RateAppController:  void  k()	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$Listener)
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Long)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  k_()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <init>()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  g()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  e()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  addScheduledRecordingClicked()
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onPauseClicked()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterView)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  as()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  p()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ae()
com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.pm.ActivityInfo,java.util.List,android.content.Context)	com.SearingMedia.Parrot.controllers.ShareController:  boolean  h()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.FeatureModel:  void  b(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex,android.media.MediaFormat)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  b()	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList,int)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.controllers.TrackManagerController:  rx.Subscription  a(rx.functions.Action1)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  <clinit>()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  int  b(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  b(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  v()
com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  g(long)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(java.lang.String)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  d(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  build()
com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment:  com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment  a(com.SearingMedia.Parrot.models.FeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  c()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  d(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  f()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  android.preference.ListPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideTopMenu$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  s()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.date.DatePickerDialog  H()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.main.MainActivity$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.main.MainActivity:  void  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.time.TimePickerDialog  a(com.wdullaer.materialdatetimepicker.time.TimePickerDialog$OnTimeSetListener)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  <init>(android.app.Activity)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  o()	com.SearingMedia.featurepager.viewpager.FeaturePagerAdapter:  void  <init>(android.support.v4.app.FragmentManager,java.util.List)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$2:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.RecordingStateModel$State:  com.SearingMedia.parrotlibrary.models.RecordingStateModel$State[]  values()
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  onDismiss(android.content.DialogInterface)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  g()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int,java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  n()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  int  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onOneClicked()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(long)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,boolean,android.content.Context)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment$1:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  long  getItemId(int)	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  java.lang.Object  getItem(int)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  b()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleViews(android.view.View[])
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  i(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ai()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  onPrepared(android.media.MediaPlayer)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(boolean)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.String  getRecordingPath()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  <init>(android.app.Activity,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  Y()
com.SearingMedia.Parrot.utilities.BatteryUtility:  void  a(android.content.Context)	com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment$DeleteDialogListener,java.util.List)
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  setValue(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setValue(int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  a()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  b(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.ThemeController:  void  a(android.content.Context)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar3Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  c()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  f()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  boolean  access$400(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.controllers.TestingController:  void  d(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getFormat()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  F()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()	com.SearingMedia.Parrot.models.RecordingConstants:  int  c(int)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b(android.support.v7.app.ActionBarDrawerToggle)	com.SearingMedia.Parrot.controllers.drawer.DrawerController$2:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerController)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a(byte[])	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  java.util.concurrent.ArrayBlockingQueue  a(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Integer  getSource()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(boolean)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(android.view.View,boolean)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ah()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  o()	com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  java.io.File  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  e()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Flowable  a(long)
com.SearingMedia.Parrot.controllers.TestingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording[])
com.SearingMedia.Parrot.models.ParrotFile$2:  int  compare(java.lang.Object,java.lang.Object)	com.SearingMedia.Parrot.models.ParrotFile$2:  int  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  a(com.SearingMedia.Parrot.features.record.RecordPresenter,com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView  u()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  i()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onTrackClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()	com.SearingMedia.Parrot.views.components.TwoColorDrawable:  void  <init>(int,int)
com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,long,int)	com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  h()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  b(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setTime(java.util.Date)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  getHourMinuteFormatted(java.util.Date,boolean)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v7.app.AppCompatActivity  p()
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onDestroyView()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  H()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c_()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  z()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSampleRate(java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  d()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  e()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  g()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()	com.SearingMedia.Parrot.utilities.GooglePlayServicesUtility:  android.support.v4.util.Pair  a(android.content.Context)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  onDestroy()	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
com.SearingMedia.Parrot.features.init.InitController:  void  <init>()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.parrotlibrary.models.PendingRecording$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.parrotlibrary.models.PendingRecording$1:  com.SearingMedia.parrotlibrary.models.PendingRecording[]  newArray(int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ag()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$3:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  a(android.content.Context,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  android.preference.ListPreference  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.models.ParrotFile:  void  h(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  onEvent(com.SearingMedia.Parrot.models.events.CustomGainEvent)	com.SearingMedia.Parrot.models.events.CustomGainEvent:  double  a()
com.SearingMedia.parrotlibrary.requests.ParrotWearRequestHelper:  void  sendMessage(java.lang.String,com.SearingMedia.wearexchange.WearExchangeController)	com.SearingMedia.parrotlibrary.requests.ParrotWearRequestHelper:  void  sendMessage(java.lang.String,java.lang.Object,com.SearingMedia.wearexchange.WearExchangeController)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.FeatureModel:  void  b(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showTopMenu$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.view.ViewGroup  p()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$500(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  l()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  t()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  b(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  onTouchEvent(android.view.MotionEvent)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  a(android.view.MotionEvent)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  int  a(com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  b(java.lang.String)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  e()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  onDestroy()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  format(java.lang.String)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.design.widget.NavigationView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.controllers.FeedbackController:  void  e(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,long)
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.models.ShareGroupModel:  java.util.List  c()
com.SearingMedia.Parrot.thirdparty.utils.Option:  com.SearingMedia.Parrot.thirdparty.utils.Option  b()	com.SearingMedia.Parrot.thirdparty.utils.Option$None:  void  <init>()
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,java.lang.String,boolean,android.content.Context)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  a(int,short[])
com.SearingMedia.Parrot.features.record.RecordFragment:  void  f(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  j()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  i()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  j()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  u()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  a(android.preference.Preference)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  c()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  long  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  R()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideWaveTouchingState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
com.SearingMedia.Parrot.controllers.RateAppController:  void  f()	com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  android.app.Activity  a(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(java.lang.Object)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,android.view.View)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.main.MainActivity:  void  o()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController$Delegate)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar1Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  a()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController)
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showActivatedSpeedIcon$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getSpeedButton()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$4:  void  run()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  d(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupView)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  n()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  boolean  a()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording,long)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,com.SearingMedia.parrotlibrary.models.TimedRecording)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  onActionItemClicked(android.view.ActionMode,android.view.MenuItem)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.view.MenuItem)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  w()	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  a(android.support.v4.view.ViewPager$OnPageChangeListener)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(float)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  B()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  com.SearingMedia.Parrot.models.ParrotFile  g(android.content.Intent)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.init.ChangeLogUtil$1:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$2:  boolean  a(java.lang.Object)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  boolean  b(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$attachView$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,java.lang.String,boolean)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  a()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$2:  void  run()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$20:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(java.lang.String)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  f(java.lang.String)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.services.MaintenanceService:  void  d()	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  int  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  b()
com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex,android.media.MediaFormat)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  o()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  i()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  i()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  void  b(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl,android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  d()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  onDestroy()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  d(int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  e()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  g()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  d(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1,android.widget.ListView)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a()	com.SearingMedia.Parrot.controllers.di.TimeController:  long  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onRepeatClick()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.ParrotApplication:  void  n()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  int  e(int)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  b(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  g(int)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  java.lang.String  i(int)
com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.pm.ActivityInfo,android.content.Intent)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  z()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  android.util.Pair  b(long)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.main.MainActivity:  void  q()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  a(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  int  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  com.SearingMedia.Parrot.features.base.BaseActivity  c()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  b(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  r()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context,android.app.PendingIntent)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecordingId()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  d(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$7:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(android.telephony.TelephonyManager)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  int  c(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  Q()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveTouchingState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  E()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.util.Date  getUpdatedDateTime(java.util.Date,int,int,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  onAnimationUpdate(android.animation.ValueAnimator)	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  java.util.concurrent.atomic.AtomicBoolean  a(com.SearingMedia.Parrot.features.play.full.CircularProgressView)
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter$RowModelViewHolder:  void  <init>(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  z()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  b()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.RowModel:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  n()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$4:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  int  d()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  d(long)
com.SearingMedia.Parrot.controllers.ShareController:  void  g()	com.SearingMedia.Parrot.utilities.ShareUtility:  java.util.ArrayList  a(android.content.Intent,android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  k()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  h(boolean)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.util.List  b()
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,java.lang.String,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,java.lang.String,boolean,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setFromPendingRecording(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$2:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  o()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.lang.String)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  int  b(com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.util.ArrayList  c()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCheckChanged(android.widget.CompoundButton,boolean)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  b(boolean)
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  c(long)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  f()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  l()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  b()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(boolean,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,boolean)
com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  e(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView)
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setDuration(long)	com.SearingMedia.Parrot.utilities.StringUtility:  java.lang.String  a(long)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  b(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  i()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment,boolean)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  o()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  int  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  o()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  B()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  boolean  b(android.content.Context)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  aA()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onSixMonthsClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  onClick()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isLollipopOrLater()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  D()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onGrantStoragePermissionClicked()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  q()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  u()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  java.io.File  v()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setValue(java.lang.String)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  a(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  E()	com.SearingMedia.Parrot.utilities.AnimationUtility:  android.view.animation.ScaleAnimation  a(android.view.View,float,float,int,android.view.animation.Animation$AnimationListener)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  b()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  e()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  e()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  e()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility$$Lambda$0:  void  run()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyView)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  b()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  s()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  bitRate(java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setColor(java.lang.Integer)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.util.ArrayList  c()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.lang.String[]  d()
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  b()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  java.lang.String  G()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  java.lang.Void  a(java.lang.Void[])	com.SearingMedia.wearexchange.WearExchangeController:  com.SearingMedia.wearexchange.WearExchangeInterface  b(com.SearingMedia.wearexchange.WearExchangeController)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPreviousTrackClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$200(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  X()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDate(java.util.Date)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$Listener  a(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  s()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  c()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  Q()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	io.reactivex.Flowable:  io.reactivex.Flowable  a(io.reactivex.functions.Function)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isInPowerSaverMode(android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isKitKat()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(long,long)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  g()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  b(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$0:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  c_()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(long,long)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecondsToHumanReadable(long)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment,boolean)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(boolean)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  e()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  v()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  float  getDensity(android.content.Context)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  H()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileFailedToast$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)	com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  a(double)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(android.view.View)
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2$4:  void  <init>(int,int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.os.FileObserver  a(java.lang.String)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.lang.String,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment)
com.SearingMedia.Parrot.models.ParrotFileList:  com.SearingMedia.Parrot.models.ParrotFileList  a()	com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  double  c(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.v7.widget.CardView)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  b(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  setProgress(int)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(java.lang.CharSequence)
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,int)	com.SearingMedia.Parrot.models.RowModel:  void  a(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  an()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  d()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.RecordingQualityOrEffectSettingChangedEvent:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openBitRateSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  g()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  d(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  b(com.SearingMedia.Parrot.controllers.recording.ChronometerController)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  k()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  boolean  onCreateOptionsMenu(android.view.Menu)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  c()
com.SearingMedia.Parrot.features.main.MainPresenter:  boolean  a(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter:  boolean  l()
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.SearingMedia.Parrot.features.play.mini.PlayPresenter  a()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  <init>()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  j()	com.SearingMedia.Parrot.services.AudioProcessingService$start30MinuteTimeout$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.util.Calendar)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isTimeSet()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setFabImageDrawable(android.graphics.drawable.Drawable)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setDuration(long)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView,android.view.View)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView,android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$1:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.ImageView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  o()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onHelpClicked()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  <init>()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  s()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  java.lang.Object[]  newArray(int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel[]  a(int)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double[]  a(int)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  int  a(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getDuration()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState:  void  <clinit>()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  d()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  A()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  g()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  n()	com.SearingMedia.Parrot.exceptions.StartRecordingException:  void  <init>(java.lang.String)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  k(int)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  java.lang.String  F()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  java.lang.String  z()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a(android.content.Context)
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  onScaleBegin(android.view.ScaleGestureDetector)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$5:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  X()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter  W()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  <init>()	com.SearingMedia.featurepager.activities.FeaturePagerActivity:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  y()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  onResult(com.google.android.gms.common.api.Result)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  a(com.google.android.gms.drive.DriveApi$MetadataBufferResult)
com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  <clinit>()	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onOpenSystemSettingsClick()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(java.util.List)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.util.List)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  q()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.util.List)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  int  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  android.preference.SwitchPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  h()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  void  a(boolean)
com.SearingMedia.Parrot.views.lists.KeyValueAdapter$ViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar1Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  f()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  g(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b(int)
com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController$Companion:  void  <init>()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  g()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Q()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  a(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  a(int)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  A()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  b(java.util.ArrayList)	com.SearingMedia.Parrot.controllers.IntentController:  void  a(java.util.ArrayList,android.content.Context,android.support.v4.app.ActivityOptionsCompat)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  K()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$recalculateWave$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  p()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideTopMenu$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.view.ViewGroup  p()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService$MediaPlayerServiceListener)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(java.util.ArrayList)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  l()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$3:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackPressed()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  long  a(long,long)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationCompat$WearableExtender  c(android.content.Context)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOff$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRepeatOffDrawable()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel  a(android.os.Parcel)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel  a(android.util.AttributeSet)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex,boolean)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(boolean)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  removeDividers(android.widget.ListView)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter$$Lambda$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  int  a(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$2:  void  run()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  x()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  e(int)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  java.lang.String  i(int)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onZeroClicked()
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.TestingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.RecordAnimationController$8:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.view.ViewGroup  c(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onRequestFeatureClicked()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  c()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.play.mini.PlayFragment  e()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsView)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  e()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  <init>(android.app.Activity,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  ae()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  d()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  e(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  d(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordAnimationController$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.utilities.AnimationStartListener:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  android.os.Handler  a(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener  a(android.support.design.widget.TabLayout)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  g()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  k()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Z()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  r()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  java.lang.String  g()
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  b()
com.SearingMedia.Parrot.models.ShareObject$1:  int  compare(java.lang.Object,java.lang.Object)	com.SearingMedia.Parrot.models.ShareObject$1:  int  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.models.ShareObject)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  N()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveStoppedState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$9:  void  run()	com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  b(android.app.Activity)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  a()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  c()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  p()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter$$Lambda$0:  void  a(java.lang.Object)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.views.components.RatingView:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  j()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  e(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float,float,float)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$7:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  h(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  d()
com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.models.ShareGroupModel:  java.util.List  c()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openBitRateSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$3:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.main.MainActivity:  void  u()	com.SearingMedia.Parrot.features.main.TabsPagerAdapter:  void  <init>(android.support.v4.app.FragmentManager)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  c(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  g()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  int  convertSecondsToMilliseconds(int)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar3Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  f()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton1Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  a(android.content.Context,java.util.ArrayList,int)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$8:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  durationClicked()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onYesButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(android.content.Intent)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$1:  void  run()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)
com.SearingMedia.Parrot.features.record.CustomGainCalculator:  java.lang.String  a(double)	com.SearingMedia.Parrot.features.record.CustomGainCalculator:  int  b(double)
com.SearingMedia.Parrot.controllers.ShareController:  void  i()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.Converters:  long  dateToTimestamp(java.util.Date)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(java.lang.String,boolean)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDestroyView()	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  onDestroy()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  t()
com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.models.ParrotFile:  int  compareTo(java.lang.Object)	com.SearingMedia.Parrot.models.ParrotFile:  int  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(float)
com.SearingMedia.Parrot.models.ParrotFile:  void  c(java.io.File)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  b(java.io.File)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  h()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onResume()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  f()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(android.support.v7.widget.RecyclerView$ViewHolder,int)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  int  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  a(java.util.ArrayList)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.models.ParrotFileList:  void  add(int,java.lang.Object)	com.SearingMedia.Parrot.models.ParrotFileList:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(byte[],int)
com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  float  b(int,int)	com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  int  c(int,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.receivers.BootReceiver$$Lambda$0:  void  run()	com.SearingMedia.Parrot.receivers.BootReceiver:  void  a(android.content.Context)
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  d(int)	com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  b(int)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  i()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$3:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToDropboxToggled(boolean)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$5:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  c(android.widget.TextView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$400(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList,int)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDuration:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.TestingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording[])
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  java.util.ArrayList  e()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  java.lang.String  c()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  g()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$8:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.services.AudioRecordService:  void  c(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()
com.SearingMedia.Parrot.features.record.RecordAnimationController$8:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.utilities.AnimationStartListener:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onBuildHeaders(java.util.List)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onEffectsClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  o()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  e(float)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  com.SearingMedia.Parrot.features.base.BaseActivity  c()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.TimeDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getTopY()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()	com.SearingMedia.Parrot.models.RecordingConstants:  int  b(int)
com.SearingMedia.Parrot.features.record.PauseButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.PauseButton,android.view.View)	com.SearingMedia.Parrot.features.record.PauseButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.PauseButton,android.content.Context)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  v()	com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  u()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  e()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  v()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  <init>(android.app.Activity,com.SearingMedia.Parrot.features.backup.cloud.CloudControllerListener)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveTouchingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)	com.SearingMedia.Parrot.features.base.BaseActivity:  boolean  F()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$spinPausePlayButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onSkipSilenceClicked()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  n()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  io.reactivex.Flowable  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  o()	com.SearingMedia.Parrot.features.save.SavePresenter:  android.support.v7.app.AppCompatActivity  w()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  l(long)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  d()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  b()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  c()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  e(android.widget.ListView,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.TextView  b(android.widget.ListView,int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  <init>()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a_(boolean)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  f()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getStartOffsetWithZoom()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  l()
com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  int  getItemViewType(int)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  c()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$1:  void  <clinit>()	com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$1:  void  <init>()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  al()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateTime$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.TextView  getStartTimeTextView()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  J()
com.SearingMedia.Parrot.controllers.ShareController:  void  j()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.SeekBar)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  r()	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  <init>(com.SearingMedia.featurepager.transformers.TransformerType)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  c(int)	com.SearingMedia.Parrot.controllers.IntentController:  void  a(int,android.app.Activity)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  e()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getDuration()
com.SearingMedia.Parrot.models.ParrotFile$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.Parrot.models.ParrotFile$1:  com.SearingMedia.Parrot.models.ParrotFile[]  a(int)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  boolean  V()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  boolean  d(android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setBitRate(java.lang.String)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getSampleRate()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  c()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment,boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.lang.String  e()	com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  java.io.File  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  n()	com.SearingMedia.Parrot.models.FeatureModel:  void  <init>(int,int,int)
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  java.lang.String  a(int)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b(android.widget.SeekBar,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  h(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b()
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  l()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(android.widget.LinearLayout)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanLollipop()
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  void  <init>()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  K()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  b()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  c()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  com.SearingMedia.parrotlibrary.models.PendingRecording  b()
com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  void  a(android.widget.TextView)	com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  boolean  a()
com.SearingMedia.Parrot.features.record.PauseButton:  void  c()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  f(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(boolean)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onFeedbackClicked()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  b()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity,android.view.View,boolean)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(android.view.View,boolean)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  android.app.Activity  l()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView,android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding,com.SearingMedia.Parrot.features.backup.CloudBackupCardView)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao  l()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$18:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  I()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.lang.String  getPhoneNumber()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(boolean)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  k()	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  com.google.android.exoplayer2.source.MediaSource  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  e()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.ImageView)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  i()	com.SearingMedia.Parrot.services.AudioProcessingService$prepareProgressListener$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationCompat$WearableExtender  d(android.content.Context)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  k()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  o()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  g()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.utilities.ImageUtility:  com.bumptech.glide.load.Key  a(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(int,int)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setDayPadding(java.lang.String)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar4Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  d()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  F()	com.SearingMedia.Parrot.ParrotApplication:  android.os.Handler  e()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$WhenMappings:  void  <clinit>()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState[]  values()
com.SearingMedia.Parrot.controllers.analytics.GoogleAnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  g(int)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  java.lang.String  i(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PhoneCallEndedEvent)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  as()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$9:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  o()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  <init>(java.util.List,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$Listener)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onResume()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a()
com.SearingMedia.Parrot.features.record.PauseButton$State:  void  <clinit>()	com.SearingMedia.Parrot.features.record.PauseButton$State:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  <init>(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.Option:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ae()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(com.SearingMedia.Parrot.controllers.recording.ChronometerController,long)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  b(long)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onGainClicked()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  o()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  long  e()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  n()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.RecordingQualityOrEffectSettingChangedEvent:  void  <init>()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  t()	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  x()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  b()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setBitRate(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  t()	com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  setValue(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ab()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  setSubtitle(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Flowable  a(long)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  <init>()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayPresenter)
com.SearingMedia.Parrot.features.main.MainActivity:  void  o()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  boolean  d(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  <init>()
com.SearingMedia.Parrot.views.components.RatingView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.RatingView:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ab()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  O()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.main.MainActivity:  void  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b()
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  b()	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  b()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$3:  void  <clinit>()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$3:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,java.lang.String,com.SearingMedia.Parrot.models.ParrotFileList,android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayNewTrackEvent)	com.SearingMedia.Parrot.models.events.PlayNewTrackEvent:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  at()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  f()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  d(android.app.Activity)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter  m()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  <init>()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.events.PermissionGrantedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  boolean  b(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  a(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)
com.SearingMedia.Parrot.controllers.ShareController:  void  a()	com.SearingMedia.Parrot.controllers.ShareController:  void  k()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$3:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  c(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  l()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$4:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)
com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  void  <init>(boolean)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  c()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  b(java.util.List)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDuration(java.lang.Long)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  d(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter  m()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  <init>()
com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$0:  void  run()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  y()
com.SearingMedia.Parrot.receivers.EventReceiver:  void  a(java.lang.String)	com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  m()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer$$Lambda$0:  com.google.android.exoplayer2.upstream.DataSource  a()	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  com.google.android.exoplayer2.upstream.DataSource  a(com.google.android.exoplayer2.upstream.FileDataSource)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  d(java.lang.String)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  onServiceDisconnected(android.content.ComponentName)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.android.vending.billing.IInAppBillingService  a(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController,com.android.vending.billing.IInAppBillingService)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onSaveInstanceState(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.TextView  r()
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.models.ShareObject)
com.SearingMedia.Parrot.controllers.ShareController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.ShareController:  void  g()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneMonthClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  a()
com.SearingMedia.Parrot.features.init.ChangeLogUtil$1:  void  onCancelled(com.google.firebase.database.DatabaseError)	com.SearingMedia.Parrot.controllers.FirebaseController:  void  c()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.ColorUtility:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.receivers.WidgetReceiver:  android.app.PendingIntent  b(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.time.TimePickerDialog  a(com.wdullaer.materialdatetimepicker.time.TimePickerDialog$OnTimeSetListener)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.util.Calendar)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.design.widget.NavigationView  b()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  int  f()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)
com.SearingMedia.Parrot.features.record.BigRecordButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.BigRecordButton,android.view.View)	com.SearingMedia.Parrot.features.record.BigRecordButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.BigRecordButton,android.content.Context)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  io.reactivex.Flowable  a()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomSQLiteQuery)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(int,android.content.Context)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)	com.SearingMedia.Parrot.features.main.MainPresenter:  boolean  l()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  H()
com.SearingMedia.Parrot.views.components.ParrotSwipeRefreshLayout:  void  setPullDownToRefreshEnabled(boolean)	com.SearingMedia.Parrot.views.components.ParrotSwipeRefreshLayout:  void  setEnabled(boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startDateClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  c()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter  k()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  m()
com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  source(int)
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  long  e()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.utilities.CrashUtils:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  build()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  f(com.SearingMedia.Parrot.models.ParrotFileList)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  G()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)
com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  java.lang.String  toString()	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  java.lang.Object  c()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onTaskRemoved(android.content.Intent)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)	com.SearingMedia.Parrot.models.RowModel:  int  d()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  l()	com.SearingMedia.Parrot.controllers.TrackManagerController:  boolean  e()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(int)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  a()
com.SearingMedia.Parrot.models.SecurePreferences:  void  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  java.lang.String  a(java.lang.String,javax.crypto.Cipher)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  k()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  v()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.v7.widget.CardView)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  boolean  d(int)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ad()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a(double)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(double)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onEffectsClick()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.RateAppController:  void  <init>(android.support.v4.app.FragmentActivity)	com.SearingMedia.Parrot.controllers.RateAppController:  void  h()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.io.File)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(java.io.File)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(com.SearingMedia.Parrot.models.AnalyticsEventModel)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,com.SearingMedia.Parrot.models.AnalyticsEventModel)
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  b(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  I()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(android.os.Bundle)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setNextPagingEnabled(boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  java.lang.Object  call()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  java.util.List  a()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  f()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  long  e()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  j()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  j()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.services.MaintenanceService:  void  b()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(android.content.Context)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  isBluetoothPreferred(boolean)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  n()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.views.components.RatingView:  void  setListener(com.SearingMedia.Parrot.views.components.RatingView$Listener)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,boolean)
com.SearingMedia.Parrot.models.ParrotFile:  void  <clinit>()	com.SearingMedia.Parrot.models.ParrotFile$3:  void  <init>()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getMaxOffset()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  j()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  j(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.FeatureModel:  void  c(int)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  android.preference.ListPreference  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneYearClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  c()
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  a()	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  kotlin.Lazy  n()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ac()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  e(android.app.Activity)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  g()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onTaskRemoved(android.content.Intent)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a(android.preference.Preference)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$seekBarChangeListener$1:  void  onStopTrackingTouch(android.widget.SeekBar)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  java.util.ArrayList  c(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  d()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  f()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.ImageView)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  F()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  saveTrack()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  as()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c_()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  boolean  u()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  t()
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  a(boolean)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  G()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordView)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	io.reactivex.Flowable:  io.reactivex.disposables.Disposable  a(io.reactivex.functions.Consumer)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDestroyView()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.AnimatorSet)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  b()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.Observable)
com.SearingMedia.Parrot.models.SecurePreferences:  java.lang.String  d(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  java.lang.String  f(java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  e(long)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$WhenMappings:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.RepeatMode:  com.SearingMedia.Parrot.features.play.full.RepeatMode[]  values()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(java.lang.Object)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding,com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  y()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  b(java.io.File)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setFormat(java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  int  convertMillisecsToMonthNumber(long)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$6:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  setTitle(java.lang.CharSequence)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSource(java.lang.Integer)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.SearingMedia.Parrot.features.settings.EmptyPresenter  m()	com.SearingMedia.Parrot.features.settings.EmptyPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  io.reactivex.Flowable  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  z()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  D()
com.SearingMedia.Parrot.controllers.ShareController:  void  f()	com.SearingMedia.Parrot.controllers.ShareController:  android.content.Intent  a(java.lang.String)
com.SearingMedia.Parrot.controllers.analytics.FirebaseAnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  at()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(long,long)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.IntentController:  void  a(java.util.ArrayList,android.content.Context,android.support.v4.app.ActivityOptionsCompat)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(java.lang.String,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.events.PermissionDeniedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  n()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.util.ArrayList  a(java.lang.String,java.util.ArrayList)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int,int,int)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setDate(java.util.Date)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  <clinit>()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(java.io.File,com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.CloudController,java.io.File)
com.SearingMedia.Parrot.features.backup.BackupPresenter$4:  void  run()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupPresenter)
com.SearingMedia.Parrot.controllers.theme.ThemeController:  int  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  E()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.models.ParrotFile:  void  g(java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  n()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  E()	com.SearingMedia.Parrot.models.ParrotFileList:  int  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.WaveSurfaceView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.view.View)	com.SearingMedia.Parrot.features.record.WaveSurfaceView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(java.util.List)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  y()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  F()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  h(android.content.Context)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  g(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.main.MainActivity:  void  o()	com.SearingMedia.Parrot.features.main.MainActivity:  void  c(int)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.views.components.TimerInputView:  void  c()	com.SearingMedia.Parrot.views.components.TimerInputView:  long  getTimeInMillis()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  d(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context,java.lang.String,int,int,boolean,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  d()	com.SearingMedia.Parrot.controllers.TrackManagerController:  boolean  e()
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$OnTabSelectedListener  b()	com.SearingMedia.Parrot.features.main.MainPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$4:  void  run()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  android.preference.SwitchPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  h()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  g()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher$1:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.RecordingStateModel$State:  com.SearingMedia.parrotlibrary.models.RecordingStateModel$State[]  values()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  n()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(int)	com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  a(int,android.content.Context)
com.SearingMedia.Parrot.features.backup.BackupPresenter$1:  void  run()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment)	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  b()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  c()
com.SearingMedia.Parrot.features.record.RecordAnimationController$6:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  k()	com.SearingMedia.Parrot.services.MediaPlayerService:  java.lang.String  e()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  d()	com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.save.SavePresenter)
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  android.arch.persistence.db.SupportSQLiteDatabase  a(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl,android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  f()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  f(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$setProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.SeekBar  getSeekBar()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  o()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  G()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  c(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  <init>(android.app.Activity)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDetailsClick()
com.SearingMedia.Parrot.features.record.PauseButton:  void  c()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  android.support.v4.app.FragmentActivity  r()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(boolean)
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  com.SearingMedia.parrotlibrary.models.RecordedPhoneCall  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask$1:  void  <clinit>()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType:  com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType[]  values()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  testButtonClicked()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(java.lang.String)
com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  a()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.util.List)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.utilities.RepairUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  b(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context,java.lang.String,int,int,boolean,int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$3:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  java.io.File[]  d(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  boolean  i()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  boolean  h()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(int)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails  f()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$5:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  S()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateLoadFileProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setProgress(int)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  b(java.lang.String)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,boolean,android.content.Context)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  n()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  av()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  c(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  deleteButtonClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  k()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.di.EventBusController:  void  <init>()
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  java.lang.Object  a()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDontShowGrantPermissionButtonClicked()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  s()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.helpers.AudioFocusHelper:  boolean  a()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$2:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)
com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.base.InformationDialogFragment)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  c(boolean)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()	com.SearingMedia.Parrot.features.record.RecordFragment:  boolean  ac()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$4:  boolean  onTouch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar2Touch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.models.ScreenshotModel$1:  com.SearingMedia.Parrot.models.ScreenshotModel  a(android.os.Parcel)	com.SearingMedia.Parrot.models.ScreenshotModel:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b()	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(int)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onCloseClicked()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  long  c(long)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  a(int)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$6:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onFiveClicked()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  g(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToDateHumanReadable(long)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  u()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  c(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  d()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  G()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  A()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  com.SearingMedia.Parrot.thirdparty.utils.Option  c(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  g(float)
com.SearingMedia.Parrot.models.ParrotFile$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.Parrot.models.ParrotFile$1:  com.SearingMedia.Parrot.models.ParrotFile  a(android.os.Parcel)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  android.widget.ImageView  y()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  y()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  n()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  l()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.parrotlibrary.models.RecordingModel  t()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  h(long)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  android.preference.ListPreference  a(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  e()
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.events.PermissionDeniedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  g()
com.SearingMedia.Parrot.features.play.full.CircularProgressView$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setProgress(int)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  n()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  B()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  k()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  <init>()	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.content.Context)	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  d()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$5:  void  onClick(android.view.View)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  b(java.util.List)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  b(int)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  f()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  onEventBackgroundThread(com.SearingMedia.Parrot.models.events.RecordingFinishedEvent)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  b()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  j(float)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  y()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  m()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  w()
com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  a(java.util.ArrayList)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter  m()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  <init>()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.io.File)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  x()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSource(java.lang.Integer)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onSaveInstanceState(android.os.Bundle)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  int  getLockPage()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.services.AudioRecordService:  int  onStartCommand(android.content.Intent,int,int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  a()
com.SearingMedia.Parrot.utilities.ImageUtility:  com.bumptech.glide.load.Key  a(android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAppVersion(android.content.Context)
com.SearingMedia.Parrot.services.MediaPlayerService$2:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.RepeatMode:  com.SearingMedia.Parrot.features.play.full.RepeatMode[]  values()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  nameClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  f()
com.SearingMedia.Parrot.features.record.PauseButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.PauseButton:  void  c()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  n()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(int,java.lang.String[],int[])
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(boolean)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(float)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  j()	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  b()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  F()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  b(java.lang.String,java.lang.String,android.app.Activity)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.graphics.PointF  l(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.graphics.PointF  r()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  c()	com.SearingMedia.Parrot.utilities.SpannableUtils:  android.text.SpannableString  a(java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.content.Context  f()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  b(java.util.List)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  l()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(int)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isLollipopOrLater()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  az()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  h()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  m()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  g()
com.SearingMedia.Parrot.utilities.BatteryUtility:  void  <clinit>()	com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.controllers.RateAppController:  void  d()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(int)
com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$2:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$Listener  a(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  onCreateActionMode(android.view.ActionMode,android.view.Menu)	com.SearingMedia.Parrot.models.events.ActionModeStartedEvent:  void  <init>()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController  c()
com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.TimerInputView,android.view.View)	com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding,com.SearingMedia.Parrot.views.components.TimerInputView)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ai()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,long)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  f()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  b(java.lang.String,boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  <init>()	com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  ar()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  <init>()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  r(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  a()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  void  b()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSource(java.lang.Integer)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  g(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  s()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.CircularProgressView  s()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  k()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$3:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  T()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  n()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.Option:  com.SearingMedia.Parrot.thirdparty.utils.Option  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  <init>(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateLoadFileProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.CircularProgressView  s()
com.SearingMedia.Parrot.features.record.RecordButton:  void  c()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.AnimatorSet)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  d(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$1:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  k()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  g()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onSaveInstanceState(android.os.Bundle)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	io.reactivex.Flowable:  io.reactivex.disposables.Disposable  a(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$9:  void  a(java.lang.Object)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(android.util.ArrayMap)
com.SearingMedia.Parrot.receivers.WidgetReceiver:  android.app.PendingIntent  c(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Intent)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,boolean)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onResume()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.SearingMedia.Parrot.controllers.upgrade.ProValidationController  b(boolean)
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  d(android.view.View)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  <init>()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  void  a(com.SearingMedia.Parrot.features.base.InformationDialogFragment$InformationDialogListener)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Object,java.lang.Object,com.bumptech.glide.request.target.Target,boolean,boolean)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(com.bumptech.glide.load.resource.drawable.GlideDrawable,java.lang.String,com.bumptech.glide.request.target.Target,boolean,boolean)
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment)
com.SearingMedia.Parrot.features.record.RecordAnimationController$1:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  b()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.util.ArrayList  c()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  U()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  e(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  f()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  j()
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)	com.SearingMedia.Parrot.features.base.BaseActivity:  boolean  F()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(boolean)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Q()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  y()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  E()
com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  void  <init>(int)	com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  void  a(int)
com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$0:  void  <clinit>()	com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$0:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.FirebaseAnalyticsController:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	io.reactivex.Single:  io.reactivex.Maybe  a(io.reactivex.functions.Predicate)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.features.record.RecordPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.design.widget.NavigationView  b()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  G()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  onGlobalLayout()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(java.lang.String)
com.SearingMedia.Parrot.controllers.analytics.FirebaseAnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  c()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  java.util.List  a()	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  android.arch.persistence.room.RoomDatabase  a(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Integer  getSource()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onStopTrackingTouch(android.widget.SeekBar)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  I()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$0:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  c(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  onScaleEnd(android.view.ScaleGestureDetector)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  b()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  a(java.lang.String)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  d()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  android.preference.ListPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  b(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.play.mini.PlayFragment  e()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  k()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  l(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  y()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  G()
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  com.SearingMedia.parrotlibrary.models.DeviceInformationModel  getDeviceInformationModel()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getModel()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  l()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  a(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isLollipopOrLater()
com.SearingMedia.Parrot.features.init.InitController:  boolean  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  C()
com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,long,int)	com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,java.lang.String)
com.SearingMedia.parrotlibrary.requests.ParrotWearRequestHelper:  void  <clinit>()	com.SearingMedia.parrotlibrary.requests.ParrotGson:  com.google.gson.Gson  getGsonInstance()
com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a(java.lang.String[])	com.SearingMedia.Parrot.utilities.ArrayUtility:  boolean  a(java.lang.Object[])
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  java.lang.String  F()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$3:  boolean  onPreferenceClick(android.preference.Preference)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  a(android.preference.Preference)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$seekBarChangeListener$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.TestingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  onCardClicked()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$Listener  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter)
com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	com.SearingMedia.Parrot.features.record.CustomGainCalculator:  void  <init>(java.lang.String[],java.lang.String[])
com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToDropboxToggled(boolean)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  c(boolean)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  B()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$9:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  P()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  v()	com.SearingMedia.Parrot.ParrotApplication:  android.os.Handler  e()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.CircularProgressView  s()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String,long)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.design.widget.NavigationView)
com.SearingMedia.Parrot.views.components.TimerInputView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.TimerInputView:  void  b()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  d(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallowOrLater()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()	com.SearingMedia.Parrot.exceptions.RecordingException:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  W()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  onDestroy()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  k(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(long,long)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setTimeText(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a_(boolean)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$2:  void  run()	com.SearingMedia.Parrot.features.backup.BackupService:  void  b(boolean,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  A()
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getModel()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.SearingMedia.Parrot.features.play.mini.PlayPresenter  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()	com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$resetSeekBar$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.SeekBar  getSeekBar()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter  m()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$7:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.BassBoostEvent)	com.SearingMedia.Parrot.models.events.BassBoostEvent:  int  a()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b(java.io.File,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  r()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  onBackPressed()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.utilities.TransitionsUtility:  android.support.v4.app.ActivityOptionsCompat  a(android.app.Activity,android.support.v4.util.Pair[])
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  p()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$9:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onEightClicked()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayNewTrackEvent)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  i()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  f()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(float)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  l(long)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  N()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.view.View,android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  ad()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  c()
com.SearingMedia.Parrot.features.main.MainActivity:  void  p()	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  i()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  o()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  e(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(long,long)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  f()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(android.widget.LinearLayout)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  e()
com.SearingMedia.Parrot.features.save.SavePresenter:  boolean  t()	com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  u()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  A()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.controllers.RateAppController:  void  a()	com.SearingMedia.Parrot.controllers.RateAppController:  boolean  i()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  h()
com.SearingMedia.Parrot.features.backup.BackupService:  void  e(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,boolean,int)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter  m()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  <init>()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$3:  void  onResult(com.google.android.gms.common.api.Result)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  s()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  long  h()
com.SearingMedia.Parrot.services.MaintenanceService:  void  e()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.utilities.TransitionsUtility:  void  a(android.app.Activity)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  onDestroy()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  z()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  o()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  f(int)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  onBackPressed()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.controllers.InstallTimingController:  boolean  a(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  aj()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  s()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setTitle(java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  aq()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  c(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  e(long)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onHelpClicked()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.featurepager.transformers.ViewPageTransformer$1:  void  <clinit>()	com.SearingMedia.featurepager.transformers.TransformerType:  com.SearingMedia.featurepager.transformers.TransformerType[]  values()
com.SearingMedia.Parrot.controllers.di.EventBusController:  void  a(java.lang.Object)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.controllers.ShareController:  void  k()	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.features.record.PauseButton:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.PauseButton:  void  c()
com.SearingMedia.Parrot.controllers.TestingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  c()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  x()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  P()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b(java.lang.String)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  g()	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  setLinesArray(float[])
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  android.preference.SwitchPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  h(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,long)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  f()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  O()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.features.backup.BackupService:  void  <init>()	com.SearingMedia.Parrot.features.backup.BackupService$BackupServiceBinder:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.models.ScreenshotModel:  java.lang.String  c()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  onBackPressed()	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  java.lang.String  i(int)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Exception,java.lang.Object,com.bumptech.glide.request.target.Target,boolean)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Exception,java.lang.String,com.bumptech.glide.request.target.Target,boolean)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  com.SearingMedia.Parrot.controllers.encoders.AudioEncoder  a(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1$1:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMainFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  boolean  A()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.features.save.SavePresenter:  android.support.v7.app.AppCompatActivity  w()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  onEventBackgroundThread(com.SearingMedia.Parrot.models.events.RecordingActionEvent)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.RowModel:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	io.reactivex.Flowable:  io.reactivex.Flowable  b(io.reactivex.Scheduler)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  testButtonClicked()	com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  com.SearingMedia.parrotlibrary.models.RecordedPhoneCall  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v7.app.AppCompatActivity  p()	com.SearingMedia.Parrot.features.main.MainActivity:  android.support.v7.app.AppCompatActivity  r()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  g(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  b()	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  onFourClicked()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  android.os.Handler  l()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onLifetimeClicked()
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  f(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  l()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  J()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  b()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  d(java.util.List)
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.views.components.TimerInputView:  void  a()	com.SearingMedia.Parrot.views.components.TimerInputView:  void  c()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  c(int)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  java.lang.String  i(int)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,int)	com.SearingMedia.Parrot.models.events.PhoneCallEndedEvent:  void  <init>()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  J()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$2:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$2:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onAllFilesClicked()
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  b()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  c(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$Companion:  void  <init>()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  i(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  O()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  ab()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  c()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$2:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  h()
com.SearingMedia.Parrot.features.backup.BackupPresenter$2:  void  run()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ae()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  f(int)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  d()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getBitRate()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  e()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  a(com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  F()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  <init>(boolean,boolean)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onZipClicked()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  w()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.v4.widget.DrawerLayout  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a(java.lang.String[])
com.SearingMedia.Parrot.features.main.MainPresenter:  void  h()	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel  b(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  f(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.ArrayList  b(android.content.Context)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  d()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  e()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  e()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,long)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  g()	com.SearingMedia.Parrot.exceptions.RecordingException:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter,com.SearingMedia.Parrot.models.ParrotFileList,com.SearingMedia.Parrot.models.events.TrackListChangedEvent)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()	com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  java.io.File  b()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  d(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionGrantedEvent)	com.SearingMedia.Parrot.models.events.PermissionGrantedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  c_()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.models.ScreenshotModel:  int  a()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  <init>(java.lang.String,int)	com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onLifetimeClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  d()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$1:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.animation.AnimatorSet  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  g()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideWaveTouchingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  c()
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String,long)
com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.record.RecordFragment  d()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  n()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  c()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BottomBarButton  i(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$1:  void  onCancelled(com.google.firebase.database.DatabaseError)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayNewTrackEvent)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.models.ParrotFileList:  boolean  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFileList:  int  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  l(float)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  c()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayNewTrackEvent)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  p(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  c(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  e(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList,int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onSaveInstanceState(android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.services.AudioProcessingService$prepareProgressListener$1:  boolean  a(double)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService,double)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  c()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  E()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  j(android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.controllers.ShareController:  void  a(android.content.pm.ActivityInfo,android.content.Intent)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()	com.SearingMedia.Parrot.services.AudioRecordService$AudioRecordBinder:  void  <init>(com.SearingMedia.Parrot.services.AudioRecordService)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2$1:  void  <init>(int,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.events.TrackListChangedEvent  b(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  at()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  b(java.lang.String,boolean)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  c(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecordingId()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  <init>()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$2:  boolean  onTouch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar1Touch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  a(int,android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  q()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  onDestroy()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.AnimatorSet)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  b(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  b(int)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  f()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.ScreenshotModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)	com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(android.support.v7.widget.Toolbar)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  f(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$9:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  void  <clinit>()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  void  <init>()
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  rx.Observer  c()
com.SearingMedia.Parrot.models.ParrotFile:  long  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  long  w()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment  n()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  i(long)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  i()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  G()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  setBackupCardListener(com.SearingMedia.Parrot.features.backup.CloudBackupCardView$BackupCardListener)
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  onDestroy()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a()	com.SearingMedia.Parrot.features.backup.cloud.CloudController:  void  f()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  c(java.lang.String)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$1:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.RatingView:  void  onStar1Click()
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver$$Lambda$0:  void  run()	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  a(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  r()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(boolean)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent)	com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent:  float  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  p()	com.SearingMedia.Parrot.exceptions.RecordingException:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  M()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  ab()
com.SearingMedia.Parrot.models.ParrotFile:  void  d(long)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.CircularProgressView  s()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  p()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  q()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  i()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()	com.SearingMedia.Parrot.controllers.SaveTrackController:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  r()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  m()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  <clinit>()	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.Object)	com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  e()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  a(android.view.MotionEvent)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  b(int,android.view.MotionEvent)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  d(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  k()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.utilities.RepairUtility$$Lambda$1:  void  run()	com.SearingMedia.Parrot.utilities.RepairUtility:  void  e(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.ImageView[])	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRepairClick()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  android.os.Handler  t()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.os.Handler  C()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$4:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  p()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  G()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity,android.view.View)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity)
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String)	com.SearingMedia.Parrot.models.RowModel:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  l(float)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  b()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  f()
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  aa()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  c()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  b(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ad()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  e()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  a(android.widget.SeekBar,int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter  m()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showTopMenu$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileSuccessToast$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  b(long)	com.SearingMedia.parrotlibrary.models.TimeModel:  void  setTimeElapsed(long)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  b(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordView)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  k()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  isBluetoothPreferred(boolean)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.util.List)
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  H()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setShouldShowStaticWave(boolean)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  c(int)	com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  b(int)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$1:  void  run()	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.play.full.CircularProgressView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onDestroyView()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$seekBarChangeListener$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCheckChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  q()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  java.lang.String  b(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel  a(java.lang.Class)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  c(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  void  <init>(int)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$1:  void  <clinit>()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$1:  void  <init>()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.controllers.RateAppController:  void  g()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  aj()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  u()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)	com.SearingMedia.Parrot.models.events.TrackListChangedEvent:  java.util.List  b()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.ParrotApplication:  android.os.Handler  e()
com.SearingMedia.Parrot.models.AnalyticsEventModel:  void  <init>(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.AnalyticsEventModel:  void  <init>(java.lang.String,java.lang.String,java.lang.String,double)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  D()
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  java.lang.Object  doInBackground(java.lang.Object[])	com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  java.lang.Void  a(java.lang.Void[])
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  java.lang.String  a(int)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.SearingMedia.Parrot.features.settings.EmptyPresenter  m()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  void  <init>()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  p()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter  m()	com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  void  <init>()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$6:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  d(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(int,java.lang.String[],int[])
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOff$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getRepeatButton()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  G()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  a()	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  e()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  t()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  J()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  y()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  f(float)
com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  s()
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.models.ScreenshotModel:  java.lang.String  b()
com.SearingMedia.Parrot.utilities.RepairUtility:  java.lang.String  a(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  a()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)	io.reactivex.Flowable:  io.reactivex.Flowable  b(io.reactivex.Scheduler)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Long  getRecordingId()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(com.SearingMedia.Parrot.controllers.recording.ChronometerController$Listener)
com.SearingMedia.Parrot.features.main.MainActivity:  void  n()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$3:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)
com.SearingMedia.Parrot.services.MaintenanceService:  void  d()	com.SearingMedia.Parrot.services.MaintenanceService:  void  e()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  i()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  j()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(long)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  p()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  b(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  k()	com.SearingMedia.Parrot.features.init.InitController:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  C()
com.SearingMedia.Parrot.receivers.WidgetReceiver:  android.app.PendingIntent  a(android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  android.app.PendingIntent  a(android.content.Context,int,android.content.Intent,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onNextTrackClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  onItemSelected(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  l(int)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ad()
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)	com.SearingMedia.Parrot.models.RowModel:  java.lang.String  c()
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  <init>()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  f()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  u()
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment,android.view.View)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding,com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.parrotlibrary.models.OnDemandRecording,android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onResume()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$0:  void  onClick(android.view.View)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(android.view.View)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  d()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ac()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  e()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  c(com.SearingMedia.Parrot.views.components.QuickSettingsTile)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  c()	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$3:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  h()
com.SearingMedia.Parrot.features.record.CustomGainCalculator:  java.lang.String  a(double)	com.SearingMedia.Parrot.features.record.CustomGainCalculator:  java.lang.String  b(int)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  B()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  h(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$11:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  com.SearingMedia.Parrot.models.ParrotFileList  a()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  c()
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  a()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$State:  void  <clinit>()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$State:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  f()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  H()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isLollipopOrLater()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  format(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  setSubtitle(java.lang.String)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet,android.view.View)	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet)
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.controllers.FirebaseController:  java.util.concurrent.ScheduledFuture  a(java.util.concurrent.atomic.AtomicBoolean,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  c(float)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  a(int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  d(int)
com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.share.list.ShareFragment  f()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.models.ParrotFile$1:  com.SearingMedia.Parrot.models.ParrotFile  a(android.os.Parcel)	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  h()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  e()
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  long  getTimeInMillis()	com.SearingMedia.Parrot.views.components.TimerInputView:  long  getTimeInMillis()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  b(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,int)
com.SearingMedia.Parrot.features.record.PauseButton:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.record.RecordButton:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  a()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  b()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  j()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  f()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(android.os.Bundle)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setLockPage(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.ErrorPlayingFileEvent)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.models.ParrotFile  e()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  <init>()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)	io.reactivex.Flowable:  io.reactivex.disposables.Disposable  a(io.reactivex.functions.Consumer)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.services.AudioRecordService  f(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.controllers.ShareController:  void  <init>(java.lang.String,int)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showFastForwardButton$1:  void  run()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.ImageView  getNextButton()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onResume()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()	com.SearingMedia.Parrot.ParrotApplication:  void  b()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  l()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  d(long)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  c(java.lang.String)
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String)	com.SearingMedia.Parrot.models.RowModel:  void  a(int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  u()	com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  setValue(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  <clinit>()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(int[])	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  n()
com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController  d()	com.SearingMedia.Parrot.ParrotApplication:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  java.lang.Object  a()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b()
com.SearingMedia.Parrot.features.record.RecordFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  x()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String,long)	com.SearingMedia.Parrot.models.AnalyticsEventModel:  void  <init>(java.lang.String,java.lang.String,java.lang.String,double)
com.SearingMedia.Parrot.controllers.FeedbackController:  void  e(android.content.Context)	com.SearingMedia.Parrot.controllers.WebViewController:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.utilities.TransitionsUtility:  void  a(android.app.Activity)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  G()
com.SearingMedia.Parrot.models.databases.ParrotDatabase:  void  <clinit>()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording[]  newArray(int)
com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,long,int)	com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,short)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.RatingView:  void  onStar2Click()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  java.lang.String  b(int,android.content.Context)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  <init>()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  p()
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  a()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  O()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onEvent(com.SearingMedia.parrotlibrary.models.RecordingCommandModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(android.content.Intent)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$3:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setBitRate(java.lang.String)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  p()	com.SearingMedia.Parrot.features.save.SaveActivity$1:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity)
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  e()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  d(int)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$6:  void  onGlobalLayout()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ac()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  c(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  k()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  m()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  n()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveTouchingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileSuccessToast$1:  void  run()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,com.SearingMedia.Parrot.features.base.BaseActivity)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  J()	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  java.lang.CharSequence  h(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  e(java.lang.String)
com.SearingMedia.Parrot.views.lists.KeyValueAdapter:  long  getItemId(int)	com.SearingMedia.Parrot.views.lists.KeyValueAdapter:  java.lang.Object  getItem(int)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  e()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(long)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(float)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  t()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  h(java.lang.String)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  g()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  s()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  c()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  d(int)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  d(long)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.TimedRecording)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  V()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  s(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  void  a(android.view.View)	com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  boolean  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$9:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  deleteButtonClicked()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)	com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  a(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(double)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setBitRate(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  java.io.File  a(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment,com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$3:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$13:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  L()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$8:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  settingsClicked()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  d()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$3:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  f()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  e()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  void  b()
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BigRecordButton  a(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  void  <init>(boolean)	com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  void  a(boolean)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PhoneCallEndedEvent)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(android.content.Intent)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  L()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  d(java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  removeDividers(android.widget.ListView)
com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  <init>()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  f(long)
com.SearingMedia.Parrot.features.main.MainActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$5:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  f()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(boolean)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  b(int)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(android.view.View)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAppVersion(android.content.Context)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(float)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  B()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$12:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  M()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	io.reactivex.Flowable:  io.reactivex.Flowable  a(io.reactivex.Scheduler)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.ParrotFile  R()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  java.util.List  Q()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onBuildHeaders(java.util.List)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(java.util.List)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context,android.app.PendingIntent)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.Parrot.controllers.FeedbackController:  void  c(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  k()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ac()
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  b()
com.SearingMedia.Parrot.controllers.RateAppController:  void  m()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  am()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  d()	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  b(java.lang.String,java.lang.String,android.app.Activity)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(java.lang.String,java.lang.String,android.app.Activity)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter  m()
com.SearingMedia.Parrot.thirdparty.utils.Option$None:  void  <init>()	com.SearingMedia.Parrot.thirdparty.utils.Option:  void  <init>()
com.SearingMedia.parrotlibrary.requests.ParrotWearResponseHelper:  void  <clinit>()	com.SearingMedia.parrotlibrary.requests.ParrotGson:  com.google.gson.Gson  getGsonInstance()
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openBitRateSettingsDialog()
com.SearingMedia.Parrot.controllers.ShareController:  void  <init>(java.lang.String,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallUtility:  void  a()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a()	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  boolean  d()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  c()	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getSampleRate()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  g()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,int,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(boolean)	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  K()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  w()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  b(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.text.SimpleDateFormat,int)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  a(com.SearingMedia.Parrot.models.databases.TrackDuration[])
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c(android.preference.Preference)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  android.graphics.Paint  c(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getStartOffsetWithZoom()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$4:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.util.List)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  j()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  d()
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  java.lang.Object[]  newArray(int)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  com.SearingMedia.parrotlibrary.models.RecordedPhoneCall[]  newArray(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.models.FeatureModel:  void  c(int)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int,java.lang.String[],int[])
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent)	com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent:  float  a()
com.SearingMedia.Parrot.views.DurationPicker:  java.lang.String  getFormattedDuration()	com.SearingMedia.Parrot.views.DurationPicker:  int  getMinutesValue()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(rx.functions.Action1,rx.Subscription)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Integer  getColor()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  e()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$initializeButtons$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.util.List)
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,int)	com.SearingMedia.Parrot.models.RowModel:  void  b(int)
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController$Result:  void  <clinit>()	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController$Result:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  java.lang.String  G()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(java.lang.String,java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  n()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$ScreenshotPagerAdapter:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity,android.support.v4.app.FragmentManager,java.util.ArrayList)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  o()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  g(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  h(java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  i()
com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  <init>(com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  long  C()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  void  b(android.content.Context)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  onDestroy()	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  q()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  boolean  j()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ax()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  a(java.lang.String,int)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  long  e()	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  k()
com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  a()	com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  b()
com.SearingMedia.Parrot.services.AudioRecordService:  void  b(android.content.Context,com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  v()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  c()
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  int  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ac()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setDayPadding(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  void  <init>(int)	com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  void  a(int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  onButton1Clicked()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String,long)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,java.lang.String,java.lang.String,java.lang.String,long)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  z()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$6:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  z()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  q()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDuration:  java.lang.String  a()
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding,com.SearingMedia.Parrot.features.save.SaveActivity)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel,boolean)	com.SearingMedia.Parrot.features.record.PauseButton:  void  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  onDestroy()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(float,float)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  void  <init>(int)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(java.lang.String,java.lang.String,int)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$5:  void  onResult(com.google.android.gms.common.api.Result)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(int,com.google.android.gms.drive.DriveFolder$DriveFileResult)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  onButton1Clicked()	com.SearingMedia.Parrot.controllers.WebViewController:  void  a(java.lang.String,int,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$10:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar2Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  setSubtitle(java.lang.String)
com.SearingMedia.Parrot.controllers.ShareController:  void  g()	com.SearingMedia.Parrot.controllers.ShareController:  android.content.Intent  a(java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  t()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  K()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ax()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  doneButtonClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  int  b(boolean)	com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile,java.lang.String,int,int,java.lang.String[],java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  e()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  l()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  x()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackProgress$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView  u()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  b(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  P()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(boolean)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  a(java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  f(int)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onResume()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onResume()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$4:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  v()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  c(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.text.SimpleDateFormat,int)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onCloseClicked()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onBackPressed()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  com.SearingMedia.Parrot.controllers.permissions.PermissionsController  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingMainFragment:  void  <init>()	com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment:  void  <init>()
com.SearingMedia.parrotlibrary.models.PendingRecording$1:  com.SearingMedia.parrotlibrary.models.PendingRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <init>(android.os.Parcel)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(int,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.text.SimpleDateFormat,int)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  register(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileProgress)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  boolean  a(double)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$7:  void  <clinit>()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$7:  void  <init>()
com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  com.SearingMedia.Parrot.features.base.InformationDialogFragment$InformationDialogListener  a(com.SearingMedia.Parrot.features.base.InformationDialogFragment)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  <init>(android.app.Activity)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  b(float)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  c()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  boolean  b()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar2Click()	com.SearingMedia.Parrot.views.components.RatingView:  void  f()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  b()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  int  a(com.SearingMedia.Parrot.features.play.mini.PlayFragment,int)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,java.lang.String[],int[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(int,java.lang.String[],int[])
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  onDestroy()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.ProgressBar  t()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Z()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)	com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  b(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  a()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()
com.SearingMedia.Parrot.receivers.BootReceiver:  void  a(android.content.Context)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a(long)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  f()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  b(int)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.ParrotApplication$$Lambda$0:  void  <clinit>()	com.SearingMedia.Parrot.ParrotApplication$$Lambda$0:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSource(java.lang.Integer)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$2:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  g()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  g()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  F()
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$2:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$Listener  a(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment)
com.SearingMedia.Parrot.features.record.RecordAnimationController$3:  void  a(android.animation.Animator)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  e()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  a(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(android.content.Intent)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  io.reactivex.Maybe  d(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  o()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  c(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$4:  void  <clinit>()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$4:  void  <init>()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$AudioRecorderDispatcherListener  g(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(java.util.List,java.lang.String)	com.SearingMedia.Parrot.models.ShareGroupModel:  void  <init>()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDetailsClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  h()
com.SearingMedia.Parrot.features.main.MainActivity:  void  o()	com.SearingMedia.Parrot.features.main.MainActivity:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  aw()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  g()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  int  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.services.AudioRecordService  a(com.SearingMedia.Parrot.features.record.RecordPresenter,com.SearingMedia.Parrot.services.AudioRecordService)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener,android.app.Activity)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  f()	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  b()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  n()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  void  <init>()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$9:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ah()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8$1:  void  run()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  g(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter  m()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()	com.SearingMedia.Parrot.thirdparty.widget.TextWatcherAdapter:  void  <init>(android.widget.EditText,com.SearingMedia.Parrot.thirdparty.widget.TextWatcherAdapter$TextWatcherListener)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  boolean  access$500(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.NumberPadView:  void  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  rx.Subscription  a(rx.functions.Action1)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  j()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  e(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  g(java.lang.String)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.WaveSurfaceController  i(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(long)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  k()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  java.util.List  d(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl)
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a()
com.SearingMedia.Parrot.services.AudioRecordService:  void  d(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  boolean  c()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  b(boolean)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.controllers.ShareController:  void  <clinit>()	com.SearingMedia.Parrot.controllers.ShareController:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$14:  void  run()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  K()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  w()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  X()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$6:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  colorClicked()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  d()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  a(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$4:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  l()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a()
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  a()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  b()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isExpired()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.MediaPlayerUtils:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  a(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$2:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  source(int)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  onCompletion(android.media.MediaPlayer)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  a(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)	com.SearingMedia.Parrot.utilities.ListUtility:  boolean  a(java.util.List)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setColor(java.lang.Integer)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  a()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  java.util.ArrayList  a(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  java.lang.String  b(int,android.content.Context)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecondsToHumanReadable(long)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  c()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupView)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Z()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  t()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  O()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  i()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  f(float)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  d()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$4:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackupClick()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsView)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.models.events.UpdateRecordingSettingsEvent:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  c()
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  d()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int,int)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  g(com.SearingMedia.Parrot.models.ParrotFileList)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  a()
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a()
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.RateAppController:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  e()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isKitKat()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyView)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  d()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  android.widget.TextView  z()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)
com.SearingMedia.Parrot.features.main.MainActivity:  void  o()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$OnTabSelectedListener  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.RateAppController:  void  f()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String,long)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$3:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ac()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.ImageView[])
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  java.io.File  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  y()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  h()	com.SearingMedia.Parrot.features.init.InitController:  void  a(com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)	com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.main.TabsPagerAdapter  o()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  d()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  boolean  q()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <init>()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$2:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  j(int)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ac()	com.SearingMedia.Parrot.features.record.RecordPresenter:  android.app.Activity  q()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()	com.SearingMedia.Parrot.services.MediaPlayerService$MediaPlayerBinder:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(float)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  B()
com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  <init>(java.lang.String,int)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,com.SearingMedia.Parrot.models.AnalyticsEventModel)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  p()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  d()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  o()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  o()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  java.lang.String  b(int,android.content.Context)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter  m()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController  a()
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,int)	com.SearingMedia.Parrot.models.RowModel:  void  a(java.lang.String)
com.SearingMedia.Parrot.ParrotApplication:  void  j()	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  <init>()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  name(java.lang.String)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  a(boolean)	com.SearingMedia.Parrot.utilities.ResourceUtility:  float  a(android.content.Context,int)
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter$RowModelViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.widget.TextView)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  h()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  durationClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  e()
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)
com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.backup.BackupPresenter  m()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  <init>()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  c()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int)
com.SearingMedia.Parrot.features.save.SavePresenter:  android.content.Context  x()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding,com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  f()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener$$Lambda$0:  void  run()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(int,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  w()	com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  a(android.app.Activity)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  <init>(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$Listener,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$8:  void  <clinit>()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$8:  void  <init>()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  j()
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setScrollDurationFactor(double)	com.SearingMedia.featurepager.scrollers.CustomDurationScroller:  void  a(double)
com.SearingMedia.Parrot.receivers.BootReceiver:  void  onReceive(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.receivers.BootReceiver$$Lambda$0:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.record.TickerBarLayout:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.TickerBarLayout:  void  a()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(long)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  b()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  f()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  c()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.FirebaseController:  java.util.concurrent.ScheduledFuture  a(java.util.concurrent.atomic.AtomicBoolean,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isEarlierThanMarshmallow()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  b()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState)
com.SearingMedia.Parrot.controllers.ShareController:  void  f()	com.SearingMedia.Parrot.utilities.ShareUtility:  java.util.ArrayList  a(android.content.Intent,android.content.Context)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  z()	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  <init>()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,java.lang.String,boolean,android.content.Context)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  A()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  D()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  b(boolean)	com.SearingMedia.Parrot.features.record.BigRecordButton:  int  getReadyToRecordMicColor()
com.SearingMedia.featurepager.activities.FeaturePagerActivity:  void  <init>()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  <init>()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  io.reactivex.Flowable  a(long)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomSQLiteQuery)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getFormat()
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  void  h(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideWaveTouchingState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.waveform.WaveformView  q()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  F()	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  d()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onResume()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setAmplitudes(int[])
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(long,long)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long,long)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$3:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.views.components.SimpleListRowView:  void  setSubtitle(java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  com.SearingMedia.Parrot.controllers.recording.ChronometerController  a()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording,android.app.Activity)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  com.SearingMedia.Parrot.features.save.SavePresenter  m()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  <init>()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  A()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  c(double)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(long,long)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  b(int)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$1:  void  run()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  com.SearingMedia.Parrot.models.ParrotFile  a(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$5:  java.lang.Object  call()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  o()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.base.BaseActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.controllers.theme.ThemeController:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  d()	com.SearingMedia.Parrot.utilities.DisplayUtilty:  int  c(android.content.Context)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPausePlayClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$9:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.String  getName()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.models.UpgradeFeatureModel:  void  <init>()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  java.lang.String  a(int)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  android.app.Activity  g()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  Z()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  b(boolean)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a(boolean,android.graphics.drawable.Drawable,int,android.graphics.drawable.Drawable)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(java.lang.String)	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,java.lang.String,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  <init>()	com.SearingMedia.featurepager.activities.FeaturePagerActivity:  void  <init>()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.views.components.RatingView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.RatingView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  d(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformDelegate)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupTask:  com.SearingMedia.Parrot.models.ParrotFileList  b()
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.ImageView  a(com.SearingMedia.Parrot.features.settings.SettingsActivity,android.widget.ListView,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.ImageView  d(android.widget.ListView,int)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$2:  void  <clinit>()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$2:  void  <init>()
com.SearingMedia.Parrot.receivers.EventReceiver$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.receivers.EventReceiver$Companion:  void  <init>()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(int)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(long)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$3:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  android.app.Activity  a(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListView)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  j()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  f()
com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  com.SearingMedia.parrotlibrary.models.ChangeLogModel  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  d()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  j(float)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.util.List)	com.SearingMedia.Parrot.models.ParrotFileList:  com.SearingMedia.Parrot.models.ParrotFileList  a(java.util.List)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(com.google.android.exoplayer2.ExoPlaybackException)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  d()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$3:  void  run()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  e(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupService:  void  c(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onActivityCreated(android.os.Bundle)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  float  getDensity(android.content.Context)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$2:  void  run()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController,java.io.File)
com.SearingMedia.Parrot.controllers.ShareController:  void  j()	com.SearingMedia.Parrot.controllers.ShareController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.ShareController)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>(java.lang.String,java.lang.String)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.util.Date  getDate()
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(int,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile  c()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  b(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  c(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneView(android.view.View)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSampleRate(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter$2:  void  run()	com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.base.BaseActivity  A()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(float,float)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setProgress(int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onDestroy()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  c(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  h()
com.SearingMedia.Parrot.receivers.BootReceiver:  void  onReceive(android.content.Context,android.content.Intent)	io.reactivex.schedulers.Schedulers:  io.reactivex.Scheduler  b()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  l(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  void  v()	com.SearingMedia.Parrot.models.ParrotFile:  long  r()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  org.json.JSONObject  h()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  org.json.JSONObject  i(java.lang.String)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.services.MediaPlayerService)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  q()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  t()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ac()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onActivityResult(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onActivityResult(int,int,android.content.Intent)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$3:  boolean  onTouch(android.view.View,android.view.MotionEvent)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  e(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  boolean  i()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  a(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setSampleRate(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int)	com.SearingMedia.Parrot.models.RecordingConstants:  int  a(int)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.PermissionDeniedEvent)	com.SearingMedia.Parrot.models.events.PermissionDeniedEvent:  java.lang.String  a()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()	com.SearingMedia.Parrot.ParrotApplication:  int  f()
com.SearingMedia.Parrot.controllers.FeedbackController:  void  c(android.content.Context)	com.SearingMedia.Parrot.controllers.WebViewController:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.services.AudioProcessingService$prepareProgressListener$1:  boolean  a(double)	com.SearingMedia.Parrot.services.AudioProcessingService:  android.content.Intent  a(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)
com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment:  com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment  a(com.SearingMedia.Parrot.models.FeatureModel)	com.SearingMedia.Parrot.features.onboarding.OnboardingFeatureFragment:  void  <init>()
com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  <clinit>()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.utilities.DisplayUtilty:  boolean  b(android.content.Context)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  d(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(java.util.List,java.lang.String)
com.SearingMedia.Parrot.utilities.BatteryUtility:  boolean  a()	com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  boolean  a()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  r()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  d()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  onDestroyView()	com.SearingMedia.Parrot.utilities.HandlerUtility:  void  a(android.os.Handler)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  b(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onFileTypeTextViewClicked()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  j()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(android.content.Intent)	com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  s()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  isTimeSet()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  J()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  d(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  d()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleViews(android.view.View[])
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  b(java.io.File)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(java.io.File)
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  <init>()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  <init>()
com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$0:  void  <clinit>()	com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$0:  void  <init>()
com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <clinit>()	com.SearingMedia.parrotlibrary.models.PendingRecording$1:  void  <init>()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(com.SearingMedia.Parrot.features.save.SaveView)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  g()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel  b(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(java.lang.String,org.json.JSONObject)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  n()	com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  b(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  goneViews(android.view.View[])
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  J()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.support.v4.app.FragmentActivity  C()
com.SearingMedia.Parrot.controllers.ShareController:  void  e()	com.SearingMedia.Parrot.controllers.ShareController:  android.content.Intent  b(java.lang.String)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ai()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  k()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$5:  void  doClick(android.view.View)	com.SearingMedia.Parrot.views.components.RatingView:  void  onStar3Click()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  settingsClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  i()
com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  boolean  a()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  c(long)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  v()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  y()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  b()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  d(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b()
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  x()
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  o()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  o()	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,boolean,int)	com.SearingMedia.Parrot.models.events.BackupFinishedEvent:  void  <init>(java.lang.String,boolean,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$6:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$0:  void  run()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(java.lang.String,boolean)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  a()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  p()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  c()	com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  setValue(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.features.record.RecordFragment$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onDestroy()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupService:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  a(boolean)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a(boolean,android.graphics.drawable.Drawable,int,android.graphics.drawable.Drawable)
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)
com.SearingMedia.Parrot.controllers.WebViewController:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordButton:  void  onDestroy()	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.animation.AnimatorSet)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  b(android.view.View)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  boolean  a()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder,com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.theme.LightThemeController:  int  a(android.content.Context)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  f(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  g()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  O()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.settings.SingleSettingActivity,android.view.View)	com.SearingMedia.Parrot.features.base.BaseActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.base.BaseActivity,android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2:  void  onClick(android.view.View)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackProgress$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long)
com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  m()
com.SearingMedia.Parrot.features.record.MiddleLayout:  void  <init>(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.features.record.MiddleLayout:  void  a()
com.SearingMedia.Parrot.models.events.TrackDeletedEvent:  void  <init>(java.lang.String)	com.SearingMedia.Parrot.models.events.TrackDeletedEvent:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()	com.SearingMedia.Parrot.features.record.RecordingViewModel:  void  a(float)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.utilities.ExecutorUtils:  void  a(java.util.concurrent.ExecutorService)
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BottomBarButton  h(com.SearingMedia.Parrot.features.record.RecordAnimationController)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  b()	com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  unregister(java.lang.Object)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper,long,java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  p()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  c()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordingViewModel:  float  e()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(com.SearingMedia.Parrot.features.share.details.ShareActivityView)
com.SearingMedia.Parrot.utilities.PiracyUtility:  java.lang.String  e()	com.SearingMedia.Parrot.ParrotApplication:  com.SearingMedia.Parrot.ParrotApplication  a()
com.SearingMedia.Parrot.models.ShareObject:  void  <init>(android.content.pm.ActivityInfo,android.content.pm.PackageManager)	com.SearingMedia.Parrot.models.ShareObject:  void  a(android.content.pm.ActivityInfo)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  a(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)
com.SearingMedia.Parrot.services.AudioRecordService:  void  onEventBackgroundThread(com.SearingMedia.Parrot.models.events.RecordingNotificationEvent)	com.SearingMedia.Parrot.models.events.RecordingNotificationEvent:  int  a()
com.SearingMedia.parrotlibrary.models.TimedRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.TimedRecording$1:  com.SearingMedia.parrotlibrary.models.TimedRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter  m()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  java.lang.String  a(int)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  android.app.Activity  b()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  k()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  g()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	io.reactivex.Flowable:  io.reactivex.Flowable  a(io.reactivex.Scheduler)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()	com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  run()	com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  visibleView(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  g()	com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.CircularProgressView  s()
com.SearingMedia.Parrot.models.ParrotFile:  com.SearingMedia.Parrot.models.ParrotFile  b()	com.SearingMedia.Parrot.models.ParrotFile:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  s()	com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  A()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateCalendarIcon$1:  void  run()	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setDayTextSize(int)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  com.SearingMedia.parrotlibrary.models.DeviceInformationModel  getDeviceInformationModel()	com.SearingMedia.parrotlibrary.models.DeviceInformationModel:  void  setSdk(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertTimePartsToHumanReadable(int,int,int)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  <init>(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$Listener,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  f()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  q()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  g()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  b(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileError)	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  v()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  u()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  int  access$600(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  o()	com.SearingMedia.Parrot.models.events.ActionModeFinishedEvent:  void  <init>()
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  long  r()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int,int,int)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.util.Date  getUpdatedDate(java.util.Date,int,int,int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter  m()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  <init>(com.SearingMedia.Parrot.features.tracks.details.FileDelegate,com.SearingMedia.Parrot.controllers.TrackManagerController)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$ScreenshotPagerAdapter:  android.support.v4.app.Fragment  a(int)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment  a(com.SearingMedia.Parrot.models.ScreenshotModel)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment  b(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.models.FeatureModel:  int  a()
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.parrotlibrary.models.PendingRecording:  void  setName(java.lang.String)
com.SearingMedia.Parrot.ParrotApplication:  void  m()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(android.content.Context)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  b()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.models.FeatureModel:  void  b(int)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  h()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePausedState$1:  void  run()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  g()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$3:  void  doClick(android.view.View)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton3Clicked()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  l()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter  m()
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a(long)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  android.util.Pair  b(long)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(java.lang.String)	com.SearingMedia.Parrot.utilities.StringUtility:  boolean  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  F()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  float  c(int)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(java.lang.Throwable)	com.SearingMedia.Parrot.services.AudioProcessingService:  java.util.ArrayList  c(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$0:  void  a(java.lang.Object)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$OnShowListener  v(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.models.SecurePreferences:  void  <init>(android.content.Context,java.lang.String,java.lang.String,boolean)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a(android.widget.EditText,java.lang.String)	com.SearingMedia.Parrot.thirdparty.widget.TextWatcherAdapter:  void  onTextChanged(java.lang.CharSequence,int,int,int)
io.github.douglasjunior.androidSimpleTooltip.OverlayView:  void  a()	io.github.douglasjunior.androidSimpleTooltip.OverlayView:  void  dispatchDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  m()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  setPhoneNumber(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String,int)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  k()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  c()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  com.SearingMedia.parrotlibrary.models.RecordingModel  C()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.parrotlibrary.models.RecordingModel  t()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  g()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  e()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  g()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  a(com.SearingMedia.Parrot.thirdparty.utils.UnitFunction)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  n()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$4:  void  onShow(android.content.DialogInterface)
com.SearingMedia.Parrot.features.save.SaveActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  F()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.models.ParrotFile  ah()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  s()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$5:  void  onClick(android.view.View)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  d()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$1:  void  run()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  <init>(android.view.View,android.app.Activity)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  b(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  android.graphics.Paint  a(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView$1:  void  onAnimationUpdate(android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationCompat$WearableExtender  e(android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  f(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,android.content.Intent)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onYesButtonClicked()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  int  b(int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  i()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onResume()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(int)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  B()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$0:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  w()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  m()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToDayNumberHumanReadableTwoDigits(long)	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateTime$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  a()	com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  android.view.View  onCreateDialogView()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter,android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  b(android.view.ViewGroup,int)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  d(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.ParrotApplication:  void  k()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.graphics.drawable.Drawable  o(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  e()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  k()	com.SearingMedia.Parrot.services.MaintenanceService:  void  e()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  t()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  d()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  f()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  x()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.receivers.WidgetReceiverSmall,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.controllers.InstallTimingController:  boolean  b()	com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  k()	com.SearingMedia.Parrot.features.record.RecordFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(android.content.Intent)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$1:  void  onClick(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.view.View  f(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(java.util.List,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent,java.util.List,int)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  x()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  d(int)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  e()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  n()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  e(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  x()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  d(boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.full.RepeatMode,boolean)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  m(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  d()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterView)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setBitRate(java.lang.String)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  k(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(long,long)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  v()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()
com.SearingMedia.Parrot.features.record.RecordFragment$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  <init>()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  g()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  f()
com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  java.lang.String  c()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  j(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  f()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  nameClicked()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  int  d(int)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  onItemSelected(android.widget.AdapterView,android.view.View,int,long)
com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  a(android.view.View,com.SearingMedia.Parrot.models.RowModel,int)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePlayingState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  L()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  a(java.util.List)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setKeys(java.util.List)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  d()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$AudioControllerListener  d(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  run()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  d(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  b()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(android.content.ServiceConnection)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a_(boolean)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  int  b(int[])	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  g()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  r()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  b(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  v()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  F()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToGoogleDriveToggled(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  g(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$15:  void  run()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  c(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float)
com.SearingMedia.Parrot.controllers.RateAppController:  void  e()	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$2:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  boolean  k()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  g()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  b(java.lang.String,java.lang.String,android.app.Activity)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$dismissProgressView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(boolean)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  g(int)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(com.google.firebase.database.DataSnapshot)
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  a(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  y()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.graphics.PointF  r()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.graphics.PointF  l(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder,java.io.FileOutputStream)	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  java.io.FileOutputStream  H()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  f(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.models.ParrotFile:  void  d(java.io.File)	com.SearingMedia.Parrot.models.ParrotFile:  void  a(java.io.File)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$2:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  j()
com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.FragmentManager  n()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter  m()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  b(java.util.List)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  e()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDeleteClick()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  j()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  r()
com.SearingMedia.Parrot.features.record.RecordButton$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordButton)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a(boolean,android.graphics.drawable.Drawable,int,android.graphics.drawable.Drawable)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  void  a(boolean)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  l()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b(java.lang.String,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$2:  void  a(com.google.android.gms.drive.DriveApi$MetadataBufferResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$2:  void  onResult(com.google.android.gms.common.api.Result)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  g()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onResume()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  m()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  c()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  f()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(int)	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  int  a()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayGainLevelEvent)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomSQLiteQuery)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  io.reactivex.Flowable  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  d(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$2:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,com.SearingMedia.Parrot.views.DurationPicker)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPauseButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(boolean)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$8:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  t()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  P()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.controllers.ShareController:  void  f()	com.SearingMedia.Parrot.controllers.ShareController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onOpenSystemSettingsClick()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  m()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  h()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  g()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()
com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.utilities.BatteryUtility:  void  <clinit>()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  q()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$1:  void  <init>(long,android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  d()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.controllers.FeedbackController:  void  d(android.content.Context)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onHeaderClick(android.preference.PreferenceActivity$Header,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  c(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  d(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$0:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter,android.support.design.widget.TabLayout,android.support.design.widget.TabLayout)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener  a(android.support.design.widget.TabLayout)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  com.SearingMedia.parrotlibrary.models.OnDemandRecording[]  newArray(int)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding,com.SearingMedia.Parrot.views.components.TimerInputView)	com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.TimerInputView,android.view.View)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$4:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  g(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  p()	com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$13:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  ab()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,long)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.waveform.WaveformListener)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setListener(com.SearingMedia.Parrot.features.play.full.waveform.WaveformListener)
com.SearingMedia.parrotlibrary.models.TimeModel:  void  <init>(long)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  <init>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment,android.view.View)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  a(android.widget.ListView)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$1:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  v()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  int  T()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()
com.SearingMedia.Parrot.views.DurationPicker:  void  setSeconds(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  y()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  r()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileTitle$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  t()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  <init>()
com.SearingMedia.Parrot.utilities.PiracyUtility:  java.lang.String  e()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  b()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  ar()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  aj()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  F()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  r(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$4:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  g()
com.SearingMedia.Parrot.services.AudioRecordService:  void  e(android.content.Context)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  a()
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  java.lang.String  a(android.content.Intent)	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  a(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$AudioControllerListener,com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  <init>(com.SearingMedia.Parrot.ParrotApplication,com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  o()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  w()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.content.Intent  a(com.SearingMedia.Parrot.features.play.mini.PlayFragment,android.content.Intent)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  m()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  g(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getPlayDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPlayButton$1:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment,android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$8:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  i()
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController,com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  a(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  n()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  android.preference.ListPreference  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  J()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  n()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  b()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  z()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(java.util.List,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent,java.util.List,int)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  a(int,int,int)	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onOneYearClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  setName(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  android.content.Intent  n()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  <init>(com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  g(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  run()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  q()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.time.TimePickerDialog  a(com.wdullaer.materialdatetimepicker.time.TimePickerDialog$OnTimeSetListener)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  t()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressType:  com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressType[]  values()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$1:  void  <clinit>()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  T()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$3:  void  run()
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isMarshmallow()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  g()
com.SearingMedia.Parrot.utilities.TransitionsUtility:  android.support.v4.app.ActivityOptionsCompat  a(android.app.Activity,android.view.View,java.lang.String)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  J()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRepeatAllDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatAll$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  i()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  X()
com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  <init>(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.Option:  com.SearingMedia.Parrot.thirdparty.utils.Option  a(java.lang.Object)
com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileLoaded:  com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingType  b()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileLoaded)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  int  b(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  a(android.graphics.Canvas)	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(com.SearingMedia.Parrot.models.AnalyticsEventModel)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  int  getCanvasHeight()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  f()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  f()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$1:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference,java.lang.String)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  d(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  java.util.List  e(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  e(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$5:  void  onDismiss(android.content.DialogInterface)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  i()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  l()	com.SearingMedia.Parrot.features.record.RecordFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onNoButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  e()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  v()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  d()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  <init>(java.util.List)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  c()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$6:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  b()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  setUserVisibleHint(boolean)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)
com.SearingMedia.Parrot.features.main.MainActivity:  void  q()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(android.content.ServiceConnection)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onSaveInstanceState(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  m()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(int)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  B()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  m()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startTimeClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.utilities.ConnectionUtilities:  boolean  a(android.content.Context)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  b(android.content.Context)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(float)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent)
com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(android.util.ArrayMap)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$9:  void  a(java.lang.Object)
com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent,android.content.Context)	com.SearingMedia.Parrot.utilities.ServiceUtils:  void  a(android.content.Intent)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,boolean)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Intent)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  m()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a()	com.SearingMedia.Parrot.features.main.MainActivity:  void  onResume()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  n()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.SearingMedia.Parrot.controllers.upgrade.ProValidationController  b(boolean)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  i(android.app.Activity)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(android.app.Activity)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  boolean  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.io.File)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$1:  void  onClick(android.view.View)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  a(java.util.ArrayList)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(double)
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  <clinit>()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  e()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.ShareController:  void  e()	com.SearingMedia.Parrot.controllers.ShareController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$1:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  k()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.controllers.RateAppController:  void  f()	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$2:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  <init>(com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  d(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  y()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  o()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  r()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOne$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  d(boolean)
com.SearingMedia.Parrot.features.backup.BackupService:  void  c(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(com.bumptech.glide.load.resource.drawable.GlideDrawable,java.lang.String,com.bumptech.glide.request.target.Target,boolean,boolean)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Object,java.lang.Object,com.bumptech.glide.request.target.Target,boolean,boolean)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  o()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  nameClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ai()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  F()
com.SearingMedia.Parrot.controllers.TrackManagerController:  org.reactivestreams.Publisher  c(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$8:  java.lang.Object  a(java.lang.Object)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.main.MainActivity:  void  onNewIntent(android.content.Intent)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  g()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  c()
com.SearingMedia.Parrot.models.events.RecordingFinishedEvent:  java.lang.String  a()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingFinishedEvent)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  g()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onSaveInstanceState(android.os.Bundle)
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment)	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  u()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.Parrot.features.backup.BackupService:  void  f(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,boolean,int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  c(int)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  e()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  b()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateCalendarIcon$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  d(android.content.Intent)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  I()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  g()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  k()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.utilities.BatteryUtility:  void  a(android.content.Context)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  n()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  o()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  void  a(int)	com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)
com.SearingMedia.Parrot.controllers.analytics.FirebaseAnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,long)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,long)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,android.view.View)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  D()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()
com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  c(int,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()
com.SearingMedia.Parrot.views.components.TimerInputView:  void  onBackspaceClicked()	com.SearingMedia.Parrot.views.components.TimerInputView_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$10:  void  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment,int)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  b(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  a(boolean)	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  setPressed(boolean)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  d(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.DropboxController)	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  b(java.io.File)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$OnDismissListener  u(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  e()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onZipClicked(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  g()
com.SearingMedia.Parrot.utilities.AESUtility:  byte[]  a(javax.crypto.spec.SecretKeySpec,byte[],byte[])	com.SearingMedia.Parrot.utilities.AESUtility:  java.lang.String  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1  c(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  android.widget.TextView  A()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  g()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(java.lang.String)
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController,com.SearingMedia.wearexchange.WearExchangeController$1)	com.SearingMedia.wearexchange.WearExchangeController:  void  onConnected(android.os.Bundle)
com.SearingMedia.Parrot.models.ShareObject:  void  a(android.graphics.drawable.Drawable)	com.SearingMedia.Parrot.models.ShareObject:  void  <init>(android.content.pm.ActivityInfo,android.content.pm.PackageManager)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  p()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  b(java.io.File)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)
com.SearingMedia.Parrot.models.RecordingConstants:  int  d(int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  b(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$9:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  f()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onSpeedClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  e()	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity,android.view.View)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  n()	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  d(int)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  g()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  l()
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  boolean  d(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  run()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showTopMenu$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  I()
com.SearingMedia.Parrot.utilities.JSONUtility:  java.util.Map  a(org.json.JSONObject)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  k()
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,android.content.Context)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  P()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  c(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$0:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  f(android.content.Intent)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  b()	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  onScaleEnd(android.view.ScaleGestureDetector)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$1:  void  run()
com.SearingMedia.Parrot.utilities.RepairUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  void  b(java.io.File)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  a(com.SearingMedia.Parrot.features.record.WaveSurfaceView)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.WaveSurfaceView)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  h()
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  d()
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  h()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  m()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$5:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  G()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(android.view.ActionMode,android.view.Menu)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  onCreateActionMode(android.view.ActionMode,android.view.Menu)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  k()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()
io.github.douglasjunior.androidSimpleTooltip.ArrowDrawable:  void  <init>(int,int)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  l(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  Q()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$8:  void  run()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  java.lang.String  G()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  java.io.FileOutputStream  H()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  onButton1Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$$Lambda$0:  void  <init>(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  b(int)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  i()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveApi$DriveIdResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$1:  void  onResult(com.google.android.gms.common.api.Result)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  a(int)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordButton$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordButton)	com.SearingMedia.Parrot.features.record.RecordButton:  void  a(boolean,android.graphics.drawable.Drawable,int,android.graphics.drawable.Drawable)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  l()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  H()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  g()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  colorClicked()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  Q()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(int)
com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  b()
com.SearingMedia.Parrot.models.ShareObject:  android.graphics.drawable.Drawable  c()	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder,com.SearingMedia.Parrot.models.ShareGroupModel)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  a(android.preference.Preference)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$3:  boolean  onPreferenceClick(android.preference.Preference)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$5:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity,android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  q(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double  b(java.util.List)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.controllers.TestingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$Listener  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  onCardClicked()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  p()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  c(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToDropboxToggled(boolean)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$21:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  t()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  j()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  e(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsShareFragment)	com.SearingMedia.Parrot.features.settings.SettingsShareFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)
com.SearingMedia.Parrot.controllers.ShareController:  java.util.ArrayList  d()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  j()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$2:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  H()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  P()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$9:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  k()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  n()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController,java.lang.String,java.lang.String,android.app.Activity)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  c(java.lang.String,java.lang.String,android.app.Activity)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$2:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openSampleRateSettingsDialog()
com.SearingMedia.parrotlibrary.models.PendingRecording:  java.lang.Boolean  shouldShowDayLayout()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  e()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  boolean  i()	com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  s()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  d()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(int,android.content.Intent,android.app.Activity)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  x()	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,int)
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  int  f()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  e()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  f()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  boolean  i()	com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  s()
com.SearingMedia.Parrot.views.components.CustomFontTextView:  boolean  b()	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  x()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  L()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  a(java.lang.Void)	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility$$Lambda$0:  void  onSuccess(java.lang.Object)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$spinPausePlayButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  m()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  b(java.lang.String)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(android.content.Intent)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$0:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$Listener)	com.SearingMedia.Parrot.controllers.RateAppController:  void  l()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  f()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onRepeatClick()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.design.widget.NavigationView)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  c()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  W()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.services.MaintenanceService:  void  b()	com.SearingMedia.Parrot.services.MaintenanceService:  int  onRunTask(com.google.android.gms.gcm.TaskParams)
com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  a()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  boolean  f()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  c()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(boolean)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  b(boolean)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  g(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment$Listener)	com.SearingMedia.Parrot.controllers.RateAppController:  void  j()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  onDestroy()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a_(boolean)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  c(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$2:  void  onClick(android.view.View)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,int,android.content.Context)	com.SearingMedia.Parrot.features.backup.BackupService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a(android.preference.EditTextPreference,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment  a(com.SearingMedia.Parrot.models.UpgradeFeatureModel)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.Parrot.controllers.TestingController:  void  c(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BottomBarButton  g(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  c(int)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setTimeText(java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(long,long)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onConnectClicked()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(android.content.pm.ActivityInfo)
com.SearingMedia.Parrot.controllers.RateAppController:  void  b()	com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  void  onCancel(android.content.DialogInterface)
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  onRecordButtonClicked()
com.SearingMedia.Parrot.features.backup.BackupService:  void  b(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$2:  void  run()
com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  void  a(int)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  com.SearingMedia.Parrot.models.ScheduledRecordingViewModel  a(java.lang.String,java.util.Date)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  A()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$1:  void  run()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  onDestroy()	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  onDestroy()
com.SearingMedia.featurepager.activities.FeaturePagerActivity:  int  p()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  h()	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupService:  void  e(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,boolean,int)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.SearingMedia.Parrot.features.play.mini.PlayPresenter  a()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  java.lang.String  a(com.SearingMedia.Parrot.features.play.full.CircularProgressView,java.lang.String)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  onAnimationUpdate(android.animation.ValueAnimator)
com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.controllers.analytics.FabricAnalyticsController:  void  <clinit>()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$9:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  g()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  boolean  j()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  f()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.util.List)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageController,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter  m()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  <init>(java.util.ArrayList,com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.content.Context)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  setDate(java.util.Date)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String,int)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$7:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.models.events.BassBoostEvent:  int  a()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.BassBoostEvent)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  android.media.MediaFormat  a()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  l()
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setSampleRate(java.lang.String)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  v()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  I()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  D()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  g(android.content.Intent)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  w()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.support.v4.app.Fragment)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.utilities.TransitionsUtility:  android.support.v4.app.ActivityOptionsCompat  a(android.app.Activity,android.support.v4.util.Pair[])	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  b(int)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  java.lang.String  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  o()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  c()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  p()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onEightClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$9:  void  doClick(android.view.View)
com.SearingMedia.Parrot.utilities.PrimitiveUtility:  boolean  b(java.lang.CharSequence)	com.SearingMedia.Parrot.utilities.PrimitiveUtility:  boolean  a(java.lang.CharSequence)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$Listener)	com.SearingMedia.Parrot.controllers.RateAppController:  void  k()
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Long)	com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Object)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  com.SearingMedia.parrotlibrary.models.PendingRecording  a()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  java.lang.Object  call()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.features.main.MainActivity:  void  u()	com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  f()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  boolean  onTouchEvent(android.view.MotionEvent)
com.SearingMedia.Parrot.controllers.FeedbackController:  void  e(android.content.Context)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onHeaderClick(android.preference.PreferenceActivity$Header,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  android.os.Handler  t()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  C()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.util.List)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener,int,java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  onCallStateChanged(int,java.lang.String)
com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  e()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  d()
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setName(java.lang.String)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(int)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onPauseClicked()	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  k(android.app.Activity)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c(android.app.Activity)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  j()	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b()	com.SearingMedia.Parrot.controllers.recorders.helpers.AudioFocusHelper:  void  onAudioFocusChange(int)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.features.backup.cloud.CloudController,java.io.File)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  c()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$8:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.features.main.MainActivity:  void  p()
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  setRecordingPath(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String,int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  v()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.models.events.RecordingActionEvent:  int  a()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.RecordingActionEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onGrantStoragePermissionClicked()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  onClick()	com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(boolean,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  o()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  g()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  com.SearingMedia.Parrot.interfaces.AudioRecorderListener  x()	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  onConnected(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  m()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  e(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  void  a(android.widget.TextView,int)	com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  void  a(android.widget.TextView)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(android.widget.LinearLayout)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  f()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  a()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.RateAppController:  boolean  i()	com.SearingMedia.Parrot.controllers.RateAppController:  void  a()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder,com.SearingMedia.parrotlibrary.models.OnDemandRecording$1)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  build()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  h()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  c()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex,android.media.MediaFormat)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setSource(int)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  e(boolean,int)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  a()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  a()
com.SearingMedia.Parrot.services.AudioRecordService:  void  c()	com.SearingMedia.Parrot.services.AudioRecordService:  void  onTaskRemoved(android.content.Intent)
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(android.support.v4.widget.DrawerLayout)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.utilities.PrimitiveUtility:  int  a(int,int)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()
com.SearingMedia.Parrot.views.DurationPicker:  long  getDurationInMillis()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$3:  void  onResult(com.google.android.gms.common.api.Result)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  long  h()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  s()
com.SearingMedia.Parrot.models.ScreenshotModel$1:  com.SearingMedia.Parrot.models.ScreenshotModel  a(android.os.Parcel)	com.SearingMedia.Parrot.models.ScreenshotModel$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.thirdparty.utils.Option:  com.SearingMedia.Parrot.thirdparty.utils.Option  b()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  <init>()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.TextView  getEndTimeTextView()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateTime$1:  void  run()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.util.List  a(java.util.List,double,double,double)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent,java.util.List,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  d()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  r()
com.SearingMedia.Parrot.controllers.analytics.GoogleAnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController,java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  x()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  c(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  <clinit>()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  int  b(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  c()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$16:  void  run()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  b(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  v()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  java.util.List  a(android.media.AudioManager)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  void  a(boolean)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  h()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  e()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  g(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()
com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent:  void  <init>(float)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(java.lang.String,android.app.Activity,android.view.View,android.view.View,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  s()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  build()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(long)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  <init>(com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  setTitle(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.parrotlibrary.models.TimedRecording:  boolean  shouldAlwaysExecuteAction()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$000(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.ParrotApplication:  void  l()	com.SearingMedia.Parrot.ParrotApplication:  void  onCreate()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onHelpClicked()
com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.interfaces.OnShareClickListener)	com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.interfaces.OnShareClickListener)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  o()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(int)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d()
com.SearingMedia.featurepager.transformers.TransformerType:  com.SearingMedia.featurepager.transformers.TransformerType[]  values()	com.SearingMedia.featurepager.transformers.ViewPageTransformer$1:  void  <clinit>()
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  int  b()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.models.ParrotFile:  boolean  u()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.ImageView  a(com.SearingMedia.Parrot.features.settings.SettingsActivity,android.widget.ListView,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity$3:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c(android.widget.ListView,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onListItemClick(android.widget.ListView,android.view.View,int,long)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.parrotlibrary.utilities.ViewUtility:  int  getMeasuredHeight(android.view.View)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.RecordingViewModel  c()
com.SearingMedia.Parrot.models.ShareGroupModel:  java.lang.String  b()	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  a(android.widget.TextView,com.SearingMedia.Parrot.models.ShareGroupModel)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$20:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  j(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.date.DatePickerDialog  H()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  s()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  int  c(int)	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  long  f()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.views.DurationPicker:  void  setMinutes(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRewindDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRewindButton$1:  void  run()
com.SearingMedia.parrotlibrary.models.TimedRecording:  boolean  isBluetoothPreferred()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  c(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  c()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.main.MainActivity:  void  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.MainActivity$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  h(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$10:  void  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  c()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  <init>(android.app.Activity)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  boolean  c()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  c()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  setLinesArray(float[])	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  g()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  g(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$10:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.save.SavePresenter:  android.content.Intent  s()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  o()
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupService$BackupServiceBinder:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService)	com.SearingMedia.Parrot.features.backup.BackupService:  void  <init>()
com.SearingMedia.Parrot.features.base.InformationDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.base.InformationDialogFragment$InformationDialogListener)	com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment$DeleteDialogListener,java.util.List)
com.SearingMedia.featurepager.viewpager.FeaturePagerAdapter:  void  <init>(android.support.v4.app.FragmentManager,java.util.List)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  o()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(java.lang.String,android.os.Bundle)	com.SearingMedia.Parrot.services.MediaPlayerService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  int  f(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$6:  void  onClick(android.content.DialogInterface,int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  N()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$11:  void  run()
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,java.util.List)	com.SearingMedia.Parrot.services.BootJobIntentService$$Lambda$0:  void  a(java.lang.Object)
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  f()
com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController  a()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Exception,java.lang.String,com.bumptech.glide.request.target.Target,boolean)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  boolean  a(java.lang.Exception,java.lang.Object,com.bumptech.glide.request.target.Target,boolean)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  e()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$3:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  i()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  g()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  onDismiss(android.content.DialogInterface)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$1:  void  a(int,java.lang.String)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  m(int)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(float,float)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  g()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  c()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.view.View)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  boolean  isAutoPauseAllowed()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel  a(java.lang.Class)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(double)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(double)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  t()
com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  testButtonClicked()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  L()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ab()
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  <init>(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  com.SearingMedia.parrotlibrary.models.RecordedPhoneCall  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.main.MainActivity:  android.support.v7.app.AppCompatActivity  r()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v7.app.AppCompatActivity  p()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)
com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  void  a(int)	com.SearingMedia.Parrot.models.events.PlayGainLevelEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  s()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  c()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(android.content.Intent)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onOneClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  java.lang.String  a(android.content.Context)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getNamedDensity(android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)
com.SearingMedia.Parrot.models.SecurePreferences:  javax.crypto.spec.SecretKeySpec  b(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  sourceClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$7:  void  doClick(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(long)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$5:  void  run()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer$$Lambda$0:  void  <init>(com.google.android.exoplayer2.upstream.FileDataSource)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  com.google.android.exoplayer2.source.MediaSource  b(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onFourClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  android.content.Intent  n()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  io.reactivex.disposables.Disposable  f(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  run()
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding,com.SearingMedia.Parrot.features.save.SaveActivity)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  run()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  b(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  a(int)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  run()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.support.v4.app.Fragment)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onLifetimeClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.os.FileObserver  a(java.lang.String)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(java.io.File)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.graphics.PointF  l(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  onGlobalLayout()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  a(java.io.FileOutputStream)	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  f(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  f(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$8:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.record.RecordAnimationController$5:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController,android.animation.ObjectAnimator)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  d(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  b()
io.github.douglasjunior.androidSimpleTooltip.OverlayView:  void  <init>(android.content.Context,android.view.View)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  q()
com.SearingMedia.Parrot.views.components.TimerInputView:  void  c()	com.SearingMedia.Parrot.views.components.TimerInputView:  void  a()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  h()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onPauseClicked()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  long  B()	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  run()
com.SearingMedia.Parrot.features.play.mini.PlayFragment$2:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  J()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onAllFilesClicked()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  d(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  f(android.content.Intent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(float,float,float)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  onScale(android.view.ScaleGestureDetector)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(com.SearingMedia.Parrot.models.billing.InAppPurchaseDataModel)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(int,android.content.Intent,android.app.Activity)
com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  void  a(android.content.Context)	com.SearingMedia.Parrot.utilities.BatteryUtility:  void  a(android.content.Context)
com.SearingMedia.Parrot.views.DurationPicker:  void  a(android.content.Context,android.util.AttributeSet)	com.SearingMedia.Parrot.views.DurationPicker:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  c(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  b()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity,android.view.View,boolean)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  b(int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  b(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  e(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$3:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  o()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  h()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePausedState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  M()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileLoaded)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  f()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  int  b(int)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.backup.BackupTask:  java.lang.String  c()	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRewindButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a()
com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  com.SearingMedia.parrotlibrary.models.ChangeLogModel[]  newArray(int)	com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(android.widget.SeekBar$OnSeekBarChangeListener)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  b(int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(int,int,int)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  c()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$1:  void  run()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  boolean  access$400(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.ArrayList  d()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(android.content.Context)
com.SearingMedia.Parrot.models.RecordingConstants:  int  c(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  u()
com.SearingMedia.Parrot.controllers.drawer.DrawerController$2:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerController)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b(android.support.v7.app.ActionBarDrawerToggle)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  java.util.concurrent.ArrayBlockingQueue  a(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a(byte[])
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  j()
com.SearingMedia.Parrot.utilities.ColorUtility:  int  a(int)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)
com.SearingMedia.Parrot.utilities.StringUtility:  java.lang.String  b(java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  void  a(java.io.File)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  <init>(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.TimedRecording$1:  com.SearingMedia.parrotlibrary.models.TimedRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  y()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(android.view.View)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment,android.content.Intent)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(android.content.Intent)
com.SearingMedia.parrotlibrary.utilities.ViewUtility:  void  setElevation(android.view.View,float)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  p()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  d()
com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService$allFilesObserver$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$2:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference,java.lang.String)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  e(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.view.View  i(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  k()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  <init>(boolean,boolean)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  java.util.List  a()	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$4:  java.lang.Object  call()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onLifetimeClicked()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onNoButtonClicked()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onZipClicked()	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  w()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  m(int)
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double  a(int[])	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(java.lang.Exception)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setPagingEnabled(boolean)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  h()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel  b(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  I()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  a(int)
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  d(boolean,int)
com.SearingMedia.Parrot.models.ParrotFile$2:  int  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile$2:  int  compare(java.lang.Object,java.lang.Object)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.ArrayList  b(android.content.Context)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  f(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,android.view.View)
com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.FileOutputStream,long,int)	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b(java.io.FileOutputStream)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openFormatSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  c(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  f(android.content.Intent)
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setDuration(long)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setFromPendingRecording(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.utilities.PreferenceViewUtility$1:  void  <init>(android.preference.ListPreference)	com.SearingMedia.Parrot.utilities.PreferenceViewUtility:  void  a(android.preference.ListPreference)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  boolean  t()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(android.view.View)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment,android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  a(com.SearingMedia.Parrot.features.record.RecordPresenter,com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher)	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter,com.SearingMedia.Parrot.models.ParrotFileList,com.SearingMedia.Parrot.models.events.TrackListChangedEvent)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  j()	com.SearingMedia.Parrot.services.AudioProcessingService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  b(byte[],long)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  a(double)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onTrackClick()
com.SearingMedia.Parrot.views.components.TwoColorDrawable:  void  <init>(int,int)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$19:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  s()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  a(android.support.v4.app.DialogFragment)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  i()	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(boolean)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  d()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  a(int)	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(android.telephony.TelephonyManager)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  c()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  i(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$2:  void  run()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  getHourMinuteFormatted(java.util.Date,boolean)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$6:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <clinit>()
com.SearingMedia.Parrot.models.ParrotFile:  int  q()	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  o()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  v()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  p()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$6:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  s()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  b(android.app.Activity)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  b()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  j()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onConnectClicked(android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Y()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  H()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onDestroyView()
com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  n()	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(int)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,int)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  c()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneMonthClicked()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  onConnected(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  j()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BottomBarButton  i(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  g(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  f(android.view.View,float)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onStartTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.features.record.RecordAnimationController$3:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationStartListener:  void  onAnimationStart(android.animation.Animator)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  n()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  i()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.PlayNewTrackEvent)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  p(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  e()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  d()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  setMaxProgress(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  run()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  j()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  g()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  e(android.content.Intent)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$0:  void  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  u()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  k()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  onClick(android.view.View)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  t()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onSaveInstanceState(android.os.Bundle)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.PendingRecording$1:  com.SearingMedia.parrotlibrary.models.PendingRecording[]  newArray(int)	com.SearingMedia.parrotlibrary.models.PendingRecording$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$3:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  t()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  c()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  d()
com.SearingMedia.Parrot.views.components.NumberPadView:  void  setListener(com.SearingMedia.Parrot.views.components.NumberPadView$Listener)	com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a()
com.SearingMedia.Parrot.services.AudioRecordService$AudioRecordBinder:  void  <init>(com.SearingMedia.Parrot.services.AudioRecordService)	com.SearingMedia.Parrot.services.AudioRecordService:  void  <init>()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  n()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  b(boolean)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  int  c(int)	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  android.media.MediaFormat  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  android.graphics.Point  F()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$22:  android.graphics.Point  a()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView  b(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  f(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$3:  java.lang.Object  call()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.events.TrackListChangedEvent  b(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(android.graphics.Canvas)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  isSamsung()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  n()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordButton$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(com.google.android.exoplayer2.PlaybackParameters)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  B()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$0:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  p()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  h()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.models.events.CustomGainEvent:  double  a()	com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  onEvent(com.SearingMedia.Parrot.models.events.CustomGainEvent)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar1Touch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$2:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity,android.view.View)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(float,float,float,float)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  b(int,android.view.MotionEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  K()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  n()
com.SearingMedia.parrotlibrary.requests.ParrotWearRequestHelper:  void  sendMessage(java.lang.String,java.lang.Object,com.SearingMedia.wearexchange.WearExchangeController)	com.SearingMedia.parrotlibrary.requests.ParrotWearRequestHelper:  void  sendMessage(java.lang.String,com.SearingMedia.wearexchange.WearExchangeController)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  l()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  a(java.lang.String)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  d(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$500(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$Listener  d(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$setProgress$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,int)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  setProgress(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.animation.ValueAnimator)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertDateTimeToHumanReadable(java.util.Date)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  b(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  b(int)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  a(byte[],long)	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  boolean  b()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(android.support.v7.widget.RecyclerView$ViewHolder,int)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(java.lang.String,boolean)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  b(android.content.Context)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context,boolean)
com.SearingMedia.Parrot.controllers.drawer.DrawerController$1:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerController,android.app.Activity,android.support.v4.widget.DrawerLayout,android.support.v7.widget.Toolbar,int,int)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher  b(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$1:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  o()
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(android.support.v7.widget.Toolbar)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  format(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel,boolean)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,int)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.io.File,com.google.android.gms.drive.DriveApi$DriveContentsResult,com.google.android.gms.drive.DriveFolder,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$9:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  f(int)
com.SearingMedia.Parrot.features.main.MainActivity:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  a(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,long)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openSampleRateSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordAnimationController$8:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationStartListener:  void  onAnimationStart(android.animation.Animator)
com.SearingMedia.Parrot.models.ParrotFile:  long  w()	com.SearingMedia.Parrot.models.ParrotFile:  long  b(com.SearingMedia.Parrot.models.ParrotFile)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  q()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  m(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(android.view.ActionMode)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  M()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)	com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.SearingMedia.Parrot.features.settings.ParrotPreferenceFragment  n()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  a(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.utilities.comparators.DoubleValueComparator:  int  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.comparators.DoubleValueComparator:  int  compare(java.lang.Object,java.lang.Object)
com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController$1:  void  <init>(com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController)	com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  void  <init>(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  i()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$9:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(com.google.firebase.database.DataSnapshot)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$4:  void  onDataChange(com.google.firebase.database.DataSnapshot)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  a(com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$1:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  float  b(int,int)	com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  long  a(int,int,int)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  a(int,short[])	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a(com.SearingMedia.Parrot.controllers.drawer.DrawerController)	com.SearingMedia.Parrot.controllers.drawer.DrawerController$1:  void  a(android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  u()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  F()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$12:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  o()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  b(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  c()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  i()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  java.lang.String  d(int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  a(android.widget.SeekBar,int)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(android.app.Activity)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideWaveTouchingState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  R()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  c(java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar1Click()	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.RateAppController:  void  <init>(android.support.v4.app.FragmentActivity)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Y()
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.RateAppController:  void  f()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  y()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  a(android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(double)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  h()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(java.lang.Object)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)
com.SearingMedia.Parrot.models.ScreenshotModel$1:  com.SearingMedia.Parrot.models.ScreenshotModel[]  a(int)	com.SearingMedia.Parrot.models.ScreenshotModel$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  android.content.Intent  b(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  android.app.PendingIntent  c(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.features.main.MainActivity:  void  o()	com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  q()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  p()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  f(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$1:  void  onClick(android.view.View)
com.SearingMedia.Parrot.ParrotApplication:  void  n()	com.SearingMedia.Parrot.ParrotApplication:  void  onCreate()
com.SearingMedia.Parrot.models.SecurePreferences:  java.lang.String  e(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  java.lang.String  d(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.models.events.ErrorPlayingFileEvent:  void  <init>(java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  d()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  boolean  q()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  p()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateLoadFileProgress$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onSixMonthsClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.FilterController:  double  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.FilterController:  double  a(byte[],double,com.SearingMedia.parrotlibrary.models.RecordingModel,int)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  b(byte[],long)
com.SearingMedia.Parrot.utilities.AESUtility:  java.lang.String  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  c()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$3:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  m()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  android.content.Context  a(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  r()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  g(boolean)	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  J()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$4:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$18:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  r()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  n()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupView)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(long)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  a(java.lang.Object)	com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  b(int,android.view.MotionEvent)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  a(android.view.MotionEvent)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  c(android.app.Activity)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  c()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(com.SearingMedia.Parrot.features.share.details.ShareActivityView)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.utilities.RepairUtility:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility$$Lambda$1:  void  run()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording,long)
com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  H()
com.SearingMedia.Parrot.models.events.PresetReverbEvent:  void  a(int)	com.SearingMedia.Parrot.models.events.PresetReverbEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  b()	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  k()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  d(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  e(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$3:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRepairClick()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  android.os.Handler  C()	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  android.os.Handler  t()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.view.MenuItem)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  onActionItemClicked(android.view.ActionMode,android.view.MenuItem)
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  int  a()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  G()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  r()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  d(java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(java.lang.String,android.os.Bundle)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity)	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity,android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$3:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  e()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  s()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  n()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  f()	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  b()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  aa()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  d()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltipUtils:  void  a(android.view.View,float)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  onGlobalLayout()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ad()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  b(int)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  c()
com.SearingMedia.Parrot.features.init.ChangeLogUtil$1:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  boolean  b(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$2:  boolean  a(java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  e()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  int  b()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.analytics.AnalyticsController)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter  m()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  d()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$attachView$1:  void  run()
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  void  c(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  y()
com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  com.SearingMedia.Parrot.models.ScheduledRecordingViewModel  a(java.lang.String,java.util.Date)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$6:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  y()
com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  a(android.view.ActionMode,android.view.Menu)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  onCreateActionMode(android.view.ActionMode,android.view.Menu)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long)	com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$2:  void  run()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int,android.content.Intent)	com.SearingMedia.Parrot.features.main.MainActivity:  void  onActivityReenter(int,android.content.Intent)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  l()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$20:  void  run()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(com.SearingMedia.Parrot.controllers.recording.ChronometerController,long)	com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  run()
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  f(boolean,int)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment,android.preference.EditTextPreference,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a(android.preference.EditTextPreference,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordView)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  f()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.parrotlibrary.models.TimedRecording:  java.lang.String  getBitRate()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(android.graphics.Canvas,int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  b(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  java.util.List  a()	com.SearingMedia.Parrot.thirdparty.utils.Option:  java.util.Iterator  iterator()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$10:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  g(int)
com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.io.RandomAccessFile,long,long)	com.SearingMedia.Parrot.utilities.WavUtility:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  k()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder,com.SearingMedia.parrotlibrary.models.OnDemandRecording$1)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  isBluetoothPreferred(boolean)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  H()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  b()
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setShouldShowStaticWave(boolean)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()
com.SearingMedia.Parrot.models.ParrotFile$3:  int  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile$3:  int  compare(java.lang.Object,java.lang.Object)
com.SearingMedia.Parrot.utilities.RepairUtility$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$OnShowListener  a(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip,io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$OnShowListener)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$6:  void  onGlobalLayout()
com.SearingMedia.Parrot.features.main.MainActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  J()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(long)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a()	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$1:  void  run()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  aB()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  n(int)
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  m()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(boolean)	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  e(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  d(java.util.List)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  o()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex,android.media.MediaFormat)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  a(android.app.Activity)	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  i()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  i()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  void  b(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl,android.arch.persistence.db.SupportSQLiteDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCheckChanged(android.widget.CompoundButton,boolean)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  q()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  java.lang.String  b(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.models.ShareGroupModel:  int  a()	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  int  getItemViewType(int)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel  a(java.lang.Class)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  int  B()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(android.os.Bundle)
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  b()	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getMaxWidth()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  java.lang.Object  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  e(android.content.Intent)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  onDestroy()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  b(boolean)	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  setPressed(boolean)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$0:  void  run()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$200(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  d(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a()
com.SearingMedia.Parrot.controllers.FirebaseController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.FirebaseController,java.util.concurrent.atomic.AtomicBoolean,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.controllers.FirebaseController:  java.util.concurrent.ScheduledFuture  a(java.util.concurrent.atomic.AtomicBoolean,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  u()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.utilities.LogUtility$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.utilities.LogUtility:  void  <clinit>()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  y()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  v()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1,android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.ParrotFileList  B()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,long)
com.SearingMedia.Parrot.models.events.TrackListChangedEvent:  java.util.List  b()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)
com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  long  a(int,int,int)	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a()
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  f()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  a(java.util.ArrayList)
com.SearingMedia.Parrot.models.events.RecordingFinishedEvent:  void  <init>(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onRepeatClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile:  int  b()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  q()
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  c()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()
com.SearingMedia.Parrot.services.AudioRecordService:  void  b(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,android.content.Context)
com.SearingMedia.Parrot.utilities.PreferenceViewUtility$3:  void  <init>(android.preference.ListPreference,android.preference.Preference$OnPreferenceChangeListener)	com.SearingMedia.Parrot.utilities.PreferenceViewUtility:  void  a(android.preference.ListPreference,android.preference.Preference$OnPreferenceChangeListener)
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  java.lang.Void  a(java.lang.Void[])	com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  java.lang.Object  doInBackground(java.lang.Object[])
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  int  e(int)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  double  a(int)	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  f()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.SearingMedia.Parrot.features.settings.EmptyPresenter  m()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  <init>(com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  an()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  a(android.support.v7.app.ActionBarDrawerToggle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ad()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)
com.SearingMedia.Parrot.controllers.ShareController:  java.util.ArrayList  b()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  j()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  e()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getName()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)
com.SearingMedia.Parrot.models.events.PresetReverbEvent:  int  a()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onEvent(com.SearingMedia.Parrot.models.events.PresetReverbEvent)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  g()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceDisconnected(android.content.ComponentName)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$1:  void  run()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  p()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  n()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity,android.view.View)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  int  a()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltipUtils:  void  a(android.widget.TextView,int)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$6:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()
com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>(boolean)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  d()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  r()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  b(java.util.List)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$dismissProgressView$1:  void  run()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  d(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  c()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onSevenClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$8:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$7:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  d(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  z()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  x()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(android.telephony.TelephonyManager)	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlayerPosition$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,long)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  int  c(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  d(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(int)
com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar4Touch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$8:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveTouchingState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  Q()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  e()	com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  void  a()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRepeatOneDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOne$1:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  l()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$renderSoundFile$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showSmallProgressBar$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  y()
com.SearingMedia.Parrot.features.record.CustomGainCalculator:  double  a(int)	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  b()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(com.SearingMedia.Parrot.models.billing.InAppPurchaseDataModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileSuccessToast$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  G()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.util.Date  getUpdatedDateTime(java.util.Date,int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)
com.SearingMedia.Parrot.controllers.ShareController:  void  j()	com.SearingMedia.Parrot.controllers.ShareController:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  h()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  s()	com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setTime(java.util.Date)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setFromPendingRecording(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  java.util.concurrent.atomic.AtomicBoolean  a(com.SearingMedia.Parrot.features.play.full.CircularProgressView)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  onAnimationUpdate(android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.widget.RelativeLayout  d(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$2:  boolean  onPreDraw()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  e()
com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter$RowModelViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter:  void  a(android.view.View)
com.SearingMedia.Parrot.models.ShareGroupModel:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(java.util.List,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordAnimationController$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  a()
com.SearingMedia.Parrot.models.events.ErrorPlayingFileEvent:  java.lang.String  a()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.ErrorPlayingFileEvent)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  q()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  c(int)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int,java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  void  a(java.io.File)	com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.io.File,boolean)
com.SearingMedia.Parrot.models.ScreenshotModel:  java.lang.String  b()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRepairClick()
com.SearingMedia.Parrot.controllers.ShareController:  java.util.ArrayList  c()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  j()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.models.RowModel:  void  b(java.lang.String)	com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  a()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int[]  k()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$4:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  n()
com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  int  d()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(com.SearingMedia.Parrot.controllers.recording.ChronometerController$Listener)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  run()
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  d()
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  boolean  shouldAlwaysExecuteAction()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$1:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  q()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  m()	com.SearingMedia.Parrot.features.record.RecordFragment:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  r()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ab()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$3:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  android.app.Activity  r()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  android.app.Activity  l()
com.SearingMedia.Parrot.services.MaintenanceService:  void  e()	com.SearingMedia.Parrot.services.MaintenanceService:  void  d()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  j()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  i()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a()	com.SearingMedia.Parrot.ParrotApplication:  void  c()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(android.content.Intent)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  b(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.init.InitController:  boolean  a()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  k()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity,android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  a(com.SearingMedia.Parrot.thirdparty.utils.UnitFunction)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$initializeWaveForm$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  onOneMonthClicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPreviousTrackClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordAnimationController$6:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()
com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  C()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c()
com.SearingMedia.Parrot.controllers.ShareController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.ShareController)	com.SearingMedia.Parrot.controllers.ShareController:  void  k()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,int)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(int)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  h()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  onTaskRemoved(android.content.Intent)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  t()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.RecordView)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  a()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onNextTrackClick()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  int  b(com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall:  void  setCallType(java.lang.Integer)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String,int)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  a()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$2:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onRenameClick()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  java.lang.String  y()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  b(boolean)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCheckChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.parrotlibrary.models.PendingRecording:  boolean  shouldAlwaysExecuteAction()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  java.lang.String  e(int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatAll$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  e(boolean)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,long)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  f()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder,io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  u()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  d()
com.SearingMedia.Parrot.utilities.RenameUtility:  void  a()	com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  onClick(android.content.DialogInterface,int)
com.SearingMedia.Parrot.controllers.ShareController:  void  i()	com.SearingMedia.Parrot.controllers.ShareController:  void  a()
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  <init>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  z()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  A()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a()	com.SearingMedia.Parrot.features.init.InitController:  void  a(com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  l()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  f()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  b()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.util.List)
com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,boolean)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(boolean,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getBottomY()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding,com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  y()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  w()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onRenameClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  c()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  b()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(int,int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder,io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  b(int)	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  e(android.os.Bundle)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  a(android.support.v7.widget.Toolbar)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  E()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListView)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.parrotlibrary.models.PendingRecording$1:  com.SearingMedia.parrotlibrary.models.PendingRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PendingRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(boolean)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment,boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  M()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  android.preference.ListPreference  d(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  v()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  n()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(android.view.View)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$0:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  d()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$0:  void  run()
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getSimCardCountry(android.content.Context)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getSimAndLocale(android.content.Context)
com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding,com.SearingMedia.Parrot.views.components.QuickSettingsTile)	com.SearingMedia.Parrot.views.components.QuickSettingsTile_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile,android.view.View)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onNoButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  c(com.SearingMedia.Parrot.views.components.QuickSettingsTile)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  e()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$4:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  v()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$3:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  java.lang.String  d()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  g()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener,android.telephony.TelephonyManager)	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  h()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  q()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  p(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()
com.SearingMedia.Parrot.controllers.SaveTrackController:  void  e(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  boolean  V()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  C()
com.SearingMedia.Parrot.controllers.RateAppController:  void  j()	com.SearingMedia.Parrot.controllers.RateAppController:  void  a()
com.SearingMedia.Parrot.services.MaintenanceService:  void  b(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate)	com.SearingMedia.Parrot.services.MaintenanceService:  void  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$11:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  h(int)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  android.content.Intent  s()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  g()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  q()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onGrantStoragePermissionClicked()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  onCardClicked()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupActivity:  com.SearingMedia.Parrot.features.backup.BackupPresenter  m()	com.SearingMedia.Parrot.features.backup.BackupActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  v()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileLoaded)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  e()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  c()	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  com.SearingMedia.Parrot.models.ParrotFileList  a()
com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  a()	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  android.preference.SwitchPreference  b(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  f()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$10:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  boolean  a(java.io.File)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding,com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity,android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getFastForwardDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showFastForwardButton$1:  void  run()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  format(java.lang.String)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  void  o()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  f()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(float)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(float)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.utilities.ListUtility:  java.util.List  a(android.content.res.TypedArray)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile,java.lang.String,int,int,java.lang.String[],java.lang.String)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$1:  void  run()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  int  access$300(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int,boolean)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)
com.SearingMedia.Parrot.features.save.SavePresenter:  boolean  i()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  c()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  f()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  b()	com.SearingMedia.Parrot.services.AudioRecordService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.features.record.RecordPresenter:  android.support.v4.app.FragmentActivity  r()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Y()
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet)	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet,android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$3:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  u()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  f(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  c()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  boolean  i()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  e()
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  v()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  b(byte[],long)	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  b(java.util.List)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  bitRate(java.lang.String)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  I()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  d()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onAllFilesClicked(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyView)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter,com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  long  getRandomTimeToday(int,int,java.util.Calendar)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  long  getRandomTimeOfDayInMs(int,int)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  bitRate(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  l()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  d(int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  boolean  a(int)
com.SearingMedia.Parrot.models.ParrotFile:  void  <init>(android.os.Parcel)	com.SearingMedia.Parrot.models.ParrotFile$1:  com.SearingMedia.Parrot.models.ParrotFile  a(android.os.Parcel)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  g()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.utilities.AnimationUtility$1:  void  <init>(android.view.animation.Animation,android.view.View)	com.SearingMedia.Parrot.utilities.AnimationUtility:  void  a(android.view.View,android.content.Context)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.lang.String[]  d()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  java.util.ArrayList  c()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  e()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(boolean)
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  b()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  onDestroy()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  android.support.v7.widget.Toolbar  d()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  I()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  d()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPreviousTrackClick()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setSoundFile(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$200(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.ParrotFile  R()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  d(byte[],long)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  c(byte[],long)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  X()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordFragment)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  f(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  c(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context,android.app.PendingIntent)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  java.lang.String  getBitRate()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a()
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(int,boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  int  e()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openFormatSettingsDialog()
com.SearingMedia.Parrot.utilities.PrimitiveUtility:  long  b(long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  F()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  f(android.view.View,float)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  e()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  c()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  j()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  b()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(android.content.Intent)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  onDestroy()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.view.ViewTreeObserver$OnGlobalLayoutListener  k(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  onGlobalLayout()
com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService,java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(java.lang.String)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setLockPage(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(android.os.Bundle)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  j()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()
com.SearingMedia.Parrot.features.record.RecordFragment$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  <init>()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  c(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$2:  void  onDataChange(com.google.firebase.database.DataSnapshot)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(com.wdullaer.materialdatetimepicker.date.DatePickerDialog,int,int,int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  V()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ae()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  setScale(float)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(int)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  E()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  h()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onYesButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(boolean)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  e(android.widget.ListView,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.ImageView  d(android.widget.ListView,int)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$2:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  g()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.services.AudioRecordService  f(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  b(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$0:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.parrotlibrary.models.OnDemandRecording,android.content.Context)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  N()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  e()	com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onResume()
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onNineClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$10:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter:  int  af()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  A()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(boolean)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment,boolean)
com.SearingMedia.Parrot.controllers.recorders.FilterController:  double  a(byte[],double,double,int)	com.SearingMedia.Parrot.controllers.recorders.FilterController:  double  a(byte[],double,com.SearingMedia.parrotlibrary.models.RecordingModel,int)
com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  a()	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  e()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showRenameFileFailedToast$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  H()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.io.File,com.google.android.gms.drive.DriveApi$DriveContentsResult,com.google.android.gms.drive.DriveFolder,int)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$4:  void  run()
com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  b(int)	com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  d(android.app.Activity)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  d()
com.SearingMedia.Parrot.utilities.LogUtility:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  l()
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  a(double)	com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$11:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  n()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  onDestroy()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onDestroyView()
com.SearingMedia.Parrot.features.play.full.CircularProgressView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView,android.content.Context)	com.SearingMedia.Parrot.features.play.full.CircularProgressView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView,android.view.View)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  double  e()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(int,android.content.Intent,android.app.Activity)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  h(int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  r()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  o()
com.SearingMedia.Parrot.controllers.recorders.helpers.AudioFocusHelper:  void  <init>(android.content.Context,com.SearingMedia.Parrot.interfaces.AudioFocusListener)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()
com.SearingMedia.parrotlibrary.models.PendingRecording:  boolean  isAutoPauseAllowed()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment,java.lang.String,int)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.os.FileObserver  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  <clinit>()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  java.lang.String  x()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$attachView$1:  void  run()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  f()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  onDestroy()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onDestroyView()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  double  c(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1:  void  run()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  c()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  j()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  h(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  W()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  boolean  u()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$analyticsController$2:  java.lang.Object  a()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  int  b(int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(int,int,int)
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  a()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  onClick()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  R()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(int)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  boolean  c(java.io.File)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  com.SearingMedia.Parrot.features.record.WaveSurfaceView  C()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  c()
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a()	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.controllers.WebViewController:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.FeedbackController:  void  e(android.content.Context)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  n()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(boolean)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(boolean,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  R()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.RecordingActionEvent)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  y()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  A()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  a()	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$hideTopMenu$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  J()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  a(java.lang.CharSequence)	com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  i()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  h()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  e()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  G()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  b(java.lang.String)	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  d()
com.SearingMedia.Parrot.features.backup.BackupActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  void  <clinit>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  ab()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  e()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onAllFilesClicked(android.view.View)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording[]  newArray(int)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  android.preference.SwitchPreference  d(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  l()	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  f()
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar2Click()	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.save.SavePresenter:  boolean  a(android.view.MenuItem)	com.SearingMedia.Parrot.features.save.SaveActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  c()
com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.receivers.EventReceiver$loadSoundFile$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  d(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b(boolean)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  e()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  n()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  k()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  b(com.SearingMedia.Parrot.controllers.recording.ChronometerController)
com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  void  <init>(android.content.Context,java.lang.String,java.lang.String,boolean)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  c()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  boolean  onCreateOptionsMenu(android.view.Menu)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter,com.SearingMedia.Parrot.models.events.TrackListChangedEvent)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$1:  void  run()
com.SearingMedia.Parrot.utilities.ArrayUtility:  java.lang.String[]  a(java.util.List)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  e()
com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile:  int  d()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  q()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setListener(com.SearingMedia.Parrot.features.play.full.waveform.WaveformListener)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,boolean,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.features.main.MainPresenter$2:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onHeaderClick(android.preference.PreferenceActivity$Header,int)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  a(java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$5:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  g()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  a(com.SearingMedia.Parrot.models.ParrotFileList,java.lang.String)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  java.io.File  v()
com.SearingMedia.Parrot.services.AudioProcessingService$start30MinuteTimeout$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  j()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  h()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onConnectClicked(android.view.View)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  y()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  d()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)
com.SearingMedia.Parrot.features.save.SaveActivity$1:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  p()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  y()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  x()
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  int  d(int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setDuration(long)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView,android.content.Context)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformView,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  boolean  a(double)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$1:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  h()	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(boolean)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  i()	com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  k()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onHelpClicked()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  void  onDestroy()	com.SearingMedia.Parrot.services.AudioRecordService:  void  c()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  m()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  n()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.util.List  m()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  n()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  u()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  o()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onCreate(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$7:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel[]  a(int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double[]  a(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  t()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  w(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.util.List  g()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  g()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  int  a(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity,int)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  java.lang.CharSequence  h(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  A()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  aj()
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  int  f()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  b(int)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  j()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  d()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.animation.AnimatorSet  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupService:  void  a()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$Companion:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$2:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.util.ArrayList  a(java.lang.String,java.util.ArrayList)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  T()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.RecordingActionEvent)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  g()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  b(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  d()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  i()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onConnectClicked(android.view.View)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  q()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  k(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$1:  void  run()
com.SearingMedia.Parrot.models.SecurePreferences:  javax.crypto.spec.IvParameterSpec  a()	com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8$1:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8:  void  onEvent(int,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  java.lang.String  z()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  java.lang.String  F()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a(byte[])	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  d(byte[],long)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  e()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a()	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  onScaleBegin(android.view.ScaleGestureDetector)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  b(android.widget.SeekBar,int)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  b(int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(android.support.design.widget.NavigationView)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.backup.BackupService:  void  c(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupService:  void  b()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$8:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  e(int)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c(java.lang.String,int)
com.SearingMedia.Parrot.features.main.MainActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  long  t(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.utilities.RepairUtility$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter  W()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.parrotlibrary.utilities.EventBusUtility:  void  registerSticky(java.lang.Object)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  d()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  s(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(android.graphics.Canvas,int[],int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  deleteButtonClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$9:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordButton:  void  c()	com.SearingMedia.Parrot.features.record.RecordButton:  void  a(boolean,android.graphics.drawable.Drawable,int,android.graphics.drawable.Drawable)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  a(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)
com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupService,android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  a(com.google.android.gms.drive.DriveApi$MetadataBufferResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  onResult(com.google.android.gms.common.api.Result)
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  java.io.File  a(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment,com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$3:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  e(android.content.Context)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  L()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$13:  void  run()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onOpenSystemSettingsClick()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  s()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  f(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$1:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  settingsClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$8:  void  doClick(android.view.View)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.util.List)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  d()	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.util.List)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  com.SearingMedia.Parrot.models.ParrotFileList  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  i()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  android.preference.SwitchPreference  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$3:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomDatabase)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$PlayerBarViewModel:  void  a(boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  h()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  f()
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.util.List)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  Z()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)
com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  void  a(boolean)	com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  void  <init>(boolean)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$17:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  q()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  o()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  n()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(com.google.android.exoplayer2.PlaybackParameters)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  B()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$0:  void  run()
com.SearingMedia.Parrot.models.ParrotFile:  void  x()	com.SearingMedia.Parrot.models.ParrotFile:  void  a()
com.SearingMedia.Parrot.services.AudioRecordService:  void  d(android.content.Context)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  b(boolean)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  onCloseClick()	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  c(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a()	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  run()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  onConnected(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(double)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  a(int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  a(int)
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  h(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  f(android.view.View,float)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  d(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$4:  void  onShow(android.content.DialogInterface)
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  int  a()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  b(com.SearingMedia.Parrot.features.settings.SettingsActivity)	com.SearingMedia.Parrot.features.settings.SettingsActivity$3:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$4:  void  run()
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onSixClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$7:  void  doClick(android.view.View)
com.SearingMedia.Parrot.utilities.PrimitiveUtility:  short[]  a(byte[])	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$recalculateWave$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  K()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  f()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$5:  void  run()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  d(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  run()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  e(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  b(java.lang.String,java.lang.String,android.content.Context)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  C()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  onClick()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  b(int)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(java.util.List)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  M()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$12:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$animateWaveInFromRight$1:  void  run()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  l()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.Option$Some:  void  a(com.SearingMedia.Parrot.thirdparty.utils.UnitFunction)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(java.util.List)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onBuildHeaders(java.util.List)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.record.RecordAnimationController$6:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.main.MainPresenter:  boolean  a(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(java.lang.String,boolean)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.init.InitController:  void  a(com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  boolean  a()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  void  a(boolean)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)
com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  I()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  y()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,long,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  B()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackPressed()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity,android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,double)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(double)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  d()	com.SearingMedia.Parrot.features.save.SaveActivity$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  io.reactivex.Maybe  d(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  j()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  double  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,double)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  run()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationCompat$WearableExtender  c(android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  c(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  b()	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  g()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onSpeedClick()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  android.support.v7.app.AppCompatActivity  n()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  android.support.v7.app.AppCompatActivity  e()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getRepeatOffDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOff$1:  void  run()
com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  d()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  void  <init>(android.os.Parcel)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel  a(android.os.Parcel)
com.SearingMedia.Parrot.ParrotApplication:  void  i()	com.SearingMedia.Parrot.ParrotApplication:  void  onCreate()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  a(android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter  m()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(byte[],int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.features.record.RecordAnimationController$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  aC()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  n(int)
com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  j()
com.SearingMedia.Parrot.features.save.SaveActivity:  android.widget.Switch  w()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  e(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.save.SavePresenter:  boolean  t()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(float)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(float)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeView)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  a()	com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$2:  void  run()
com.SearingMedia.Parrot.services.AudioRecordService:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  void  setCustomListener(com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile$CustomListener)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openBitRateSettingsDialog()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.details.FileDelegateWrapper:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.io.File,boolean)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter$4:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onZeroClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.PendingIntent  q(android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  a(int,java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  java.io.File  b()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  k()
com.SearingMedia.Parrot.controllers.TestingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.utilities.RemoteConfigsUtility:  boolean  d()	com.SearingMedia.Parrot.services.AudioProcessingService$Companion:  void  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onDestroy()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  y()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  o()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  n()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  d()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar4Click()	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$7:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingView)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showNormalSpeedIcon$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  n()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding,com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  c()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onRequestFeatureClicked()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$4:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$7:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  b()
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getSimAndLocale(android.content.Context)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  boolean  e()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  android.os.Bundle  b(java.lang.String,java.util.ArrayList)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.util.ArrayList  a(java.lang.String,java.util.ArrayList)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  e()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsView)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  w()
com.SearingMedia.parrotlibrary.models.PendingRecording:  boolean  isBluetoothPreferred()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  c(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  android.os.Handler  a(com.SearingMedia.Parrot.features.settings.SettingsAboutFragment)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment$1:  void  onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPausePlayClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$5:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  h()	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c(android.preference.Preference)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onTwoClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  void  <init>(java.io.File,java.io.File,boolean)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(java.lang.String,com.SearingMedia.Parrot.interfaces.Callback,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(int)	com.SearingMedia.Parrot.features.record.settings.PresetDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  e()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  k()	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  g()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(android.content.ServiceConnection)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  o()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$animateRepeatButton$1$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(java.util.List)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$4:  java.lang.Object  call()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onSyncClick()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$4:  void  doClick(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.view.ViewTreeObserver$OnGlobalLayoutListener  o(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$9:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  v()
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  com.SearingMedia.parrotlibrary.models.RecordedPhoneCall[]  newArray(int)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,com.SearingMedia.Parrot.models.AnalyticsEventModel)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(com.SearingMedia.Parrot.models.AnalyticsEventModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  f(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$6:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(java.lang.String)
com.SearingMedia.Parrot.models.ShareObject$1:  int  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.models.ShareObject)	com.SearingMedia.Parrot.models.ShareObject$1:  int  compare(java.lang.Object,java.lang.Object)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  j(android.app.Activity)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  b(android.app.Activity)
com.SearingMedia.Parrot.receivers.EventReceiver$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.receivers.EventReceiver:  void  <clinit>()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallUtility:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallUtility:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveStoppedState$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  N()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  b()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  f()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onZipClicked(android.view.View)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  E()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  D()
com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  b(android.app.Activity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$9:  void  run()
com.SearingMedia.Parrot.features.save.SaveActivity:  android.support.v7.app.AppCompatActivity  s()	com.SearingMedia.Parrot.features.save.SavePresenter:  android.support.v7.app.AppCompatActivity  w()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$22:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  w()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  n(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  k()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  <init>()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter$$Lambda$0:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  e()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  e()	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.base.InformationDialogFragment:  java.lang.String  a(android.content.Context)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.views.DurationPicker:  void  setHours(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(int,int,int)
com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  a(android.content.Context,android.os.IBinder)	com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  a(android.app.Activity)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  android.support.v4.app.Fragment  a(int)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordAnimationController$8:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$initializeButtons$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  e()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  long  convertHumanReadableTimeToMilliseconds(java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  long  i()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  F()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  g()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter  m()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  h(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$7:  void  run()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  d()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  a(android.support.v4.app.DialogFragment)
com.SearingMedia.Parrot.controllers.recording.BluetoothHeadsetController:  boolean  b()	com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  c()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  boolean  h()	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a(android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$3:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openBitRateSettingsDialog()
com.SearingMedia.Parrot.models.RowModel:  void  b(int)	com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  o()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  b(boolean)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.controllers.RateAppController:  void  c()	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$3:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(long,java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(long,long)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$8:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.utilities.ListUtility:  java.util.List  c(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  java.util.List  Q()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$ScreenshotPagerAdapter:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity,android.support.v4.app.FragmentManager,java.util.ArrayList)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  n()
com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  b(android.content.Context,android.os.IBinder)	com.SearingMedia.Parrot.utilities.KeyboardUtility:  void  b(android.app.Activity)
com.SearingMedia.Parrot.controllers.TrackManagerController:  java.lang.String  a(java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  void  b(java.io.File)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(int)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(java.lang.String,boolean)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  <clinit>()
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  a()	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  durationClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog$1:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  openFormatSettingsDialog()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()	com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  h(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  g(java.lang.String)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onYesButtonClicked()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onZipClicked(android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onZipClicked()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$1:  void  run()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$100(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationCompat$WearableExtender  f(android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  b(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  n()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  e(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  a(java.util.List)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  b(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(java.lang.String,boolean)
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  c()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  q()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()
com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(java.lang.String,android.app.Activity)	com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,android.app.Activity)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$3:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  android.content.ServiceConnection  o()
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  k()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment,android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(com.SearingMedia.Parrot.features.record.RecordingViewModel,boolean)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  a(com.SearingMedia.parrotlibrary.models.RecordingModel,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)
com.SearingMedia.Parrot.thirdparty.utils.Option:  com.SearingMedia.Parrot.thirdparty.utils.Option  a(java.lang.Object)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  onAttach(android.app.Activity)
com.SearingMedia.Parrot.models.ParrotFile:  int  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFile:  int  compareTo(java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  M()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)
com.SearingMedia.Parrot.models.events.ProValidationEvent:  void  <init>(int)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  e(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  G()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(float)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.PlaybackSpeedChangedEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  I()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  b()	com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  a()
com.SearingMedia.Parrot.models.ParrotFileList:  void  d()	com.SearingMedia.Parrot.models.ParrotFileList:  void  <init>(boolean)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertMillisecsToDayOfWeekHumanReadable(long)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b(java.io.FileOutputStream)	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  a(java.io.FileOutputStream)
com.SearingMedia.Parrot.controllers.encoders.AACAudioEncoder:  void  onDestroy()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  onDestroy()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  v()	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  java.lang.String  getBitRate()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  a()
com.SearingMedia.Parrot.controllers.FirebaseController:  void  b(java.util.concurrent.atomic.AtomicBoolean,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.controllers.FirebaseController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  g()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  f()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  b(android.content.ServiceConnection)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  h()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$1:  void  run()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  void  j(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(long,long)
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  a(int,android.view.MotionEvent)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  a(android.view.MotionEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  void  a(int)	com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsActivity$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsActivity,android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onGainClicked()	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$6:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(int)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  d(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(int,int)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.featurepager.controllers.DefaultIndicatorController:  android.view.View  a(android.content.Context)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  y()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,java.lang.String,java.lang.String,java.lang.String,long)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String,java.lang.String,java.lang.String,long)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  k()	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  c()
com.SearingMedia.Parrot.features.main.MainActivity:  com.SearingMedia.Parrot.features.main.MainPresenter  m()	com.SearingMedia.Parrot.features.main.MainActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.models.ParrotFileList:  void  a(int,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.models.ParrotFileList:  void  add(int,java.lang.Object)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  c()	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  t()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  d(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(byte[],int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)
com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  int  c(int,int)	com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  float  b(int,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$6:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  getAmPmFormatted(java.util.Date)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setTime(java.util.Date)
com.SearingMedia.Parrot.receivers.BootReceiver:  void  a(android.content.Context)	com.SearingMedia.Parrot.receivers.BootReceiver$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  h()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWaveStoppedState$1:  void  run()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  d()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  p()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  i()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(com.SearingMedia.Parrot.services.AudioProcessingService)
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding,com.SearingMedia.Parrot.features.save.SaveActivity)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToDropboxToggled(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$3:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  al()	com.SearingMedia.Parrot.controllers.RateAppController:  boolean  i()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(android.support.design.widget.TabLayout$Tab)	com.SearingMedia.Parrot.features.main.MainPresenter$3:  void  a(android.support.design.widget.TabLayout$Tab)
com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  android.animation.AnimatorSet  a(com.SearingMedia.Parrot.features.record.RecordingViewModel)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$5:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  m()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  G()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$400(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  c()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b(java.lang.String)
com.SearingMedia.Parrot.controllers.recording.PostRecordController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recording.PostRecordController)	com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  b()
com.SearingMedia.Parrot.utilities.RepairUtility:  boolean  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onSkipSilenceClicked()	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  y()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$14:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  p()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  ac()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  f()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  B()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordButton:  void  b()	com.SearingMedia.Parrot.features.record.RecordButton:  void  a(boolean,android.graphics.drawable.Drawable,int,android.graphics.drawable.Drawable)
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getOSVersion()	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  java.lang.String  getAllDeviceInformation(android.content.Context,boolean)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity,android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(int)	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  e(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  java.lang.String  c()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  w()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  q()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupService:  void  b()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  int  b(float)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarInterface)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  k()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  boolean  onLongClick()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$2:  boolean  onLongClick(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  e(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(int,com.google.android.gms.drive.DriveFolder$DriveFileResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$5:  void  onResult(com.google.android.gms.common.api.Result)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  j()	com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$10:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)
com.SearingMedia.Parrot.controllers.WebViewController:  void  a(java.lang.String,int,android.content.Context)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeAllFragment:  void  onButton1Clicked()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  java.lang.Runnable  s()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()
com.SearingMedia.Parrot.models.billing.InAppPurchaseDataModel:  int  getPurchaseState()	com.SearingMedia.Parrot.controllers.upgrade.ProController:  boolean  a(com.SearingMedia.Parrot.models.billing.InAppPurchaseDataModel)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  c()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$8:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter,android.view.View)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  b(android.view.ViewGroup,int)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  K()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  t()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  x()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  q()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  ax()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onEffectsClick()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onBuildHeaders(java.util.List)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$0:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  j()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  doneButtonClicked()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  d(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.parrotlibrary.models.TimedRecording:  boolean  isAutoPauseAllowed()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  run()
com.SearingMedia.Parrot.models.ParrotFileList:  java.util.ArrayList  c()	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,java.lang.String,com.SearingMedia.Parrot.models.ParrotFileList,android.content.Context)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  g()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordClicked()
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  E()	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding,com.SearingMedia.Parrot.features.backup.CloudBackupCardView)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView,android.view.View)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  b(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  android.os.Bundle  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$1:  void  onDataChange(com.google.firebase.database.DataSnapshot)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  b(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  l()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate,com.SearingMedia.Parrot.controllers.di.TimeDelegate,com.SearingMedia.Parrot.controllers.di.EventBusDelegate)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getTopY()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  o()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder:  void  onCardClicked()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(android.app.Activity,int)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showActivatedSpeedIcon$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  o()
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  E()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  g()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.base.InformationDialogFragment:  java.lang.String  b(android.content.Context)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.models.RecordingConstants:  int  b(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder  b(com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)
com.SearingMedia.Parrot.features.record.PauseButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.PauseButton,android.content.Context)	com.SearingMedia.Parrot.features.record.PauseButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.PauseButton,android.view.View)
com.SearingMedia.Parrot.controllers.IntentController:  void  b(android.app.Activity,java.lang.String)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$onBackPressed$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackPressed()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  j()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  run()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDeleteClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showRepeatOff$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  c(boolean)
com.SearingMedia.Parrot.features.main.MainActivity:  com.SearingMedia.Parrot.features.main.TabsPagerAdapter  t()	com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.main.TabsPagerAdapter  o()
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  e()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  q()
com.SearingMedia.Parrot.thirdparty.utils.Option$None:  java.util.List  a()	com.SearingMedia.Parrot.thirdparty.utils.Option:  java.util.Iterator  iterator()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  b()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  j()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.utilities.DisplayUtilty:  float  a(float,android.content.Context)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  m()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertDatePartsToHumanReadable(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(com.wdullaer.materialdatetimepicker.date.DatePickerDialog,int,int,int)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  n()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onSkipSilenceClicked()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Z()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  R()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  m(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  sampleRate(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  io.reactivex.Flowable  a()	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  java.lang.String  a()	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  a(android.view.View)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  c()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  a(java.io.File)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  d()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$21:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$4:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  H()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$19:  void  run()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  java.util.List  a(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  d(android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  a(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  g(android.content.Intent)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  java.util.ArrayList  b()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  void  a(int)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(boolean)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  f(android.content.Intent)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDetailsClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$6:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a(long)	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$4:  void  onClick(android.view.View)
com.SearingMedia.Parrot.ParrotApplication:  void  m()	com.SearingMedia.Parrot.ParrotApplication:  void  onCreate()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()
com.SearingMedia.Parrot.services.MediaPlayerService:  com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState  m()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.widget.TextView  b(android.widget.ListView,int)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  int  e(android.widget.ListView,int)
com.SearingMedia.Parrot.controllers.WebViewController:  java.lang.String  c(android.content.Context)	com.SearingMedia.Parrot.controllers.WebViewController:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.ParrotApplication:  void  j()	com.SearingMedia.Parrot.ParrotApplication:  void  onCreate()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  b()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  h()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  v()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(boolean)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  p()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  b(com.SearingMedia.Parrot.controllers.recording.ChronometerController)	com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  run()
com.SearingMedia.Parrot.models.ShareObject:  void  a(java.lang.String)	com.SearingMedia.Parrot.models.ShareObject:  void  <init>(android.content.pm.ActivityInfo,android.content.pm.PackageManager)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  d()
com.SearingMedia.Parrot.services.AudioProcessingService:  void  e()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(java.lang.String)
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  e(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float)
com.SearingMedia.Parrot.features.settings.SettingsActivity$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsActivity,com.SearingMedia.Parrot.models.events.ProValidationEvent)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  onEvent(com.SearingMedia.Parrot.models.events.ProValidationEvent)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.content.Context)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.WaveSurfaceView)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  boolean  e()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)
com.SearingMedia.parrotlibrary.models.PendingRecording:  void  <init>(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PendingRecording$1:  com.SearingMedia.parrotlibrary.models.PendingRecording  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  m()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  k()
com.SearingMedia.Parrot.features.record.CustomGainCalculator:  java.lang.String  a(double)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(double)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingFinishedEvent)
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  p()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordingModeIndicatorClick()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startDateClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onYesButtonClicked()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  int  h(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.widget.TextView  getStartTimeTextView()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateTime$1:  void  run()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  J()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  java.util.List  h()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  f()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton2Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  k()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e()
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding,com.SearingMedia.Parrot.features.backup.CloudBackupCardView)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView,android.view.View)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment$Listener)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  d()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  <init>(com.SearingMedia.featurepager.transformers.TransformerType)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  r()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(float)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(float,float)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(android.support.v7.widget.RecyclerView$ViewHolder,int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  h(java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(int,android.content.Intent,android.app.Activity)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  p()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  o()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$AudioRecorderDispatcherListener)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  X()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  b(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.models.ParrotFile$1:  com.SearingMedia.Parrot.models.ParrotFile[]  a(int)	com.SearingMedia.Parrot.models.ParrotFile$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.models.SecurePreferences:  void  b(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.main.MainActivity:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  f(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(java.util.List)
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  boolean  isBluetoothPreferred()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  c(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  g()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  a()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  onClick()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  <init>(com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(boolean,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  setKeys(java.util.List)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  d(int)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton1Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.models.SecurePreferences:  void  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(double)	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$4:  void  run()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent:  boolean  a()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onEvent(com.SearingMedia.Parrot.models.events.AutoPauseEnabledEvent)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  a(android.content.Context)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  c()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  boolean  c()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(float,float)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(float,float,float,float)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment,boolean)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.io.File)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  z()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  v()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  int  a(com.SearingMedia.Parrot.features.play.mini.PlayFragment,int)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  java.util.concurrent.atomic.AtomicBoolean  d(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController$4:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(com.SearingMedia.Parrot.services.MediaPlayerService,long,long)	com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Long)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  int  access$300(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  int  B()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  boolean  a(int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  int  f()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  int  f(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDontShowGrantPermissionButtonClicked()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  float  b(com.SearingMedia.Parrot.features.play.full.CircularProgressView)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  onAnimationUpdate(android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.app.ProgressDialog  a(com.SearingMedia.Parrot.features.settings.SettingsActivity)	com.SearingMedia.Parrot.features.settings.SettingsActivity$2:  void  run()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  com.SearingMedia.Parrot.models.DrawerConfigurationModel  b(com.SearingMedia.Parrot.controllers.drawer.DrawerController)	com.SearingMedia.Parrot.controllers.drawer.DrawerController$2:  void  onClick(android.view.View)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  com.SearingMedia.parrotlibrary.models.PendingRecording  a(android.content.Intent)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onNextTrackClick()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  a()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter$1:  void  a(java.util.List)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  b()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  j()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  P()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  d()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  b()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  a()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  boolean  b(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltipUtils:  void  b(android.view.View,int)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  g()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$1:  java.lang.Object  call()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.Parrot.models.databases.TrackDurationDao  m()
com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  java.lang.String  a(int)	com.SearingMedia.Parrot.features.record.settings.RecordingSettingsDialogFragment:  void  onItemClick(android.widget.AdapterView,android.view.View,int,long)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$2:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  t()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  f()	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a(long)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  m(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$4:  void  onGlobalLayout()
com.SearingMedia.parrotlibrary.models.RecordingCommandModel:  int  getCommand()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onEvent(com.SearingMedia.parrotlibrary.models.RecordingCommandModel)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment)	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a(boolean)
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver,android.content.Context)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$5:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  r()
com.SearingMedia.Parrot.views.DurationPicker:  void  a(android.widget.NumberPicker[])	com.SearingMedia.Parrot.views.DurationPicker:  void  a(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  i()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  android.preference.SwitchPreference  c(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.RateAppController:  void  a()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Y()
com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsAboutFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  d()	com.SearingMedia.Parrot.services.MaintenanceService:  void  d()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  a(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$3:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.content.Context  a(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$1:  void  run()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  ap()	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  boolean  j()
com.SearingMedia.Parrot.features.backup.BackupPresenter$2:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  t()
com.SearingMedia.Parrot.utilities.JSONUtility:  java.util.List  a(org.json.JSONArray)	com.SearingMedia.Parrot.utilities.JSONUtility:  java.lang.Object  a(java.lang.Object)
com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState:  com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState[]  values()	com.SearingMedia.Parrot.services.MediaPlayerService$2:  void  <clinit>()
com.SearingMedia.Parrot.services.BootJobIntentService$$Lambda$0:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  g()	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  F()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  g()
com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter:  boolean  c()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(java.lang.Exception)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.Exception)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  <init>(long)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  n()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  p()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.lang.String  c()	com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  boolean  shouldAlwaysExecuteAction()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  boolean  i(android.content.Intent)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPlayButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  b(boolean)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  a()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  io.reactivex.Maybe  d(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  onDestroy()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onDestroy()
com.SearingMedia.Parrot.models.events.BassBoostEvent:  void  a(int)	com.SearingMedia.Parrot.models.events.BassBoostEvent:  void  <init>(int)
com.SearingMedia.Parrot.controllers.IntentController:  void  a(android.app.Activity,java.lang.String)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  d()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingView)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackClick()
com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  c()	com.SearingMedia.Parrot.utilities.BluetoothUtility:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  c(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$1:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  <init>(com.SearingMedia.Parrot.controllers.recording.ChronometerController)	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  c()
com.SearingMedia.Parrot.models.ScheduledRecordingViewModel:  com.SearingMedia.parrotlibrary.models.PendingRecording  b()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$CardViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)
com.SearingMedia.Parrot.features.base.InformationDialogFragment:  int  a()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  l()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  o()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  h()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  f()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher$AudioRecorderDispatcherListener  g(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  long  S()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  long  G()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$1:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  float  a(com.SearingMedia.Parrot.features.play.full.CircularProgressView,float)	com.SearingMedia.Parrot.features.play.full.CircularProgressView$2:  void  onAnimationUpdate(android.animation.ValueAnimator)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.DropboxController)	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  b(java.io.File)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  r()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  b()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  h()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDetailsClick()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  a()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  onDestroyView()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  p()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(int)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController,java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  f(java.lang.String)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder,com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  build()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  f(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$3:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  h(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  g(java.lang.String)
com.SearingMedia.parrotlibrary.models.RecordingStateModel:  com.SearingMedia.parrotlibrary.models.RecordingStateModel$State  getRecordingState()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onEvent(com.SearingMedia.parrotlibrary.events.GetStatusEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  r()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showFailedToLoadWave$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  w()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  onCancel(android.content.DialogInterface)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showBigProgressBar$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long)
com.SearingMedia.Parrot.features.record.WaveSurfaceView$1:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView)	com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  a()
com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  <init>(android.view.LayoutInflater,java.util.List,com.SearingMedia.Parrot.interfaces.OnShareClickListener)	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  w()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  int  g(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a()
com.SearingMedia.Parrot.features.backup.BackupPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  u()
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.services.AudioRecordService  a(com.SearingMedia.Parrot.features.record.RecordPresenter,com.SearingMedia.Parrot.services.AudioRecordService)	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  boolean  z()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  j()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(long)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  java.util.List  b(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  d(android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.parrotlibrary.models.OnDemandRecording:  boolean  isAutoPauseAllowed()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao  k()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  b()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onFeedbackClicked()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  void  <init>(com.SearingMedia.Parrot.views.components.QuickSettingsTile)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  c()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding,com.SearingMedia.Parrot.features.backup.CloudBackupCardView)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.backup.CloudBackupCardView,android.view.View)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$onBackPressed$1:  void  run()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController$1:  void  <init>(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  org.json.JSONObject  i(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.CircularProgressView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.CircularProgressView)	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao  l()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)
com.SearingMedia.Parrot.services.AudioProcessingService:  void  a(java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  I()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$18:  void  run()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  f()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  e()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  c(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.ParrotApplication:  void  k()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  l()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  run()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  s()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(boolean)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$9:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.services.MediaPlayerService$1:  void  a(java.lang.Throwable)
com.SearingMedia.Parrot.controllers.SaveTrackController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile,java.util.concurrent.ScheduledExecutorService)	com.SearingMedia.Parrot.controllers.SaveTrackController:  void  e(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  o()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  K()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c()
com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.models.databases.TrackDuration:  void  <init>()
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  g(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$8$1:  void  run()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel  a(android.os.Parcel)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel$CREATOR:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  h()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  W()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  java.util.List  a(java.util.List)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  java.util.List  a(android.media.AudioManager)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  b()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(int)	com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  void  a(int)
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a(com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeView)	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  b(android.view.MotionEvent)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  boolean  a(android.view.MotionEvent)
com.SearingMedia.Parrot.thirdparty.widget.TextWatcherAdapter:  void  <init>(android.widget.EditText,com.SearingMedia.Parrot.thirdparty.widget.TextWatcherAdapter$TextWatcherListener)	com.SearingMedia.Parrot.thirdparty.widget.ClearableEditText:  void  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  boolean  t()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  boolean  access$500(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController)	com.SearingMedia.wearexchange.WearExchangeController$VerifyWearableConnectedTask:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController,com.SearingMedia.wearexchange.WearExchangeController$1)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  java.util.concurrent.atomic.AtomicBoolean  f(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.services.AudioProcessingService$prepareProgressListener$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  i()
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$6:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  j()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.support.v4.app.NotificationCompat$WearableExtender  d(android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  android.app.Notification  d(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  g(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  e(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  g()
com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.record.RecordPresenter:  com.SearingMedia.Parrot.controllers.WaveSurfaceController  i(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.record.PauseButton:  void  d()	com.SearingMedia.Parrot.features.record.PauseButton:  void  c()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  b(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.utilities.PhoneUtility:  java.lang.String  a(java.lang.String,android.content.Context)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  ak()	com.SearingMedia.Parrot.controllers.InstallTimingController:  void  a()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  a(java.lang.String,int)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  i()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  d()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(long)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingView)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  l(android.app.Activity)	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  d(android.app.Activity)
com.SearingMedia.parrotlibrary.models.DeviceInformationModel:  void  setModel(java.lang.String)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  com.SearingMedia.parrotlibrary.models.DeviceInformationModel  getDeviceInformationModel()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  boolean  a(android.view.MenuItem)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  G()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment$2:  void  <init>(com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment)	com.SearingMedia.Parrot.features.rateapp.RateOnGooglePlayDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  i()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  j()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(int,int)
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  java.util.List  d(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)
com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.save.SavePresenter)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  o()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  p()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(int,int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(int,int,android.content.Intent)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  com.android.vending.billing.IInAppBillingService  a(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  b(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  doneButtonClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  i(int)	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  java.lang.String  b(int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b(android.widget.SeekBar,int)
com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent:  int  a()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onEvent(com.SearingMedia.Parrot.models.events.AutoPauseTimeThresholdEvent)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(java.io.File,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setDayPadding(java.lang.String)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  K()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$14:  void  run()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  d()	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(java.lang.String,java.lang.String,int)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onSixMonthsClicked()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.parrotlibrary.models.ChangeLogModel:  int  getMinimumSDK()	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  boolean  u()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()
com.SearingMedia.Parrot.ParrotApplication:  void  h()	com.SearingMedia.Parrot.ParrotApplication$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  colorClicked()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$6:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  X()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a_(boolean)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.google.android.gms.drive.DriveFolder$DriveFolderResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$2:  void  onResult(com.google.android.gms.common.api.Result)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  a()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  onResume()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  g()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  a()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  java.lang.String  i(int)	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  g(int)
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  a()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  onDestroyView()
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$9:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController)	com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  h()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onRecordingModeIndicatorClick()	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$4:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)
com.SearingMedia.Parrot.models.ParrotFile:  java.lang.String  g()	com.SearingMedia.Parrot.services.AudioProcessingService:  void  f()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  o()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  b()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  R()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$6:  void  run()
com.SearingMedia.Parrot.controllers.ShareController:  void  a()	com.SearingMedia.Parrot.controllers.ShareController:  void  <init>(java.lang.String,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  g(int)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordAnimationController$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  a()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  b(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$2:  java.lang.Object  call()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  <init>(java.util.List,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$Listener)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  q()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  source(int)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  a(com.google.android.gms.drive.DriveApi$MetadataBufferResult)
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onThreeClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment,android.view.View)
com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding,com.SearingMedia.Parrot.views.components.NumberPadView)	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.NumberPadView,android.view.View)
com.SearingMedia.Parrot.utilities.PiracyUtility:  void  g()	com.SearingMedia.Parrot.utilities.PiracyUtility:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onResume()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding,com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  n(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ae()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$2:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.services.AudioRecordService:  void  b(android.content.Context,com.SearingMedia.parrotlibrary.models.TimedRecording)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  onRecordButtonClicked()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment,java.lang.String)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  int  a(float)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  b()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  s()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  d()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  h()	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$0:  java.lang.Object  call()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  o()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  onGainClicked()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  c(boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.full.RepeatMode,boolean)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  java.util.ArrayList  a(com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$1:  void  b(int)
com.SearingMedia.Parrot.controllers.WaveSurfaceController_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.WaveSurfaceController,android.content.Context)	com.SearingMedia.Parrot.controllers.WaveSurfaceController_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.WaveSurfaceController,android.view.View)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  h()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)
com.SearingMedia.Parrot.views.lists.KeyValueAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  a(java.util.ArrayList)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <clinit>()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  P()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  h()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  c(int)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  a(int)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  d()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b(android.support.v7.app.ActionBarDrawerToggle)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  android.os.Handler  t()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  C()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  a(java.lang.String,java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  <init>(android.content.Context,com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder,int,int)
com.SearingMedia.parrotlibrary.models.ChangeLogModel:  boolean  isProOnly()	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$16:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  a(android.content.Context)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  G()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  m()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.util.List  a()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  c(java.io.File)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  q()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  o()
com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.features.record.RecordFragment  d()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  g()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  C()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.receivers.WidgetReceiver:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.receivers.WidgetReceiver$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  i()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  j()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  e()
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding,com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet,android.view.View)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupView)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView  c(com.SearingMedia.Parrot.features.play.mini.PlayFragment)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$1:  void  a(java.util.List,java.util.Map)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayPresenter)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  t()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  Z()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  m()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$5:  void  onDismiss(android.content.DialogInterface)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile  r()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  q()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  c()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  p()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  i()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  O()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  J()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$17:  void  run()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  S()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.RecordingActionEvent)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackupClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.parrotlibrary.models.RecordingStateModel:  void  <init>(com.SearingMedia.parrotlibrary.models.RecordingStateModel$State)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  onEvent(com.SearingMedia.parrotlibrary.events.GetStatusEvent)
com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar3Touch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$6:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  i(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  f(android.view.View,float)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$attachView$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter,com.SearingMedia.Parrot.features.play.full.FullPlayerView)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.full.FullPlayerView)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsView)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ab()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupService:  void  b(com.SearingMedia.Parrot.features.backup.BackupTask)	com.SearingMedia.Parrot.features.backup.BackupService:  void  b()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String,int)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  m(int)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  a(int)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  d()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)
com.SearingMedia.Parrot.models.events.BackupFinishedEvent:  java.lang.String  a()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)
com.SearingMedia.Parrot.controllers.RateAppController:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.controllers.RateAppController:  void  a(android.content.Context)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  boolean  i()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$initializeWaveForm$1:  void  run()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  d()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter:  void  a(com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyView)
com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.MainActivity:  void  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  android.widget.TextView  z()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
com.SearingMedia.Parrot.features.record.WaveSurfaceView:  void  b()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  onActivityCreated(android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.view.View  q(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  h(android.app.Activity)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  f()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  g(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  b(int)
com.SearingMedia.Parrot.services.MaintenanceService:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate)	com.SearingMedia.Parrot.services.MaintenanceService:  void  e()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  java.util.List  c(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  java.io.File  a(com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)	com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment:  java.io.File  a(com.SearingMedia.Parrot.features.tracks.list.RenameDialogFragment,com.SearingMedia.Parrot.models.ParrotFile,java.lang.String)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  java.lang.String  b(android.content.Context)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onFileTypeTextViewClicked()	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$7:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  <init>(com.SearingMedia.Parrot.controllers.player.AudioPlayerRemote)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  f(boolean)	com.SearingMedia.Parrot.features.record.settings.RecordingEffectsDialogFragment:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  b(java.lang.String,java.lang.String,java.lang.String,long)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  a()	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  setupDialog(android.app.Dialog,int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$3:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.models.SecurePreferences:  byte[]  c(java.lang.String)	com.SearingMedia.Parrot.models.SecurePreferences:  javax.crypto.spec.SecretKeySpec  b(java.lang.String)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.utilities.comparators.DoubleValueComparator:  void  <init>(java.util.Map)	com.SearingMedia.Parrot.utilities.JSONUtility:  java.util.Map  a(org.json.JSONObject)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  onConnected(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  x()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  A()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  a(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  boolean  b(com.SearingMedia.parrotlibrary.models.PendingRecording,java.util.List)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()
com.SearingMedia.Parrot.features.save.SaveActivity:  com.SearingMedia.Parrot.features.save.SavePresenter  m()	com.SearingMedia.Parrot.features.save.SaveActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.controllers.ShareController:  void  k()	com.SearingMedia.Parrot.controllers.ShareController:  void  a()
com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile:  int  c()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  q()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onEnabledCardClicked()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.receivers.WidgetReceiverSmall:  void  a(java.lang.String,android.content.Context)	com.SearingMedia.Parrot.receivers.WidgetReceiverSmall$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  c(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$3:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding,com.SearingMedia.Parrot.features.save.SaveActivity)	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.save.SaveActivity,android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$3:  void  run()
com.SearingMedia.Parrot.features.init.InitController:  void  a(com.SearingMedia.Parrot.interfaces.Callback)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  h()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  long  l()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDestroy()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  c(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  d(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  k()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e()
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  f()	com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordAnimationController$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$4:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  d()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  onPresetsClicked()	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$4:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder,com.SearingMedia.Parrot.models.ParrotFile,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  c(android.support.v7.widget.RecyclerView$ViewHolder,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  boolean  q()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  int  a(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  run()
com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver,android.content.Context,android.content.Intent)	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$timerRunnable$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <init>()
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context,android.app.PendingIntent)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  void  a(com.SearingMedia.parrotlibrary.models.PendingRecording,android.content.Context)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  void  c()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  b(java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  i()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  h()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  <init>(com.SearingMedia.Parrot.interfaces.AudioRecorderListener,com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(boolean)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(boolean)
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onRequestFeatureClicked()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.PauseButton:  void  e()	com.SearingMedia.Parrot.features.record.PauseButton:  void  c()
com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  b(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.receivers.alarm.ScheduledRecordingReceiver:  void  a(android.content.Context,com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(boolean)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  b(boolean)
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.analytics.AnalyticsController,java.lang.String)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  j(int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  d()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startTimeClicked()
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  a()	com.SearingMedia.Parrot.models.databases.ParrotDatabase:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  o()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  <init>(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl,int)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  android.arch.persistence.db.SupportSQLiteOpenHelper  b(android.arch.persistence.room.DatabaseConfiguration)
com.SearingMedia.Parrot.services.MediaPlayerService$MediaPlayerBinder:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  <init>()
com.SearingMedia.Parrot.controllers.RateAppController:  void  l()	com.SearingMedia.Parrot.controllers.RateAppController:  void  a(int)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  q()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  o()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$mediaServiceConnection$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  <init>()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  y()	com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$0:  void  run()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  name(java.lang.String)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.share.details.ShareActivity:  com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter  m()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent:  void  <init>(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDeleteClick()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  o()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  c()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  h()	com.SearingMedia.Parrot.features.main.MainPresenter$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  n()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$1:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  a(int,android.content.Intent,android.app.Activity)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(java.lang.String)
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.io.File  b(android.content.Context,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  java.lang.String  a(android.content.Context,java.lang.String)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  m()	com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  com.google.android.exoplayer2.upstream.DataSource  a(com.google.android.exoplayer2.upstream.FileDataSource)	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer$$Lambda$0:  com.google.android.exoplayer2.upstream.DataSource  a()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  name(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(java.io.File,com.SearingMedia.Parrot.features.backup.cloud.CloudController)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  e(boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.full.RepeatMode,boolean)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$3:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  b(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$resetSeekBar$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  e()
com.SearingMedia.Parrot.features.backup.BackupActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  h(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  android.os.Handler  t()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  C()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  e(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneYearClicked()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a()	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,android.content.Intent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  e()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDraw(android.graphics.Canvas)
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  o()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  f()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  android.preference.ListPreference  e(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onSaveInstanceState(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  onConnected(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  d()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  f()
com.SearingMedia.Parrot.controllers.ShareController:  void  g()	com.SearingMedia.Parrot.controllers.ShareController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  m()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  J()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  e(com.SearingMedia.Parrot.features.record.RecordPresenter)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  java.lang.String  b(java.lang.String)	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  a(com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  g(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingDisplayFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.models.events.CustomGainEvent:  void  a(double)	com.SearingMedia.Parrot.models.events.CustomGainEvent:  void  <init>(double)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  e()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  durationClicked()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  p()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String,int)
com.SearingMedia.Parrot.services.MediaPlayerService$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService,long)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackRenamedEvent)
com.SearingMedia.Parrot.models.RecordingConstants:  java.util.List  a(android.content.Context)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording,android.app.Activity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)	com.SearingMedia.Parrot.services.AudioProcessingService$preloadNextFile$1:  void  a(java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.util.Calendar)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.wdullaer.materialdatetimepicker.time.TimePickerDialog  a(com.wdullaer.materialdatetimepicker.time.TimePickerDialog$OnTimeSetListener)
com.SearingMedia.Parrot.controllers.recorders.FilterController:  double  a(byte[],double,com.SearingMedia.parrotlibrary.models.RecordingModel,int)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  a(byte[],int)
com.SearingMedia.Parrot.features.record.RecordAnimationController$5:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  v()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  c()
com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.io.File,java.io.OutputStream)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.io.File,com.google.android.gms.drive.DriveApi$DriveContentsResult,com.google.android.gms.drive.DriveFolder,int)
com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforePresenter  m()	com.SearingMedia.Parrot.features.phonecalls.promptbefore.RecordPhoneCallBeforeActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double  a(java.util.List,double,double,int[])	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  a(android.support.v7.app.ActionBarDrawerToggle)	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  b()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding,com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)
com.SearingMedia.Parrot.features.record.BigRecordButton$State:  com.SearingMedia.Parrot.features.record.BigRecordButton$State[]  values()	com.SearingMedia.Parrot.features.record.BigRecordButton$1:  void  <clinit>()
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  b()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  onBackPressed()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  boolean  a(com.SearingMedia.Parrot.controllers.recording.ChronometerController)	com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  run()
com.SearingMedia.Parrot.features.record.BigRecordButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.BigRecordButton,android.content.Context)	com.SearingMedia.Parrot.features.record.BigRecordButton_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.BigRecordButton,android.view.View)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(java.lang.String)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  c(java.lang.String)
com.SearingMedia.Parrot.models.events.PlayerStateEvent:  void  <init>(com.SearingMedia.Parrot.services.MediaPlayerService$PlaybackState)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  l()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener$$Lambda$0:  void  run()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomSQLiteQuery)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  io.reactivex.Flowable  a()
com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  c()	com.SearingMedia.Parrot.features.play.full.CircularProgressView:  void  a()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(int,android.content.Context)	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(android.content.Context)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  <init>(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$Listener,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()
com.SearingMedia.Parrot.controllers.recorders.FilterController:  void  onDestroy()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  onDestroy()
com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  boolean  doesDeviceSupportNoiseSuppression()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  D()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  testButtonClicked()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  n()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  b()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ad()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  z()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  d()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  c()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  startDateClicked()
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  d(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float)
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.featurepager.scrollers.CustomDurationScroller:  void  a(double)	com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setScrollDurationFactor(double)
com.SearingMedia.Parrot.receivers.BootReceiver$$Lambda$0:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.receivers.BootReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  a(java.lang.String)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$9:  void  a(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$OnFragmentInteractionListener)
com.SearingMedia.Parrot.controllers.ShareController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.ShareController)	com.SearingMedia.Parrot.controllers.ShareController:  void  i()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()	com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController,java.io.File,com.google.android.gms.drive.DriveApi$DriveContentsResult,com.google.android.gms.drive.DriveFolder,int)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  c(com.google.android.gms.drive.DriveFolder,java.io.File,int,com.google.android.gms.drive.DriveApi$DriveContentsResult)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  b()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(java.lang.String)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  source(int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.features.main.MainActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.main.MainActivity,com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.main.MainActivity:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.view.ActionMode)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  M()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMainFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  build()	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  b()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  void  b()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  java.lang.String  b(android.content.Context)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  G()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()
com.SearingMedia.Parrot.ParrotApplication:  void  c()	com.SearingMedia.Parrot.features.main.MainActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b(android.os.Bundle)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment,java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(java.lang.String,boolean)
com.SearingMedia.Parrot.features.record.RecordAnimationController$9:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  a()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  g()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(boolean)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  e(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,android.content.Intent)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  getFullMonthAndYear(java.util.Date)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  java.lang.String  a(java.util.Date)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$1:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$updateSeekBar$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,long,long)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(long,long)
com.SearingMedia.Parrot.features.init.ChangeLogUtil$1$1:  void  <init>(com.SearingMedia.Parrot.features.init.ChangeLogUtil$1)	com.SearingMedia.Parrot.features.init.ChangeLogUtil$1:  void  onDataChange(com.google.firebase.database.DataSnapshot)
com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.features.play.mini.PlayFragment,int,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  a(com.SearingMedia.Parrot.models.ParrotFile,int)
com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  <init>(com.SearingMedia.Parrot.models.DrawerConfigurationModel)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.record.BigRecordButton:  int  getReadyToRecordMicColor()	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  b(boolean)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  f()	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.services.AudioProcessingService$FullPlayerServiceBinder:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  <init>()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  int  J()	com.SearingMedia.Parrot.utilities.files.NewTrackUtility:  java.lang.String  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  q()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(android.content.pm.ActivityInfo)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onAllFilesClicked(android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onAllFilesClicked()
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$5:  void  <init>(com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl,android.arch.persistence.room.RoomSQLiteQuery)	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl:  io.reactivex.Flowable  a(long)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  float  a(int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder)	com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  F()
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  a(java.util.List)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment,android.view.View)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  b(boolean)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  p()
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  boolean  a(android.view.MotionEvent)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  boolean  onTouchEvent(android.view.MotionEvent)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  n()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltipUtils:  void  a(android.view.View,int)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  java.lang.String  s()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.features.main.MainPresenter:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  b(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter$1:  void  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  e()	com.SearingMedia.Parrot.controllers.WaveSurfaceController:  void  c()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setAmplitudes(int[])	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  d()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  w(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$7:  void  onGlobalLayout()
com.SearingMedia.Parrot.features.share.list.ShareFragment:  com.SearingMedia.Parrot.features.share.list.ShareFragmentPresenter  a()	com.SearingMedia.Parrot.features.share.list.ShareFragment:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  c()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onAllFilesClicked(android.view.View)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileDescription$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,java.lang.String)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onEffectsClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  com.SearingMedia.Parrot.controllers.di.PersistentStorageController  c(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  run()
com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileProgress:  double  a()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  onEvent(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileProgress)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  createFromParcel(android.os.Parcel)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  int  k()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(boolean)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(boolean)
com.SearingMedia.Parrot.controllers.RateAppController:  void  h()	com.SearingMedia.Parrot.controllers.RateAppController:  void  <init>(android.support.v4.app.FragmentActivity)
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setInProgress(boolean)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setFromPendingRecording(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  boolean  b()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  boolean  a(double)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  a(com.SearingMedia.Parrot.features.play.full.RepeatMode,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  b(boolean)
com.SearingMedia.Parrot.views.DurationPicker:  java.lang.String  getFormattedDuration()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$8:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  c(double)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  double  b(byte[],int)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  y()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  y()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a()
com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  java.lang.String  a(android.content.Context)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  com.SearingMedia.Parrot.models.ParrotFile  a(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$1:  void  run()
com.SearingMedia.Parrot.models.ParrotFile:  java.io.File  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  boolean  a(java.io.File,java.io.File)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)
com.SearingMedia.Parrot.views.components.QuickSettingsTile:  com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel  a(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  java.util.List  a()	com.SearingMedia.parrotlibrary.databases.ScheduledRecordingsDao_Impl$4:  java.lang.Object  call()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$5:  java.lang.Object  call()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  p()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  E()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  j()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  j()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  sampleRate(java.lang.String)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder  isBluetoothPreferred(boolean)	com.SearingMedia.Parrot.services.AudioRecordService:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  l()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  H()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  i()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  b(int)
com.SearingMedia.Parrot.views.components.RatingView:  void  setListener(com.SearingMedia.Parrot.views.components.RatingView$Listener)	com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  java.lang.String  e()	com.SearingMedia.Parrot.services.AudioProcessingService$singleFileObserver$1:  void  a(com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileResult)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  j()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,boolean)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.main.PermissionDeniedDialogFragment:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  c(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$2:  void  onClick(android.view.View)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(byte[],long)	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  a()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  j()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getMaxOffset()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  p()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  b()
com.SearingMedia.Parrot.features.backup.BackupService:  void  a(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onPausePlayClick()
com.SearingMedia.Parrot.utilities.BatteryUtility:  boolean  a()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  a()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  t()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  d()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  onEventMainThread(com.SearingMedia.Parrot.models.events.BackupFinishedEvent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  m()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  d()
com.SearingMedia.parrotlibrary.models.TimedRecording$1:  com.SearingMedia.parrotlibrary.models.TimedRecording[]  newArray(int)	com.SearingMedia.parrotlibrary.models.TimedRecording$1:  java.lang.Object[]  newArray(int)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$9:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  j()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(java.util.List,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent,java.util.List,int)
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.features.save.SavePresenter:  java.lang.String  b(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  float  c(int)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$2:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  e(int)
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyController:  void  c()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  onOneYearClicked()
com.SearingMedia.Parrot.models.databases.ParrotDatabase:  kotlin.Lazy  n()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  a()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  e(android.app.Activity)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ac()
com.SearingMedia.Parrot.services.MaintenanceService:  void  d()	com.SearingMedia.Parrot.services.MaintenanceService:  int  onRunTask(com.google.android.gms.gcm.TaskParams)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(double)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  b(double)
com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController,java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.CloudUploadController:  void  d(java.lang.String)
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(android.media.MediaCodec,android.media.MediaCodec$BufferInfo,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$TrackIndex,int)
com.SearingMedia.Parrot.controllers.upgrade.ProController:  void  g()	com.SearingMedia.Parrot.controllers.upgrade.ProController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  b(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.ParrotApplication:  void  k()
com.SearingMedia.Parrot.services.MaintenanceService:  void  c()	com.SearingMedia.Parrot.services.MaintenanceService:  int  onRunTask(com.google.android.gms.gcm.TaskParams)
com.SearingMedia.Parrot.utilities.SpannableUtils:  android.text.SpannableString  b(java.lang.String,java.lang.String,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  b()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  void  a(android.preference.Preference)
com.SearingMedia.Parrot.features.base.InformationDialogFragment:  int  b()	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.CircularProgressView$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$initializeButtons$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  d()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  b(boolean)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(boolean)
com.SearingMedia.Parrot.utilities.ToastFactory:  void  a(android.view.View,java.lang.String,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  e(java.lang.String)
com.SearingMedia.Parrot.utilities.PrimitiveUtility:  int  b(int,int)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  a(android.graphics.Canvas,int)
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController  a(com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment)	com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  i()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  g(int)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$5:  void  b(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  d(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingQualityFragment:  void  c()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  e()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.TrackDeletedEvent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformDelegate)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  <init>(android.content.Context,android.util.AttributeSet)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  saveTrack()	com.SearingMedia.Parrot.features.save.SaveActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.save.SaveActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent:  int  a()	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onEvent(com.SearingMedia.Parrot.models.events.AutoPauseGainThresholdEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(java.util.List)	com.SearingMedia.Parrot.features.tracks.list.DeleteDialogFragment:  void  a(android.support.v4.app.DialogFragment)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  e()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  b()
com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel:  java.lang.String[]  d()	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  java.lang.String[]  getValues()
com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.Parrot.models.databases.TrackDuration)	com.SearingMedia.Parrot.models.databases.TrackDurationDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.utilities.RenameUtility:  void  b()	com.SearingMedia.Parrot.features.settings.ConvertAACDialogPreference:  void  onClick(android.content.DialogInterface,int)
com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setName(java.lang.String)	com.SearingMedia.Parrot.features.share.list.ScheduledCardView:  void  setFromPendingRecording(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  a(boolean)	com.SearingMedia.Parrot.models.events.TrackRenamedEvent:  void  <init>(boolean,com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  a()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity$3:  void  <init>(com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  u()
com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder:  java.lang.String  access$100(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)	com.SearingMedia.parrotlibrary.models.OnDemandRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.OnDemandRecording$Builder)
com.SearingMedia.Parrot.features.record.RecordFragment:  com.SearingMedia.Parrot.features.record.RecordPresenter  a()	com.SearingMedia.Parrot.features.record.RecordFragment:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  f()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.features.tracks.list.TrackListView)
com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  a(android.widget.SeekBar,int)	com.SearingMedia.Parrot.features.play.mini.EffectsDialogFragment:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
com.SearingMedia.Parrot.utilities.RepairUtility:  void  f(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  s()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  c()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  c()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  k()
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  f()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  j()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity$1:  void  <init>(com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  a(java.util.ArrayList)
com.SearingMedia.parrotlibrary.models.TimedRecording:  void  setFormat(java.lang.String)	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  B()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  F()
com.SearingMedia.Parrot.controllers.theme.DarkThemeController:  void  a(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter$TrackListFooterHolder:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter,android.view.View)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(long)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  l()
com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  f()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  m()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  a()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.models.RowModel:  void  <init>(int,java.lang.String,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.models.RowModel  g(int)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  b()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  w()
com.SearingMedia.Parrot.features.fullplayer.soundfile.SoundFileProgress:  void  <init>(double)	com.SearingMedia.Parrot.receivers.EventReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  com.SearingMedia.parrotlibrary.models.ChangeLogModel  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.models.events.TrackListChangedEvent:  int  a()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  a(com.SearingMedia.Parrot.models.events.TrackListChangedEvent,java.util.List,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  g()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onRenameClick()
com.SearingMedia.Parrot.models.ParrotFileList:  com.SearingMedia.Parrot.models.ParrotFileList  a(java.util.List)	com.SearingMedia.Parrot.utilities.files.ParrotFileUtility:  void  a(java.util.List)
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListFragment,int)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  c(int)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.services.BootJobIntentService:  void  a(android.content.Context)	com.SearingMedia.Parrot.services.BootJobIntentService:  void  b(android.content.Context)
com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment$initializeButtons$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment)	com.SearingMedia.Parrot.features.play.full.modals.FullPlayerOnboardingDialogFragment:  void  e()
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  c()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  f()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  a(boolean,com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile,com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile$ProgressListener,com.SearingMedia.Parrot.interfaces.Callback)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  getFullMonthName(java.util.Date)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter:  java.lang.String  a(java.util.Date)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter  m()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(java.lang.Object)
com.SearingMedia.Parrot.models.RecordingConstants:  java.lang.String  b(int,android.content.Context)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(android.support.v4.app.DialogFragment)	com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  a(com.afollestad.materialdialogs.MaterialDialog)
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding$3:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding,com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog)	com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog_ViewBinding:  void  <init>(com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog,android.view.View)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  p()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  i()
com.SearingMedia.Parrot.views.lists.KeyValueAdapter$ViewHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.views.lists.KeyValueAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)
com.SearingMedia.Parrot.receivers.EventReceiver:  void  a(java.lang.String)	com.SearingMedia.Parrot.receivers.EventReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  d(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  g()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  e(java.lang.String)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$3:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  int  convertMillisecsToMonthNumber(long)	com.SearingMedia.Parrot.models.ParrotFile:  void  b(long)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  d()	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  void  g(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.TextView  n()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileDescription$1:  void  run()
com.SearingMedia.Parrot.controllers.TrackManagerController:  com.SearingMedia.Parrot.models.ParrotFileList  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$6:  java.lang.Object  call()
com.SearingMedia.Parrot.features.rateapp.DoYouLikeAppDialogFragment:  void  a(int)	com.SearingMedia.Parrot.views.components.RatingView:  void  f()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.cloud.CloudController,java.io.File)	com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$2:  void  run()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$10:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  m()
com.SearingMedia.Parrot.controllers.ShareController$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.controllers.ShareController)	com.SearingMedia.Parrot.controllers.ShareController:  void  j()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showFastForwardButton$1:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  b()
com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  a(com.SearingMedia.Parrot.models.ShareObject,com.SearingMedia.Parrot.interfaces.OnShareClickListener)	com.SearingMedia.Parrot.features.share.details.ShareProvidersAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder,com.SearingMedia.Parrot.models.ShareGroupModel)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  java.util.List  b(android.media.AudioManager)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallAudio:  java.util.List  a(android.media.AudioManager)
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  f(android.view.View,float)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  a(android.view.View,float)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$2:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  c()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$1:  void  a(int,java.lang.String)	com.SearingMedia.Parrot.views.components.QuickSettingsTile$1:  boolean  a(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  a(int)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  a(int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingMiscellaneousFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(com.SearingMedia.Parrot.models.PendingPermissionsModel)	com.SearingMedia.Parrot.models.PendingPermissionsModel:  void  a()
com.SearingMedia.Parrot.features.record.BottomBarButton:  void  f()	com.SearingMedia.Parrot.features.record.BottomBarButton:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  U()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  ad()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(long,com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  s()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  c(java.lang.String)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(java.lang.Exception)
com.SearingMedia.Parrot.controllers.player.MediaAudioPlayer:  void  onDestroy()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  A()
com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent:  com.SearingMedia.Parrot.models.ParrotFile  a()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  onEvent(com.SearingMedia.Parrot.models.events.ShowDeleteDialogEvent)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  c(long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  b(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  boolean  c(com.SearingMedia.parrotlibrary.models.RecordingModel)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  com.SearingMedia.Parrot.controllers.recorders.AudioRecorder  b(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  <init>(android.arch.persistence.room.RoomDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao  l()
com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  void  <init>(android.content.Context)	com.SearingMedia.Parrot.controllers.analytics.AnalyticsController:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$4:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  ac()	com.SearingMedia.Parrot.features.record.RecordPresenter:  boolean  L()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment$3:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSourceFragment:  void  d()
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(int)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewModel:  java.lang.String  b()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltipUtils:  int  a(int)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip  a()
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  b(java.lang.String)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  java.lang.String  e()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$1:  void  run()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallDispatcher:  void  b(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  g(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  h()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  h()
com.SearingMedia.Parrot.controllers.notifications.NotificationController:  void  a(com.SearingMedia.Parrot.ParrotApplication)	com.SearingMedia.Parrot.ParrotApplication:  void  k()
com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  <init>(android.content.Context,com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector$OnScaleDragGestureListener)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  l()
com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.CloudController,java.io.File)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(java.io.File,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$5:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  f()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  a(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter$4:  void  run()
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterPresenter:  void  b()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onNoButtonClicked()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  <init>(com.SearingMedia.Parrot.controllers.player.AudioPlayerRemote)	com.SearingMedia.Parrot.services.MediaPlayerService:  void  z()
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  b()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String,int)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$3:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  a(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFling$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(float,float)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  onDestroy()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double  a(double)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.utilities.files.FileSizeUtility:  long  a(int,int)	com.SearingMedia.Parrot.features.record.RecordPresenter$2:  void  a()
com.SearingMedia.Parrot.features.record.WaveSurfaceView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.content.Context)	com.SearingMedia.Parrot.features.record.WaveSurfaceView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.WaveSurfaceView,android.view.View)
com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding$4:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding,com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,android.view.View)
com.SearingMedia.Parrot.views.components.CustomFontTextView:  boolean  a(java.lang.String)	com.SearingMedia.Parrot.views.components.CustomFontTextView:  void  a(android.util.AttributeSet)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  android.graphics.drawable.Drawable  getPauseDrawable()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$showPauseButton$1:  void  run()
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.WaveSurfaceView)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  c()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  h()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  sourceClicked()
com.SearingMedia.Parrot.utilities.RepairUtility:  void  c(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.utilities.RepairUtility:  void  e(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  org.json.JSONObject  i(java.lang.String)	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  org.json.JSONObject  h()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  g(com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  com.SearingMedia.Parrot.services.MediaPlayerService  a(com.SearingMedia.Parrot.features.play.mini.PlayPresenter,com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding$2:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding,com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView,android.view.View)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController$$Lambda$5:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController)	com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  void  l()
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  d()	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  void  onEvent(com.SearingMedia.Parrot.models.events.RecordingStateEvent)
com.SearingMedia.Parrot.models.RecordingConstants:  int  a(int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  A()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,java.lang.String)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  w()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  t()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  java.lang.String  av()	com.SearingMedia.Parrot.services.MaintenanceService:  void  b(com.SearingMedia.Parrot.controllers.di.PersistentStorageDelegate)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  k()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  m()
com.SearingMedia.parrotlibrary.models.ChangeLogModel:  java.lang.String  getChangeLog()	com.SearingMedia.Parrot.features.main.ReleaseNotesBottomSheet:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAlertsFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  g()	com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onZipClicked(android.view.View)
com.SearingMedia.Parrot.features.main.MainActivity:  void  v()	com.SearingMedia.Parrot.features.main.MainActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recording.ChronometerController:  void  a(long)	com.SearingMedia.Parrot.controllers.recording.ChronometerController$ChronoTimerTask:  void  run()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  <init>(boolean,boolean)
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  e(android.view.View)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  t()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  F()
com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  com.SearingMedia.Parrot.models.UpgradeFeatureModel  w()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  b(com.google.firebase.database.DataSnapshot)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  a(com.google.firebase.database.DataSnapshot)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureDialogFragment:  void  <clinit>()
com.SearingMedia.Parrot.features.main.MainPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.main.MainPresenter)	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.design.widget.TabLayout$OnTabSelectedListener  b()
com.SearingMedia.Parrot.utilities.BatteryUtility$Companion:  boolean  a()	com.SearingMedia.Parrot.utilities.BatteryUtility:  boolean  a()
com.SearingMedia.Parrot.views.components.TimerInputView:  void  a(int)	com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  void  a(int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  z()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  p()
com.SearingMedia.wearexchange.WearExchangeController$1:  void  <init>(com.SearingMedia.wearexchange.WearExchangeController,java.lang.String,byte[])	com.SearingMedia.wearexchange.WearExchangeController:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  void  r()
com.SearingMedia.Parrot.services.AudioProcessingService$loadNewFile$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  void  c(java.lang.String)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  a(com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter,com.SearingMedia.Parrot.services.MediaPlayerService)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter$mediaServiceConnection$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  d(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.lang.String)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder  a(android.view.ViewGroup,int)	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  b(android.view.ViewGroup,int)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  c()	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a()
com.SearingMedia.Parrot.models.events.RecordingActionEvent:  void  a(int)	com.SearingMedia.Parrot.models.events.RecordingActionEvent:  void  <init>(int)
com.SearingMedia.Parrot.features.main.MainPresenter:  void  m()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  boolean  b(android.preference.Preference,java.lang.Object)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$$Lambda$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.backup.BackupTask:  void  <init>(java.lang.String,java.lang.String,com.SearingMedia.Parrot.models.ParrotFileList,java.lang.String)	com.SearingMedia.Parrot.features.backup.BackupService:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.save.SaveActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile,android.app.Activity)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet$2:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet)	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  c()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  b(com.SearingMedia.Parrot.controllers.upgrade.ProValidationController)	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  d()	com.SearingMedia.Parrot.controllers.recording.PreRecordController:  void  a()
com.SearingMedia.parrotlibrary.models.ChangeLogModel:  void  <init>(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.ChangeLogModel$1:  com.SearingMedia.parrotlibrary.models.ChangeLogModel  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$initialize$1:  void  run()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  onDestroy()	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  i()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  d()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  java.lang.String  access$000(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  a(android.widget.SeekBar,int)	com.SearingMedia.Parrot.features.record.settings.RecordingGainDialogFragment:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment:  void  b(com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingSavingFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  a(com.SearingMedia.Parrot.controllers.di.PersistentStorageController)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  a(com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  g()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(com.SearingMedia.Parrot.features.save.SaveView)
com.SearingMedia.Parrot.services.MediaPlayerService:  java.lang.String  e()	com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  k()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  A()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  p()
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  n()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  l()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyPresenter  m()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.features.save.SavePresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.save.SavePresenter)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  d()
com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  onFeedbackClicked()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity_ViewBinding$2:  void  doClick(android.view.View)
com.SearingMedia.Parrot.utilities.ArrayUtility:  boolean  b(java.lang.Object[],java.lang.Object[])	com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  boolean  c()
com.SearingMedia.Parrot.controllers.ShareController:  android.content.Intent  b(java.lang.String)	com.SearingMedia.Parrot.controllers.ShareController:  void  e()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  b(int,int,android.content.Intent)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.controllers.RateAppController:  void  k()	com.SearingMedia.Parrot.controllers.RateAppController:  void  a(int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.parrotlibrary.models.TimeModel:  long  getTime()	com.SearingMedia.Parrot.controllers.recording.ChronometerController:  long  h()
com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl:  android.arch.persistence.db.SupportSQLiteDatabase  a(com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl,android.arch.persistence.db.SupportSQLiteDatabase)	com.SearingMedia.Parrot.models.databases.ParrotDatabase_Impl$1:  void  c(android.arch.persistence.db.SupportSQLiteDatabase)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  h()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
com.SearingMedia.Parrot.features.save.SavePresenter:  void  b(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  backupToGoogleDriveToggled(boolean)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  o()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  e()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  N()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  o()
com.SearingMedia.Parrot.controllers.permissions.PermissionsController:  java.lang.String[]  f(android.app.Activity)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  e()
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar3Click()	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  w()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.main.MainActivity:  android.support.v4.view.ViewPager  s()	com.SearingMedia.Parrot.features.main.MainPresenter:  android.support.v4.view.ViewPager  g()
com.SearingMedia.Parrot.models.events.RecordingNotificationEvent:  android.app.Notification  b()	com.SearingMedia.Parrot.services.AudioRecordService:  void  onEventBackgroundThread(com.SearingMedia.Parrot.models.events.RecordingNotificationEvent)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  int  b()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  int  i()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  a(int)	com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setParrotFile(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  a()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  O()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(float,float)	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  a(float,float)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  i()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  settingsClicked()
com.SearingMedia.Parrot.services.AudioRecordService:  void  c(android.content.Context)	com.SearingMedia.Parrot.services.AudioRecordService:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher,android.content.Context)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  c(java.lang.String,int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  b(java.lang.String,int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  boolean  c(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  b(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.util.List  b()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(float)	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  boolean  onTouchEvent(android.view.MotionEvent)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDetailsClick()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsShareFragment$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsShareFragment)	com.SearingMedia.Parrot.features.settings.SettingsShareFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter$3:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  S()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController$$Lambda$2:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.scheduled.ScheduledRecordingController:  io.reactivex.Maybe  a(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController,java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$3:  void  run()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  j()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  b(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  O()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$10:  void  run()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding$7:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding,com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity,android.view.View)
com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  b(com.SearingMedia.parrotlibrary.models.ChangeLogModel)	com.SearingMedia.Parrot.features.init.ChangeLogUtil:  boolean  a(com.SearingMedia.parrotlibrary.models.ChangeLogModel)
com.SearingMedia.Parrot.features.backup.BackupService:  void  d(boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,boolean,int)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  n()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  c()
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl$2:  void  a(android.arch.persistence.db.SupportSQLiteStatement,java.lang.Object)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onTrackClick()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity_ViewBinding$7:  void  doClick(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  float  k(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  double  a(double,int[])	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  boolean  k()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(android.content.Intent)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  com.SearingMedia.parrotlibrary.models.RecordedPhoneCall  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.RecordedPhoneCall$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.models.events.BackupFinishedEvent:  void  <init>(java.lang.String,boolean,int)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(java.lang.String,boolean,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$7:  void  <init>(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  f(java.lang.String)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  H()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)
com.SearingMedia.Parrot.utilities.AESUtility:  javax.crypto.spec.SecretKeySpec  a(java.lang.String)	com.SearingMedia.Parrot.utilities.AESUtility:  java.lang.String  a(java.lang.String,java.lang.String)
com.SearingMedia.Parrot.controllers.recorders.BluetoothAudioRecorder:  void  b()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(java.lang.String)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$6:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  b(float,float)	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  p()
com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  b(java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayFragment$$Lambda$0:  void  run()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  p()	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  a()
com.SearingMedia.Parrot.controllers.recording.PostRecordController:  void  c()	com.SearingMedia.Parrot.controllers.recording.PostRecordController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType:  com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType[]  values()	com.SearingMedia.Parrot.controllers.encoders.EncoderTask$1:  void  <clinit>()
com.SearingMedia.Parrot.features.record.RecordAnimationController$7:  void  <init>(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  b()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(com.SearingMedia.Parrot.features.save.SaveView)	com.SearingMedia.Parrot.features.save.SavePresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  C()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  u()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b()	com.SearingMedia.Parrot.features.play.mini.PlayFragment:  void  onViewCreated(android.view.View,android.os.Bundle)
com.SearingMedia.Parrot.features.scheduled.add.SimpleIconCheckedAdapter:  void  <init>(android.view.LayoutInflater,java.util.ArrayList)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  a(java.util.ArrayList,int)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  java.util.ArrayList  a(int[])	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  g()
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.main.MainActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.features.record.RecordPresenter:  void  h(com.SearingMedia.Parrot.features.record.RecordPresenter)	com.SearingMedia.Parrot.features.record.RecordPresenter$4:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  a(com.SearingMedia.Parrot.features.record.RecordFragment)	com.SearingMedia.Parrot.features.record.RecordFragment$2:  void  onClick(android.view.View)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  onConnectClicked(android.view.View)	com.SearingMedia.Parrot.features.backup.CloudBackupCardView:  void  onConnectClicked()
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  c()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarPresenter:  void  g()
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  o()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  b()
com.SearingMedia.Parrot.features.backup.BackupService:  void  b(android.content.Intent)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(android.content.Intent)
com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  g()	com.SearingMedia.Parrot.controllers.recorders.RawAudioRecorder:  void  e()
com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  s()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  b(com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$1:  void  <init>(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  d(java.lang.String,int)
com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$1:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService,java.lang.String)	com.SearingMedia.Parrot.services.AudioProcessingService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  b()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  f()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  aD()	com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  n(int)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(float,float)	com.SearingMedia.Parrot.features.play.full.waveform.ScaleDragDetector:  void  b(int,android.view.MotionEvent)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder,com.SearingMedia.parrotlibrary.models.PhoneCallRecording$1)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  boolean  v(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$7:  void  onGlobalLayout()
com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  u()	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(com.SearingMedia.Parrot.models.ParrotFile,com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.models.ParrotFileList:  java.util.List  b(com.SearingMedia.Parrot.models.ParrotFileList,com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  com.SearingMedia.Parrot.models.events.TrackListChangedEvent  b(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  int  g()	com.SearingMedia.Parrot.controllers.drawer.DrawerController:  void  e()
com.SearingMedia.Parrot.controllers.theme.LightThemeController:  void  c(android.widget.ImageView)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  B()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  b(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(android.content.pm.ActivityInfo)
com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet:  void  onDeleteClick()	com.SearingMedia.Parrot.features.tracks.list.TrackDetailsOverflowBottomSheet_ViewBinding$5:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.record.RecordButton$2:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.models.events.PlaybackPitchChangedEvent:  void  <init>(float)	com.SearingMedia.Parrot.features.play.full.SpeedDialogFragment:  void  onStopTrackingTouch(android.widget.SeekBar)
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  k()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(int)
com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  com.SearingMedia.parrotlibrary.models.OnDemandRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.OnDemandRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.record.RecordAnimationController:  void  a()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b()
com.SearingMedia.Parrot.receivers.WidgetReceiver$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.receivers.WidgetReceiver,java.lang.String,android.content.Context)	com.SearingMedia.Parrot.receivers.WidgetReceiver:  void  onReceive(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  boolean  h()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  boolean  i()
com.SearingMedia.Parrot.ParrotApplication:  void  k()	com.SearingMedia.Parrot.ParrotApplication:  void  onCreate()
com.SearingMedia.Parrot.features.main.MainActivity:  void  p()	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainView)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2$1:  void  <init>(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2:  void  onClick(android.view.View)
com.SearingMedia.Parrot.models.viewholders.share.ShareHolder:  void  <init>(android.view.View)	com.SearingMedia.Parrot.models.viewholders.share.ShareStandardItemHolder:  void  <init>(android.view.View,com.SearingMedia.Parrot.models.ShareGroupModel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackProgress$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$MediaPlayerState,long)
com.SearingMedia.Parrot.controllers.upgrade.InAppPurchaseController:  com.SearingMedia.Parrot.models.billing.InAppBillingSkuDetails  f()	com.SearingMedia.Parrot.features.upgrade.subscribers.ProOnlyActivity:  void  p()
com.SearingMedia.Parrot.models.DrawerConfigurationModel:  void  a(com.SearingMedia.Parrot.features.base.BaseActivity)	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.models.events.TrackDeletedEvent:  void  a(java.lang.String)	com.SearingMedia.Parrot.models.events.TrackDeletedEvent:  void  <init>(java.lang.String)
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  f()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onBackupClick()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  S()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$5:  void  run()
com.SearingMedia.Parrot.features.record.RecordAnimationController:  com.SearingMedia.Parrot.features.record.BottomBarButton  h(com.SearingMedia.Parrot.features.record.RecordAnimationController)	com.SearingMedia.Parrot.features.record.RecordAnimationController$10:  void  a(android.animation.Animator)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  b()	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper,long,java.lang.String)	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a(long,java.lang.String)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  android.view.ViewTreeObserver$OnGlobalLayoutListener  n(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$5:  void  onGlobalLayout()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  c()	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView$spinPausePlayButton$1:  void  a(android.animation.Animator)	com.SearingMedia.Parrot.utilities.AnimationEndListener:  void  onAnimationEnd(android.animation.Animator)
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$4:  void  run()
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(java.io.File)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  m()
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  f()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePlayingState$1:  void  run()
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  java.lang.String  c()	com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  p()
com.SearingMedia.Parrot.features.record.BigRecordButton:  void  d()	com.SearingMedia.Parrot.features.record.BigRecordButton:  void  c()
com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  boolean  i()	com.SearingMedia.Parrot.controllers.upgrade.ProValidationController:  void  a(int)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(com.SearingMedia.Parrot.features.share.details.ShareActivityView)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  a(com.hannesdorfmann.mosby.mvp.MvpView)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  <init>(com.SearingMedia.Parrot.controllers.encoders.AudioEncoder,byte[],long,com.SearingMedia.Parrot.controllers.encoders.AudioEncoder$EncoderTaskType,com.SearingMedia.Parrot.controllers.encoders.EncoderTask$Listener)	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  a(byte[],long)
com.SearingMedia.Parrot.services.AudioProcessingService$onStartCommand$2:  void  <init>(com.SearingMedia.Parrot.services.AudioProcessingService)	com.SearingMedia.Parrot.services.AudioProcessingService:  int  onStartCommand(android.content.Intent,int,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(double)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController$2:  void  run()
com.SearingMedia.Parrot.models.ShareObject:  void  a(android.content.pm.ActivityInfo)	com.SearingMedia.Parrot.models.ShareObject:  void  <init>(android.content.pm.ActivityInfo,android.content.pm.PackageManager)
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$1:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  c(android.content.Context)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updatePlaybackFromUserInput$1:  void  <init>(com.SearingMedia.Parrot.features.play.full.FullPlayerActivity,long,long,long)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  a(long,long,long,long)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  a(com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  b(int,java.lang.String)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$0:  void  a(int,java.lang.String)
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  a(long)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$4:  void  run()
com.SearingMedia.Parrot.features.fullplayer.soundfile.AudioDescriptorFile:  void  <init>(java.util.List,int,int,int)	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  n()
com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher$$Lambda$3:  void  <init>(com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.MainActivityResultDispatcher:  void  a(android.content.Intent)
com.SearingMedia.parrotlibrary.databases.RecordedPhoneCallDao_Impl:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall[])	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.RecordedPhoneCall)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  int  C()	com.SearingMedia.Parrot.features.base.BaseActivity:  void  b(boolean)
com.SearingMedia.Parrot.controllers.InstallTimingController:  void  a()	com.SearingMedia.Parrot.controllers.InstallTimingController:  void  <init>()
com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  b(java.lang.String)	com.SearingMedia.Parrot.features.backup.cloud.BackupToDeviceController:  void  a(int,int,android.content.Intent)
com.SearingMedia.Parrot.models.events.RecordingNotificationEvent:  int  a()	com.SearingMedia.Parrot.services.AudioRecordService:  void  onEventBackgroundThread(com.SearingMedia.Parrot.models.events.RecordingNotificationEvent)
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  z()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  r()
com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment:  com.SearingMedia.Parrot.controllers.analytics.AnalyticsController  a(com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment)	com.SearingMedia.Parrot.features.settings.SettingsPlaybackFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  k()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  deleteButtonClicked()
com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment:  android.preference.SwitchPreference  e(com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingEffectsFragment$2:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(java.io.File)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  b()	com.SearingMedia.Parrot.features.record.settings.SilenceDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.parrotlibrary.models.TimedRecording$1:  com.SearingMedia.parrotlibrary.models.TimedRecording  createFromParcel(android.os.Parcel)	com.SearingMedia.parrotlibrary.models.TimedRecording$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingPresenter  m()	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder  minimumVolumeLevel(int)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  com.SearingMedia.parrotlibrary.models.PhoneCallRecording  r()
com.SearingMedia.Parrot.controllers.TestingController:  void  d(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController$$Lambda$0:  void  run()
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  boolean  h()	com.SearingMedia.Parrot.services.MediaPlayerService:  boolean  n()
com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  com.SearingMedia.Parrot.models.databases.ParrotDatabase  b()	com.SearingMedia.Parrot.models.databases.ParrotDatabase$Companion$database$2:  java.lang.Object  a()
com.SearingMedia.Parrot.controllers.recorders.helpers.AudioFocusHelper:  boolean  a()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  s()	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onDontShowGrantPermissionButtonClicked()
com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil$3:  void  <init>(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference,java.lang.String)	com.SearingMedia.Parrot.features.init.PhoneCallSourceUtil:  void  f(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ScheduledFuture,com.google.firebase.database.DatabaseReference)
com.SearingMedia.Parrot.models.ParrotFileList:  void  a(boolean)	com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter$1:  void  run()
com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment$2:  void  <init>(com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment)	com.SearingMedia.Parrot.features.rateapp.FeedbackDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder:  void  b()	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.base.InformationDialogFragment$1:  void  <init>(com.SearingMedia.Parrot.features.base.InformationDialogFragment)	com.SearingMedia.Parrot.features.base.InformationDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
com.SearingMedia.Parrot.controllers.phonecalls.ParrotPhoneStateListener:  void  a(int)	com.SearingMedia.Parrot.receivers.PhoneStateBroadcastReceiver:  void  a(android.content.Context,android.content.Intent)
com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment$4:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment)	com.SearingMedia.Parrot.features.settings.SettingsRecordingAutopauseFragment:  void  e()
com.SearingMedia.Parrot.features.backup.BackupActivity:  void  u()	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  p()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter$TrackListFooterHolder:  void  <init>(com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter,android.view.View)	com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  android.support.v7.widget.RecyclerView$ViewHolder  d(android.view.ViewGroup,int)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  c(boolean)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.record.RecordFragment:  boolean  ac()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  G()
com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$15:  void  <init>(com.SearingMedia.Parrot.features.record.RecordFragment,java.lang.String)	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  android.content.Intent  u()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  f()
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(int,java.lang.String[],int[])	com.SearingMedia.Parrot.features.main.MainActivity:  void  onRequestPermissionsResult(int,java.lang.String[],int[])
com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar2Touch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$4:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  long  getRandomTimeTomorrow(int,int,java.util.Calendar)	com.SearingMedia.parrotlibrary.utilities.TimeUtility:  long  getRandomTimeOfDayInMs(int,int)
com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)	com.SearingMedia.Parrot.controllers.TestingController:  void  a(android.content.Context)
com.SearingMedia.Parrot.models.ScreenshotModel:  void  <init>(android.os.Parcel)	com.SearingMedia.Parrot.models.ScreenshotModel$1:  com.SearingMedia.Parrot.models.ScreenshotModel  a(android.os.Parcel)
com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  b(android.view.View)	com.SearingMedia.featurepager.transformers.ViewPageTransformer:  void  f(android.view.View,float)
com.SearingMedia.Parrot.features.backup.BackupPresenter$$Lambda$0:  void  <init>(com.SearingMedia.Parrot.features.backup.BackupPresenter)	com.SearingMedia.Parrot.features.backup.BackupPresenter:  void  g()
com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController$$Lambda$2:  void  <init>(com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController,com.SearingMedia.Parrot.models.ParrotFileList)	com.SearingMedia.Parrot.controllers.drawer.DrawerHeaderController:  void  f(com.SearingMedia.Parrot.models.ParrotFileList)
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  boolean  F()	com.SearingMedia.Parrot.controllers.notifications.NotificationController:  boolean  a()
com.SearingMedia.Parrot.features.settings.SettingsActivity:  android.view.View$OnLayoutChangeListener  a(android.widget.ListView)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  e()
com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  d()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  a()
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder  a(int)	com.SearingMedia.Parrot.features.save.SaveActivity:  void  r()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter$FullPlayerViewModel:  boolean  r()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  i()
com.SearingMedia.Parrot.features.record.RecordPresenter$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.record.RecordPresenter,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  s()
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity:  void  onCloseClicked()	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.parrotlibrary.models.DeviceInformationModel:  void  setSdk(int)	com.SearingMedia.parrotlibrary.utilities.DeviceUtility:  com.SearingMedia.parrotlibrary.models.DeviceInformationModel  getDeviceInformationModel()
com.SearingMedia.Parrot.features.tracks.list.CalendarIconView:  void  setDayTextSize(int)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateCalendarIcon$1:  void  run()
com.SearingMedia.Parrot.features.save.SaveActivity:  void  A()	com.SearingMedia.Parrot.features.save.SaveActivity:  void  z()
com.SearingMedia.Parrot.features.settings.SettingsPhoneCallsFragment:  int  f()	com.SearingMedia.Parrot.features.settings.SingleSettingActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.record.RecordPresenter:  java.lang.String  ag()	com.SearingMedia.Parrot.features.record.RecordPresenter:  void  aa()
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.lang.String  convertTimePartsToHumanReadable(int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$1:  void  a(com.wdullaer.materialdatetimepicker.time.RadialPickerLayout,int,int,int)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  c()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  <init>(com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper$Listener,com.SearingMedia.Parrot.controllers.di.PersistentStorageController)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  int  getDisplayWidth()	com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  <init>(com.SearingMedia.Parrot.features.play.full.waveform.WaveformDelegate)
com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  b()	com.SearingMedia.Parrot.controllers.encoders.EncoderTask:  void  run()
com.SearingMedia.Parrot.views.components.NumberPadView:  void  onFiveClicked()	com.SearingMedia.Parrot.views.components.NumberPadView_ViewBinding$6:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.play.mini.PlayPresenter:  void  b(java.lang.String,boolean)	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment:  com.SearingMedia.Parrot.features.upgrade.buy.UpgradeBuyFragment  a()	com.SearingMedia.Parrot.features.upgrade.buy.ProUpgradeActivity:  void  s()
com.SearingMedia.Parrot.features.tracks.list.TrackListAdapter:  void  a(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$RowClickListener)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  b(android.os.Bundle)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallSettingsController:  void  d()
com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  u()	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  s()
com.SearingMedia.Parrot.views.components.TimerAndNumberPadView:  long  getTimeInMillis()	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  com.SearingMedia.parrotlibrary.models.TimedRecording  a()
com.SearingMedia.Parrot.controllers.scheduled.PendingRecordingSettingsDialog:  void  a()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  void  b(com.SearingMedia.parrotlibrary.models.PendingRecording)
com.SearingMedia.Parrot.controllers.player.ExoAudioPlayer:  void  d()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  l()
com.SearingMedia.Parrot.features.record.RecordFragment:  void  ad()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  b(boolean)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  onDestroy()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  b(boolean)	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  onDestroy()
com.SearingMedia.Parrot.features.onboarding.OnboardingActivity:  void  b(android.os.Bundle)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.share.details.ShareActivity:  void  n()	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  h()
com.SearingMedia.Parrot.utilities.PiracyUtility:  java.util.List  f()	com.SearingMedia.Parrot.utilities.PiracyUtility:  boolean  c()
com.SearingMedia.Parrot.features.fullplayer.soundfile.LoadingSoundFile:  boolean  c()	com.SearingMedia.Parrot.features.play.full.soundfile.SoundFile:  void  p()
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  l()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity$3:  void  a(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)
com.SearingMedia.Parrot.views.components.RatingView:  boolean  onStar5Touch(android.view.View,android.view.MotionEvent)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$10:  boolean  onTouch(android.view.View,android.view.MotionEvent)
com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder:  int  access$600(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)	com.SearingMedia.parrotlibrary.models.PhoneCallRecording:  void  <init>(com.SearingMedia.parrotlibrary.models.PhoneCallRecording$Builder)
com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter$MonthViewHolder,com.SearingMedia.Parrot.models.ScheduledRecordingViewModel)	com.SearingMedia.Parrot.features.scheduled.list.ScheduledRecordingAdapter:  void  a(android.support.v7.widget.RecyclerView$ViewHolder,int)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity$$Lambda$1:  void  <init>(com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity)	com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController)	com.SearingMedia.Parrot.features.backup.cloud.GoogleDriveController:  void  a(int,com.google.android.gms.drive.DriveFolder$DriveFileResult)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  com.SearingMedia.Parrot.thirdparty.utils.Option  c(com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment$2:  void  onClick(android.view.View)
com.SearingMedia.parrotlibrary.utilities.TimeUtility:  java.util.Date  getUpdatedDate(java.util.Date,int,int,int)	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter:  void  a(int,int,int)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  void  <init>(com.SearingMedia.Parrot.features.tracks.details.FileDelegate,com.SearingMedia.Parrot.controllers.TrackManagerController)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter  m()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$1:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding,com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment)	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding:  void  <init>(com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment,android.view.View)
com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment:  com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotFragment  a(com.SearingMedia.Parrot.models.ScreenshotModel)	com.SearingMedia.Parrot.features.upgrade.buy.ScreenshotActivity$ScreenshotPagerAdapter:  android.support.v4.app.Fragment  a(int)
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder$1:  void  <init>(com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder)	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  C()
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  a()	com.SearingMedia.Parrot.services.MediaPlayerService:  void  l()
com.SearingMedia.Parrot.models.ParrotFile$1:  com.SearingMedia.Parrot.models.ParrotFile  a(android.os.Parcel)	com.SearingMedia.Parrot.models.ParrotFile$1:  java.lang.Object  createFromParcel(android.os.Parcel)
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  android.widget.TextView  m()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$updateFileTitle$1:  void  run()
com.SearingMedia.Parrot.features.tracks.list.TrackListPresenter:  void  a(int,int,android.content.Intent)	com.SearingMedia.Parrot.features.tracks.list.TrackListFragment:  void  onActivityResult(int,int,android.content.Intent)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  void  b(java.util.ArrayList)	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  boolean  a(android.view.MenuItem)
com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  c(java.util.List)	com.SearingMedia.Parrot.features.share.details.ShareActivityPresenter:  void  b(java.util.List)
com.SearingMedia.Parrot.features.settings.SettingsActivity$1:  void  <init>(com.SearingMedia.Parrot.features.settings.SettingsActivity)	com.SearingMedia.Parrot.features.settings.SettingsActivity:  void  a(android.widget.LinearLayout)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformPresenter:  void  a(int[])	com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  setAmplitudes(int[])
com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(boolean,android.support.v4.app.Fragment)	com.SearingMedia.Parrot.features.main.MainPresenter:  void  a(com.SearingMedia.Parrot.features.main.MainPresenter,boolean,android.support.v4.app.Fragment)
com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  com.SearingMedia.Parrot.views.lists.SimpleIconListAdapter  a()	com.SearingMedia.Parrot.features.record.StorageChoiceDialogFragment:  void  setupDialog(android.app.Dialog,int)
com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder:  android.widget.ImageView  y()	com.SearingMedia.Parrot.features.upgrade.modals.UpgradeFeatureAdapter:  void  a(com.SearingMedia.Parrot.features.upgrade.modals.UpgradeViewHolder,int)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorder:  void  p()	com.SearingMedia.Parrot.controllers.recorders.AACAudioRecorder$RecorderTask:  void  run()
com.SearingMedia.Parrot.features.save.SavePresenter:  void  v()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  f()
com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$10:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView_ViewBinding,com.SearingMedia.Parrot.views.components.RatingView)	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding:  void  <init>(com.SearingMedia.Parrot.views.components.RatingView,android.view.View)
com.SearingMedia.featurepager.viewpager.FeaturePagerViewPager:  void  setScrollDurationFactor(double)	com.SearingMedia.featurepager.activities.FeaturePagerBaseActivity:  void  h(int)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  U()	com.SearingMedia.Parrot.features.record.RecordFragment$$Lambda$0:  void  run()
com.SearingMedia.Parrot.features.play.full.FullPlayerActivity:  void  A()	com.SearingMedia.Parrot.features.play.full.FullPlayerPresenter:  void  f()
com.SearingMedia.Parrot.controllers.TestingController$$Lambda$2:  void  <init>(com.SearingMedia.parrotlibrary.models.PendingRecording)	com.SearingMedia.Parrot.controllers.TestingController:  com.SearingMedia.parrotlibrary.models.PendingRecording  d(android.content.Context)
com.SearingMedia.Parrot.controllers.TrackManagerController$$Lambda$6:  void  <init>(com.SearingMedia.Parrot.controllers.TrackManagerController,com.SearingMedia.Parrot.models.ParrotFile)	com.SearingMedia.Parrot.controllers.TrackManagerController:  void  b(com.SearingMedia.Parrot.models.ParrotFile)
com.SearingMedia.Parrot.features.play.full.waveform.WaveformView:  void  g()	com.SearingMedia.Parrot.features.play.full.FullPlayerActivity$showWavePausedState$1:  void  run()
com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  l()	com.SearingMedia.Parrot.controllers.encoders.AudioEncoder:  void  i()
com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment:  void  onButton3Clicked()	com.SearingMedia.Parrot.features.upgrade.buy.UpgradeFeatureFragment_ViewBinding$3:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(boolean)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  a(com.SearingMedia.parrotlibrary.models.RecordingModel)
com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingPresenter  m()	com.SearingMedia.Parrot.features.scheduled.add.AddScheduledRecordingActivity:  com.hannesdorfmann.mosby.mvp.MvpPresenter  D()
com.SearingMedia.Parrot.services.MediaPlayerService:  void  f()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b()
com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  boolean  d(double)	com.SearingMedia.Parrot.controllers.recorders.AmplitudeController:  void  c(double)
com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment:  com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserFragment  a(java.lang.String,java.lang.String)	com.SearingMedia.Parrot.thirdparty.utils.DirectoryChooserActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.features.phonecalls.PhoneCallActivity:  void  u()	com.SearingMedia.Parrot.features.phonecalls.PhoneCallPresenter:  void  e()
com.SearingMedia.Parrot.controllers.di.PersistentStorageController:  void  c(boolean)	com.SearingMedia.Parrot.services.MaintenanceService:  void  e()
com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment:  void  onRecordButtonClicked()	com.SearingMedia.Parrot.features.record.TimedRecordingDialogFragment_ViewBinding$1:  void  doClick(android.view.View)
com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment:  android.preference.ListPreference  a(com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment)	com.SearingMedia.Parrot.features.settings.SettingsInterfaceFragment$1:  boolean  onPreferenceChange(android.preference.Preference,java.lang.Object)
com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  e()	com.SearingMedia.Parrot.features.play.mini.MediaPlayerHelper:  void  b(long,java.lang.String)
com.SearingMedia.Parrot.features.tracks.details.TrackDetailsActivity:  android.app.Activity  t()	com.SearingMedia.Parrot.features.tracks.details.TrackDetailsPresenter:  android.app.Activity  g()
com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController:  void  a(com.SearingMedia.parrotlibrary.models.PhoneCallRecording)	com.SearingMedia.Parrot.controllers.phonecalls.PhoneCallController$$Lambda$2:  void  run()
com.SearingMedia.Parrot.utilities.BottomSheetUtility$1:  void  <init>(android.app.Dialog)	com.SearingMedia.Parrot.utilities.BottomSheetUtility:  void  a(android.app.Dialog)
com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  g()	com.SearingMedia.Parrot.features.play.playerbar.PlayerBarView:  void  onDestroy()
com.SearingMedia.Parrot.views.components.CustomQuickSettingsTile:  com.SearingMedia.Parrot.views.components.QuickSettingsTile$TileModel  a(android.util.AttributeSet)	com.SearingMedia.Parrot.views.components.QuickSettingsTile:  void  b(android.util.AttributeSet)
com.SearingMedia.Parrot.features.backup.cloud.DropboxController:  void  a(java.util.List)	com.SearingMedia.Parrot.features.backup.BackupService:  void  a(com.SearingMedia.Parrot.features.backup.BackupTask,com.SearingMedia.Parrot.features.backup.cloud.CloudController)
com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  n()	com.SearingMedia.Parrot.features.phonecalls.promptafter.RecordPhoneCallAfterActivity:  void  onCreate(android.os.Bundle)
com.SearingMedia.Parrot.views.components.RatingView:  void  onStar5Click()	com.SearingMedia.Parrot.views.components.RatingView_ViewBinding$9:  void  doClick(android.view.View)
com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  int  c(java.lang.String)	com.SearingMedia.Parrot.controllers.recorders.AudioRecorderDispatcher:  void  a(android.content.Intent)
com.SearingMedia.Parrot.features.record.RecordFragment:  void  ae()	com.SearingMedia.Parrot.features.record.RecordFragment:  void  J()
com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizeActivity:  void  n()	com.SearingMedia.Parrot.features.phonecalls.optimisations.PhoneCallOptimizePresenter:  void  a()
com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder:  void  onClick()	com.SearingMedia.Parrot.models.viewholders.TrackListViewHolder_ViewBinding$1:  void  doClick(android.view.View)
io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder:  io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$OnShowListener  v(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)	io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip:  void  <init>(io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip$Builder)
com.SearingMedia.Parrot.features.save.SavePresenter:  int  r()	com.SearingMedia.Parrot.features.save.SavePresenter:  void  o()
com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  b()	com.SearingMedia.Parrot.features.play.mini.PlayPresenter$1:  void  onServiceConnected(android.content.ComponentName,android.os.IBinder)
