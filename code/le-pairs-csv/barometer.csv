net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  access$revertCheckboxToUnchecked(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  revertCheckboxToUnchecked()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  float  getTopCorrection(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateAltitudeSummary(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  float  getAltitude()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getEXTRA_ITEM_TIME()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  java.lang.String  access$getEXTRA_ITEM_TIME$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  java.lang.Object  doInBackground(java.lang.Object[])	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder  doInBackground(java.lang.Void[])
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  void  <init>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onAddPlaceButtonClicked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.util.Collection)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$2:  void  onChartDataUpdated(java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$updateChartData(net.hubalek.android.apps.barometer.activity.MainActivity,java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  fall()	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setPressureChange(net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_UNIT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)
net.hubalek.android.apps.barometer.model.PressureUnit$3:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  inchesOfMercuryToMillibars(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getMajorDivisionsPreference()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.Utils:  void  setClickableTextToTextView(android.widget.TextView,int,int,android.view.View$OnClickListener)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  boolean  canNotificationBeFired()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  void  persistData(android.content.Context,java.util.List)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  int  access$getMClickedDialogEntryIndex$p(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog)
net.hubalek.android.apps.barometer.model.ChartItem:  net.hubalek.android.apps.barometer.model.ChartItem  copy$default(net.hubalek.android.apps.barometer.model.ChartItem,long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int,int,java.lang.Object)	net.hubalek.android.apps.barometer.model.ChartItem:  net.hubalek.android.apps.barometer.model.ChartItem  copy(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int)
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView,android.view.View)	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding,net.hubalek.android.apps.barometer.views.AlertTypeView)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  refreshPreview()	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.util.HashMap  access$getMDetails$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask)
net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  loadData(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  void  <clinit>()	net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult$Creator:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  access$updateChartData(net.hubalek.android.apps.barometer.activity.TableViewActivity,java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.commons.dialogs.ColorPickerActivity$2:  boolean  onLongClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatCoordinates(double,double)
net.hubalek.android.apps.barometer.model.Constants:  void  <clinit>()	net.hubalek.android.apps.barometer.model.Constants:  void  <init>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  isAlertsFeatureOwned()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  colorToHsv(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.EditText)	net.hubalek.android.apps.barometer.utils.BaseTextWatcher:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  access$800(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxPreferences(float,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxSummary(android.support.v7.preference.Preference,int)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_2()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder)
net.hubalek.android.apps.barometer.activity.TableViewActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.TableViewActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType  getPressureChange()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackScreen(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  com.google.android.gms.analytics.Tracker  getTracker(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)	net.hubalek.android.apps.barometer.utils.BaseTextWatcher:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getMEarliestTimeWhenGaugeUpdateIsPossible()	net.hubalek.android.apps.barometer.activity.MainActivity:  long  access$getMEarliestTimeWhenGaugeUpdateIsPossible$cp()
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateTemperatureSummary(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$setMAirPressureChangeListener$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.hardware.SensorEventListener)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_MAX_VALUE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_MAX_VALUE$cp()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask,net.hubalek.android.apps.barometer.utils.LicensingUtils,boolean)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$SecondaryConditionMode:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$SecondaryConditionMode:  void  <init>(java.lang.String,int)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createDataLine(int,java.util.List)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getCharLineColor(android.content.Context)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Boolean)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$setMSensorEventLoggerTask$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawSubLabel(android.graphics.Canvas,float,float)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  centerTextInBox(android.graphics.Canvas,java.lang.String,android.text.TextPaint,float,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.lang.Void  doInBackground(java.lang.Void[])	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  com.anjlab.android.iab.v3.BillingProcessor  access$getMBillingProcessor$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  run()	net.hubalek.android.apps.barometer.views.GaugeView2:  void  setValue(float)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$2:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int,int,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int,int,boolean)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  broadcastNewDataCollected()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  broadcastChartDataUpdate()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition  build()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  resetFirstStart(android.content.Context)	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  android.content.SharedPreferences  getPreferences(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onConnected(android.os.Bundle)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  boolean  necessaryPermissionMissing(android.content.Context)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  <init>()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  createUpgradeDialog(android.content.Context,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setNegativeButton(int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity$onZoomIn$1:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainActivity$onZoomIn$1:  void  <init>()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawValue(android.graphics.Canvas,float,float)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  centerTextInBox(android.graphics.Canvas,java.lang.String,android.text.TextPaint,float,float)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setSampleData(android.content.Context)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setMInstance(net.hubalek.android.apps.barometer.service.AirPressureStats)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$3:  boolean  onPreferenceClick(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$Companion:  android.content.Intent  newIntent(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_REQUEST_CODE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_REQUEST_CODE$cp()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setEnabled(boolean)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  enableDisableImageView(android.widget.ImageView,boolean)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(java.lang.Object)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getRangeMinPreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.util.Collection)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_EXISTING_DEFINITIONS()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getMinorDivisionsPreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.widget.Button)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1000(net.hubalek.android.commons.dialogs.ColorPickerActivity,float[],int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateTemperatureSummary(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  float  getTemperature()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getMinorDivisionsPreference()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)	net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  int  getThemeName()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxSummary(android.support.v7.preference.Preference,int)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  addSample(long,int,java.lang.String)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.lang.String  getDescription(android.content.Context)	net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getConditionTemplate()
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.lang.String  getDescription(android.content.Context)	net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer:  android.text.Spannable  replacePlaceholders(android.content.Context,int,java.util.Map,net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer$OnLinkClickedListener)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show(android.support.v4.app.FragmentManager)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show$default(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder,android.support.v4.app.FragmentManager,java.lang.String,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,java.util.List)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  fixOnePoint(java.util.List)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$broadcastNewDataCollected(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  broadcastNewDataCollected()
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>()	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment,int,int,boolean,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0,int)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  checkIsAlive(net.hubalek.android.apps.barometer.service.AirPressureStats)	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isStalled()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  float  getTemperature()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  setScaleRange(float,float,int,int,int,int,java.lang.String,java.lang.String)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  smartInvalidate()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  convertFromValue(float,java.lang.String)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$angleToY(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,double,double)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  angleToY(float,double,double)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeLaterActionSelected()	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  convertMslp(android.content.Context,java.lang.String,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  itemClicked()
net.hubalek.android.apps.barometer.utils.Utils:  void  setClickableTextToTextView(android.widget.TextView,int,int,android.view.View$OnClickListener)	net.hubalek.android.apps.barometer.utils.Utils:  android.text.SpannableStringBuilder  makeTextClickable(android.content.Context,int,int,android.view.View$OnClickListener)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$2:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onAddPlaceButtonClicked$app_productionRelease()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_2()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getPOORER_WEATHER_TO_COME_2$cp()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSaveInstanceState(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_INDEX()
net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2:  void  multiClickDetected()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaHsv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaHsvTv(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getARG_ALERT_CATEGORY()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  java.lang.String  access$getARG_ALERT_CATEGORY$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_POSITIVE_BUTTON_TEXT()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_POSITIVE_BUTTON_TEXT$cp()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  access$getCurrentPressureUnit$p(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateIntSettings(float,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putFloat(android.content.Context,int,float)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  float  calcY(java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,boolean,float,float,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processResultInUiThread(java.lang.Object)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processResultInUiThread(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  setGmtTime(long)
net.hubalek.android.apps.barometer.model.customalerts.PressureComparator:  void  <clinit>()	net.hubalek.android.apps.barometer.model.customalerts.PressureComparator:  void  <init>(java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_ALERT_TEXT$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TEXT()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberViewPort(lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putFloat(android.content.Context,int,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TEXT()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onPreferencesChanged()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  loadMSLPParameters()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxSummary(android.support.v7.preference.Preference,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.Object  getDefaultsForKey(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onPause()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.model.PressureUnit$4:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToTorrs(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  boolean  isSecondaryConditionAllowed()
net.hubalek.android.commons.dialogs.ColorPickerActivity$17$1:  void  onClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartLabelsColor(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  perform(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  access$800(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getEXTRA_SUPPRESS_NOTIFICATION()	net.hubalek.android.apps.barometer.activity.MainActivity:  java.lang.String  access$getEXTRA_SUPPRESS_NOTIFICATION$cp()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  int  getAlertIconResId()	net.hubalek.android.apps.barometer.model.AlertCategory:  int  getAlertIconDrawableResId()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  setValue(float)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  smartInvalidate()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Creator:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  exportData$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$2:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  access$assertCallbackImplementation(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateSaturation(float[])	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateSaturationTv(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.commons.preferences.DrawableBackgroundPreference:  android.view.View  onCreateView(android.view.ViewGroup)	net.hubalek.android.commons.preferences.DrawableBackgroundPreference:  void  updateHeight(java.lang.Integer)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_GALE()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTORM_WITH_GALE$cp()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onResume()	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getInstance(android.content.Context)
net.hubalek.android.commons.preferences.ImageViewPreference:  android.view.View  onCreateView(android.view.ViewGroup)	net.hubalek.android.commons.preferences.ImageViewPreference:  void  updateHeight(java.lang.Integer)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  altitudeDetected(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getConditionTemplate()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  int  getTemplateStringResId()
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.ChartItem$Companion:  void  <init>()
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setGmtCurrentMax$app_productionRelease(long)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  onSuccess(android.location.Location)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$queryAirPresureWithLocation(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isStalled()	net.hubalek.android.apps.barometer.service.AirPressureStats:  int  getMinutesStalled()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.commons.dialogs.ColorPickerActivity$23:  void  perform(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity$23:  void  perform(android.widget.FrameLayout)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onMapReady(com.google.android.gms.maps.GoogleMap)	net.hubalek.android.apps.barometer.model.PlaceInfo:  double  getLatitude()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateIntSettings(float,int)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  void  <init>(int)
net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult  createLineChartView()	net.hubalek.android.apps.barometer.activity.MainActivity$createLineChartView$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatValue(android.content.Context,float)
net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  addSample(long,int,java.lang.String)	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(long,float,java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.model.ChartItem:  java.lang.String  getPlaceCode()
net.hubalek.android.apps.barometer.activity.BaseActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.BaseActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$onPrepareDialogBuilder$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  access$setMClickedDialogEntryIndex$p(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.view.View)
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <clinit>()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int,int,boolean)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  float  access$getValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment,android.widget.EditText,android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  float  getValue(android.widget.EditText,android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRGBSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaRgb(int)
net.hubalek.android.apps.barometer.activity.PreferencesActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog  newInstance(java.lang.String)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  <init>()
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <init>(android.content.Context)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  double  getDOUBLE()	net.hubalek.android.apps.barometer.views.GaugeView2:  double  access$getDOUBLE$cp()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  reconfigureGauge(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.activity.MainActivity$reconfigureGauge$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  pickPlace$app_productionRelease()	net.hubalek.android.apps.barometer.activity.BaseActivity:  boolean  checkPlayServices()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$dialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.widget.EditText,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getARG_PLACE_INFO()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.String  access$getARG_PLACE_INFO$cp()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  java.lang.String  getFRAGMENT_TAG()	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  java.lang.String  access$getFRAGMENT_TAG$cp()
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onContainerClicked()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PREF_KEY()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_PREF_KEY$cp()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  float  getAltitude()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  access$getWEIGHTS$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  getWEIGHTS()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMAdapter$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  updateMap(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.model.PlaceInfo:  java.lang.String  getName()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.EditText)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onInfoIconClicked(net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog  newInstance(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  android.content.IntentFilter  getINTENT_FILTER()
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator  getSecondaryConditionOperator()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.AlertDefinition,int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.AlertDefinition,int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.model.AlertCategory:  int  getTitleStringResId()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCustomTypeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog  newInstance(net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult  createLineChartView()	net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,android.view.View,lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatAltitude(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setTitle(int)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatRadius(android.content.Context,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartAxisLineColor(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  boolean  secondaryCondition(float,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator  getSecondaryConditionOperator()
net.hubalek.android.apps.barometer.model.PlaceInfo:  net.hubalek.android.apps.barometer.model.PlaceInfo  copy(java.lang.String,int,double,double,java.lang.String,double)	net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <init>(java.lang.String,int,double,double,java.lang.String,double)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$1:  void  onClick(android.view.View)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  com.anjlab.android.iab.v3.BillingProcessor  access$getMBillingProcessor$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit$5:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  torrsToMillibars(float)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  fall()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  void  <init>()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_1()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getDecimalPlacesOnBigNumberPreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.model.ChartItem$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.lang.String  getDescription(android.content.Context)	net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)
net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  isMyPlacesFeatureOwned()
net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  void  <init>()
net.hubalek.android.apps.barometer.utils.ThemeUtils:  android.view.LayoutInflater  configureThemeToFragmentInOnCreateView(android.support.v4.app.Fragment,android.view.LayoutInflater)	net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  int  getThemeResId$app_productionRelease()
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isOutOfNeighbours(java.util.List,int,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.model.ChartItem:  float  getPressureMilliBars()
net.hubalek.android.apps.barometer.BarometerApplication:  void  <clinit>()	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  run()	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  access$getCurrentPressureUnit$p(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)
net.hubalek.android.commons.components.RainbowImage:  void  onMeasure(int,int)	net.hubalek.android.commons.components.RainbowImage:  int  measureWidth(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRGBSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateBlue(int)
net.hubalek.android.apps.barometer.model.ScaleType:  void  <clinit>()	net.hubalek.android.apps.barometer.model.ScaleType:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setTargetFragment(android.support.v4.app.Fragment,int)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.service.AirPressureStats:  long  timeOfLastSample(java.util.List)	net.hubalek.android.apps.barometer.model.ChartItem:  long  getGmtTime()
net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  boolean  access$200(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onActivityResult$1:  void  run()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.utils.ColorUtils:  java.lang.String  getThemeAccentColorHex(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getThemeAccentColor(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.lang.Object  doInBackground(java.lang.Object[])	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.lang.Void  doInBackground(java.lang.Void[])
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setDescription2(java.lang.CharSequence)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_EXISTING_DEFINITIONS()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  java.lang.String  access$getEXTRA_EXISTING_DEFINITIONS$cp()
net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.Path  createBezierArcDegrees(android.graphics.PointF,float,float,float,int,boolean,android.graphics.Path)	net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.Path  createBezierArcRadians(android.graphics.PointF,float,double,double,int,boolean,android.graphics.Path)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  getInstance(android.content.Context)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  java.lang.Object  getSInstanceLock()
net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getCurrentTheme(android.content.Context)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  java.lang.String  getThemePreferenceKey(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$2:  void  run()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  access$validateForm(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  net.hubalek.android.apps.barometer.model.PlaceInfo  access$getMPlaceInfo$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)
net.hubalek.android.apps.barometer.model.ChartItem:  void  <clinit>()	net.hubalek.android.apps.barometer.model.ChartItem$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updatePreview()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRGBSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRed(int)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,java.lang.String)
net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$600(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onZoomIn()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  zoomChart(kotlin.jvm.functions.Function2)
net.hubalek.android.apps.barometer.BarometerApplication$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.PointF  pointFromAngleDegrees(android.graphics.PointF,float,float)	net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.PointF  pointFromAngleRadians(android.graphics.PointF,float,double)
net.hubalek.android.apps.barometer.activity.UpgradeActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onMapReady(com.google.android.gms.maps.GoogleMap)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onMapReady$1:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomOut(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onZoomOut()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity,android.view.View)
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  onPreferencesChanged()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onPreferencesChanged()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  setBezelColor(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1700(net.hubalek.android.commons.dialogs.ColorPickerActivity,int,int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  updateAlpha(int,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$3:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$1:  void  onTextChanged(java.lang.CharSequence,int,int,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  access$validateForm(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.TextView)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  exportData$app_productionRelease()	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.widgets.AppWidget:  void  onReceive(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show(android.support.v4.app.FragmentManager,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  <init>()
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <clinit>()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int,int,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.preferences.DrawableBackgroundPreference:  android.view.View  onCreateView(android.view.ViewGroup)	net.hubalek.android.commons.preferences.DrawableBackgroundPreference:  android.graphics.drawable.Drawable  getImageDrawable()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onSaveInstanceState(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  access$getARG_ALERT_DEFINITION_TO_EDITED$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  double  getDOUBLE()
net.hubalek.android.apps.barometer.activity.PreferencesActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.PreferencesActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(int,int,net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$2:  void  afterTextChanged(android.text.Editable)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setNotificationTitle(java.lang.String)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  getFirstStart(android.content.Context)	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  android.content.SharedPreferences  getPreferences(android.content.Context)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity,android.view.View)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  lowerThan(float)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$queryAirPresureWithLocation(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocation(android.location.Location)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  eachInAppProductView$app_productionRelease(kotlin.jvm.functions.Function1)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_TITLE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  updateMap(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.model.PlaceInfo:  int  getDiameterMeters()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  android.content.Intent  newIntent(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  android.content.Intent  newIntent$default(net.hubalek.android.apps.barometer.activity.MainActivity$Companion,android.content.Context,boolean,int,java.lang.Object)
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setBase$app_productionRelease(java.lang.Long)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$400(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRGBSliders()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertCategory  getAlertCategory()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  access$assertCallbackImplementation(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.commons.components.RainbowImage:  void  onMeasure(int,int)	net.hubalek.android.commons.components.RainbowImage:  int  measureHeight(int)
net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  reconfigureGauge()	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  <clinit>()	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$3:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  checkLocationPermission()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  boolean  necessaryPermissionMissing(android.content.Context)
net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertDefinition  copy(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  java.lang.String  metersToAltitude(android.content.Context,double)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  void  <init>(boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)
net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Creator:  void  <init>()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  returnWeatherTypes(net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setAlertCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getMajorDivisionsPreference()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$queryAirPresureWithLocationAndTemperature(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location,float)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocationAndTemperature(android.location.Location,float)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(float,java.lang.String,int,int)	net.hubalek.android.apps.barometer.service.AirPressureStats:  long  getSystemTime()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onResume()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment$onCreatePreferencesFix$1:  boolean  onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  android.support.v7.preference.ListPreference  access$getMOnClickActionPreference$p(net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putString(android.content.Context,int,java.lang.String,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.model.Trend:  void  <clinit>()	net.hubalek.android.apps.barometer.model.Trend:  void  <init>(java.lang.String,int,int)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$valueToAngle(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,float,float)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  valueToAngle(float,float,float)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  setAltitudeMeters(int)
net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.PressureUnit$3:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToInchesOfMercury(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getDecimalPlacesOnScalePreference()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_NEGATIVE_BUTTON_TEXT()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_NEGATIVE_BUTTON_TEXT$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  float  invoke()
net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  deleteRecord()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_RESULT$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onPreferencesChanged()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onPreferencesChanged()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  rise()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getARG_ALERT_DEFINITION_TO_EDITED()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  access$getARG_ALERT_DEFINITION_TO_EDITED$cp()
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$2:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onInfoIconClicked()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog  newInstance(java.lang.Enum[],java.lang.Enum)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_CHOICES()
net.hubalek.android.apps.barometer.service.AirPressureStats:  net.hubalek.android.apps.barometer.model.ChartItem  parseRow(java.lang.String,com.google.gson.JsonParser)	net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  checkForAlerts$app_productionRelease(android.content.Context,net.hubalek.android.apps.barometer.service.AirPressureStats,net.hubalek.android.apps.barometer.model.AlertCategory[],java.util.Collection,boolean)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,java.util.List)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartGapAreaColor(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.model.customalerts.PressureComparator:  int  getLabelStringResId()
net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,java.lang.String)	net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,long,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment)
net.hubalek.android.commons.preferences.ColorDisplayingPreference:  android.view.View  onCreateView(android.view.ViewGroup)	net.hubalek.android.commons.preferences.ColorDisplayingPreference:  void  setColor(int)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.model.Trend  calcTrend$app_productionRelease(net.hubalek.android.apps.barometer.model.ChartItem,java.util.List)	net.hubalek.android.apps.barometer.model.ChartItem:  long  getGmtTime()
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$3:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$3:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  access$assertCallbackImplementation(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.apps.barometer.service.BootCompletedBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  java.lang.String  getLOG_TAG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  float  invoke()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$900(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,android.view.View)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getGALE_WARNING()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getGALE_WARNING$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$1:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$1:  void  <init>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.support.v7.widget.SwitchCompat  getMEnableAlertsCheckBox()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocation$1:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$setMTemperatureChangeListener$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.hardware.SensorEventListener)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  copy(java.lang.String,long,float,java.lang.String,long,float,float)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  void  <init>(java.lang.String,long,float,java.lang.String,long,float,float)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$3:  void  onReceive(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putString(android.content.Context,int,java.lang.String)
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  android.content.IntentFilter  getINTENT_FILTER()	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  android.content.IntentFilter  access$getINTENT_FILTER$cp()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.model.ChartItem:  float  getPressureMilliBars()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog  newInstance(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getARG_ALERT_CATEGORY()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  pickPlace$app_productionRelease()
net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  loadData(android.content.Context)	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage$loadData$type$1:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getThemeAccentColor(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  restoreData()	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,java.util.List)	net.hubalek.android.apps.barometer.activity.MainActivity:  android.graphics.Shader  createShader(int,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment  newInstance(java.lang.CharSequence,float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_UNIT()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getIF_YOU_LIKE_THRESHOLD()	net.hubalek.android.apps.barometer.activity.MainActivity:  long  access$getIF_YOU_LIKE_THRESHOLD$cp()
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$900(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.utils.ColorUtils:  android.content.res.ColorStateList  colorStateList(android.content.Context,int)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  restoreData()
net.hubalek.android.apps.barometer.model.PlaceInfo$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <init>(java.lang.String,int,double,double,java.lang.String,double)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  setLabelTextColor(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener,android.widget.TextView,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_MESSAGE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_MESSAGE()
net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isOutOfNeighbours(java.util.List,int,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.service.AirPressureStats:  int  calcAverage(java.util.List,int,int,java.lang.String)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaRgb(int)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.PressureUnit$4:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  torrsToMillibars(float)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme[]  values()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.model.PlaceInfo:  int  getDiameterMeters()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatAirPressureInfo(long,float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressure(float)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Viewport  calcCurrentViewPort(lecho.lib.hellocharts.model.Viewport)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  updateMap(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  com.google.android.gms.maps.model.LatLngBounds  toBounds(com.google.android.gms.maps.model.LatLng,double)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  access$800(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  colorToHsv(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog  newInstance(java.lang.Enum[],java.lang.Enum)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$6:  void  <init>()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setIcon(int)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  java.lang.String  access$getPREFIX_EXTRA$cp()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  access$updateMap(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  updateMap(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Object  doInBackground(java.lang.Object[])	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  java.lang.Object  invoke(java.lang.Object)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  broadcastWidgetUpdate()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$4:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  setOwned(boolean)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1202(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createDataLine(int,java.util.List)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  fixOnePoint(java.util.List)
net.hubalek.android.apps.barometer.views.BulletTextView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.BulletTextView)	net.hubalek.android.apps.barometer.views.BulletTextView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.BulletTextView,android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  float  invoke()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_NEGATIVE_BUTTON_TEXT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment,int,int,java.lang.Float,java.lang.Float,boolean,int)
net.hubalek.android.apps.barometer.activity.MainActivity$updateChartData$1:  void  onClick(android.view.View)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomIn(net.hubalek.android.apps.barometer.activity.MainActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$900(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MainActivity$DateTimeFormatter:  int  formatValueForAutoGeneratedAxis(char[],float,int)	net.hubalek.android.apps.barometer.activity.MainActivity$DateTimeFormatter:  int  formatValue(char[],float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getRecentHours()
net.hubalek.android.apps.barometer.utils.Utils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.Utils:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartGapAreaColor(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_NEGATIVE_BUTTON_TEXT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_NEGATIVE_BUTTON_TEXT()
net.hubalek.android.commons.dialogs.ColorPickerActivity$1:  void  onClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onMapReady$1:  void  onMapLoaded()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  access$updateMap(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)
net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  eachTab(int,net.hubalek.android.commons.dialogs.ColorPickerActivity$EachTabCallback)
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  <init>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.model.PlaceInfo:  double  getLatitude()
net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>()	net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$4:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getEXTRA_SUPPRESS_NOTIFICATION$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getEXTRA_SUPPRESS_NOTIFICATION()
net.hubalek.android.apps.barometer.activity.MainActivity$reconfigureGauge$1:  void  run()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  reconfigureGaugeView(android.content.Context,net.hubalek.android.apps.barometer.views.GaugeView2,net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isOutOfNeighbours(java.util.List,int,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isInLimit(int,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.model.AlertDefinition:  java.lang.String  getNotificationText()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatCoordinates(double,double)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatCoord$app_productionRelease(double)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCustomTypeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onResume()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog  newInstance(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  <init>()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)	net.hubalek.android.commons.dialogs.ColorPickerActivity$18:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$WhenMappings:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$SecondaryConditionMode:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$SecondaryConditionMode[]  values()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomIn(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onZoomIn()
net.hubalek.android.apps.barometer.activity.MainActivity:  float  getAxisStep(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  getAxisStep()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment  newInstance(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Float,java.lang.Float)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  onTabChanged(java.lang.String)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  boolean  access$202(net.hubalek.android.commons.dialogs.ColorPickerActivity,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PRESSURE_UNIT()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_PRESSURE_UNIT$cp()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.util.HashSet  access$getOwnedSkus$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putString(android.content.Context,int,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.widgets.AppWidget:  void  onReceive(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMAdapter$p(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  getALL_VALUES()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  access$getALL_VALUES$cp()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$fireNotification(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)
net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  java.util.List  loadData(android.content.Context)	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage$loadData$placesInfoListType$1:  void  <init>()
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setMinY(float)
net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getMajorDivisionsPreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartLabelsColor(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateLightness(float[])
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_RESULT()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getEXTRA_RESULT$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxSummary(android.support.v7.preference.Preference,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$4:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$4:  void  <init>()
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$1:  void  <init>()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <init>(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  isPlatinumEditionOwned()
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$angleToX(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,double,double)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  angleToX(float,double,double)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$updateChartData(net.hubalek.android.apps.barometer.activity.MainActivity,java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_TITLE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getARG_TITLE$cp()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  android.view.View  getMContent()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateSaturation(float[])
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  <clinit>()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.PlaceEditActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getDecimalPlacesOnBigNumberPreference()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  float  calcY(java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,boolean,float,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  float  convertToUnit(net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  setPlaceCode(java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queyAirPressure()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  myPlacesDisabled()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onActivityResult$1:  void  run()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog  newInstance(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$angleToX(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,double,double)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onZoomOut()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  zoomChart(kotlin.jvm.functions.Function2)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onAddWidgetFabClicked$app_productionRelease()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  android.content.Intent  newIntentForWidgetsUpdate(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  access$getARG_MAX_VALUE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_MAX_VALUE()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxPreferences(float,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putFloat(android.content.Context,int,float)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  and()
net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  setSInstance(net.hubalek.android.apps.barometer.utils.LicensingUtils)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  access$setSInstance$cp(net.hubalek.android.apps.barometer.utils.LicensingUtils)
net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  reconfigureGauge()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  reconfigureGauge(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.utils.Utils:  android.content.Intent  createMyOtherAppsIntent(android.content.Context)	net.hubalek.android.apps.barometer.utils.Utils:  boolean  isAvailable(android.content.Context,android.content.Intent)
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1102(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  int  getDiameterMeters()	net.hubalek.android.apps.barometer.utils.ConversionUtils:  int  distanceToMeters(java.lang.String)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.Object  getDefaultsForKey(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.model.DataSplitter:  void  addPointToPlace(net.hubalek.android.apps.barometer.model.DataSplitter$Result,net.hubalek.android.apps.barometer.model.DataSplitter$PointType,java.lang.String,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.model.DataSplitter$Point:  void  <init>(net.hubalek.android.apps.barometer.model.DataSplitter$PointType,net.hubalek.android.apps.barometer.model.ChartItem)
net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.AlertDefinition,int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaHsv(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$5:  boolean  onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_INDEX()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getEXTRA_PLACE_INDEX$cp()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  revertCheckboxToUnchecked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.support.v7.widget.SwitchCompat  getMEnableAlertsCheckBox()
net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  void  <init>()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTORM$cp()
net.hubalek.android.apps.barometer.model.DataSplitter:  void  <clinit>()	net.hubalek.android.apps.barometer.model.DataSplitter:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  <init>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  boolean  access$getMAlertsEnabled$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateLightness(float[])
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment  newInstance(java.lang.CharSequence,float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_VALUE()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateBlue(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$2:  boolean  onLongClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TabHost  access$100(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onExtremeWeatherChangeSelected$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment  newInstance()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  <init>()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  loadFromBundle(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_TO_EDIT()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_UNIT()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getARG_UNIT$cp()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.model.PlaceInfo:  java.lang.String  getName()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity$DateTimeFormatter:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,java.lang.Long)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog  newInstance(java.lang.Enum[],java.lang.Enum)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_SELECTION()
net.hubalek.android.apps.barometer.utils.DataFormatter:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.DataFormatter:  void  <init>()
net.hubalek.android.apps.barometer.views.RoundButtonView:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.views.RoundButtonView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxPreferences(float,int)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TITLE()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getEXTRA_ALERT_TITLE$cp()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getEXTRA_SUPPRESS_NOTIFICATION$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToTorrs(float)
net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackScreen(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_REQUEST_CODE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_REQUEST_CODE()
net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  void  <init>(java.lang.String,int,int,int,int,int,int,boolean)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatTemperature(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressureChange(float)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getCurrentTheme(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1,java.lang.String)	net.hubalek.android.apps.barometer.utils.MultipleClicksDetector:  void  <init>()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3$1:  void  onMapLoaded()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  com.google.android.gms.maps.GoogleMap  access$getMMap$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_UNIT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_UNIT()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$4:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$4:  float  invoke()
net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  isValueSet(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.views.InAppProductView:  java.lang.String  getSku()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberChartZoom(lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberViewPort(lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$23:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  setPrice(java.lang.String)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView,android.view.View)
net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  convertMslp(android.content.Context,java.lang.String,float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  convertMslp(android.content.Context,java.lang.String,float,boolean,float,float)
net.hubalek.android.apps.barometer.utils.MultipleClicksDetector$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.MultipleClicksDetector$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity$onZoomOut$1:  java.lang.Object  invoke(java.lang.Object,java.lang.Object)	net.hubalek.android.apps.barometer.activity.MainActivity$onZoomOut$1:  void  invoke(lecho.lib.hellocharts.view.LineChartView,lecho.lib.hellocharts.model.Viewport)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator:  int  getLabelStringResId()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaHsv(int)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  android.widget.ProgressBar  getMProgressBar()
net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  convertMslp(android.content.Context,java.lang.String,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setMInstance(net.hubalek.android.apps.barometer.service.AirPressureStats)	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  access$setMInstance$cp(net.hubalek.android.apps.barometer.service.AirPressureStats)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  altitudeDetected(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  void  persistData(android.content.Context,java.util.List)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.utils.AssertionUtils:  void  assertNotNull(java.lang.Object,java.lang.String)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1402(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.model.PlaceInfo  addAltitudeToPlaceInfo$app_productionRelease(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  org.json.JSONObject  readJsonFromUrl(java.lang.String)
net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer:  void  setPlaceholdersToTextView(android.widget.TextView,int,java.util.Map,net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer$OnLinkClickedListener)	net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer:  android.text.Spannable  replacePlaceholders(android.content.Context,int,java.util.Map,net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer$OnLinkClickedListener)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_SUFFIX()	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.lang.String  access$getFILE_NAME_SUFFIX$cp()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  getWEIGHTS()	net.hubalek.android.apps.barometer.service.AirPressureStats:  int[]  access$getWEIGHTS$cp()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onAddWidgetFabClicked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  int  getWidgetId()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_RESULT$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_RESULT()
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <clinit>()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  errorOccurredWhileDetectingAltitude(net.hubalek.android.apps.barometer.model.PlaceInfo,java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  altitudeDetected(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  checkForAlerts$app_productionRelease(android.content.Context,net.hubalek.android.apps.barometer.service.AirPressureStats,net.hubalek.android.apps.barometer.model.AlertCategory[],java.util.Collection,boolean)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  boolean  isEmpty()
net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  java.util.List  loadData(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$900(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  showDialog(android.support.v4.app.Fragment,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onWeatherChangeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  returnWeatherTypes(net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setMaxX$app_productionRelease(java.lang.Float)
net.hubalek.android.apps.barometer.activity.UpgradeActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  android.support.v7.preference.Preference  getAltitudePreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$5:  void  <init>()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  setMEarliestTimeWhenGaugeUpdateIsPossible(long)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$setMEarliestTimeWhenGaugeUpdateIsPossible$cp(long)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  <init>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getDecimalPlacesOnScalePreference()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_ADD_ALERT()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  java.lang.String  access$getEXTRA_ADD_ALERT$cp()
net.hubalek.android.apps.barometer.model.DataSplitter$PointType:  void  <clinit>()	net.hubalek.android.apps.barometer.model.DataSplitter$PointType:  void  <init>(java.lang.String,int)
net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  com.google.android.gms.analytics.Tracker  getTracker(android.content.Context)	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  com.google.android.gms.analytics.GoogleAnalytics  getAnalytics()
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  setSInstance(net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  access$setSInstance$cp(net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.PlaceInfo,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMAdapter$p(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$902(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onResume()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onResume()
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,lecho.lib.hellocharts.model.PointValue[])	net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,java.util.List)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)	net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  boolean  isPaidTheme()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  onChartDataUpdated(java.util.ArrayList)	net.hubalek.android.apps.barometer.utils.AssertionUtils:  void  assertNotNull(java.lang.Object,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  void  <clinit>()	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPreExecute()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1302(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment  newInstance(java.lang.CharSequence,float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_TITLE()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)	net.hubalek.android.apps.barometer.utils.BaseTextWatcher:  void  <init>()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  int  getItemViewType(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData,int)	net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  java.lang.String  getMDayOfTheWeek$app_productionRelease()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$1:  void  onClick(android.view.View)	net.hubalek.android.apps.barometer.activity.TableViewActivity$Companion:  android.content.Intent  newIntent$app_productionRelease(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putBoolean(android.content.Context,int,boolean)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_MESSAGE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_MESSAGE$cp()
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(float,java.lang.String,int,int)	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(long,float,java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$DialogFiringOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  skuPurchaseSuccessful(java.lang.String)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  setValueForProductId(java.lang.String,boolean)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$onCreate$1:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$onCreate$1:  void  invoke()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  onItemClick(java.lang.Object,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.PlaceInfo,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  eachInAppProductView$app_productionRelease(kotlin.jvm.functions.Function1)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  android.widget.LinearLayout  getMInAppProductsContainer()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  threeHoursChange()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRGBSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateGreen(int)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.commons.dialogs.ColorPickerActivity$4:  void  onClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.EditText  access$700(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatTime(long)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatTime(android.content.Context,long)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)
net.hubalek.android.commons.dialogs.ColorPickerActivity$17$1:  void  onClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$902(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2$1:  void  invoke()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  access$revertCheckboxToUnchecked(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,long,java.lang.String,java.lang.String,int,java.lang.String)	net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,long,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  int  getIconResIdVector()	net.hubalek.android.apps.barometer.model.AlertCategory:  int  getIconDrawableResId()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask  access$getMSensorEventLoggerTask$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator:  int  getLabelStringResId()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeNeverActionSelected()	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  int  getDefaultDiameter(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberChartZoom(lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateOtherChartsExcept(lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$onCreate$1:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$onCreate$1:  void  <init>()
net.hubalek.android.apps.barometer.activity.UpgradeActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$3:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCustomTypeSelected$app_productionRelease()
net.hubalek.android.apps.barometer.activity.UpgradeActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity)	net.hubalek.android.apps.barometer.activity.UpgradeActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity,android.view.View)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <init>()	net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <init>(java.lang.String,int,double,double,java.lang.String,double,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3$1:  void  onMapLoaded()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onMapReady(com.google.android.gms.maps.GoogleMap)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaRgb(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaRgbTv(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  access$getARG_ALERT_CATEGORY$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getARG_ALERT_CATEGORY()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHue(float[])
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  run()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  reconfigureGaugeView(android.content.Context,net.hubalek.android.apps.barometer.views.GaugeView2,net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  access$getDEFAULT_TREND_ICON$p(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion)
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  onChartDataUpdated(java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  access$updateChartData(net.hubalek.android.apps.barometer.activity.TableViewActivity,java.util.ArrayList)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  nHoursChange(int)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setRecentHours(int)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$myPlacesOnClickListener$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()	net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getConditionTemplate()
net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote,android.view.View)	net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding,net.hubalek.android.apps.barometer.views.DismissibleNote)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  boolean  validatePlaceCode()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  isUnique(java.lang.String,java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_CHOICES()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getARG_CHOICES$cp()
net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  discardSampleIfReportedTooOften(long,java.lang.String,java.util.List)	net.hubalek.android.apps.barometer.utils.Utils:  boolean  equals(java.lang.Object,java.lang.Object)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onInfoIconClicked(net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.views.AlertTypeView:  net.hubalek.android.apps.barometer.model.AlertCategory  getAlertCategory()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  values()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  getALL_VALUES()
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  skuCancelled(java.lang.String)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  setValueForProductId(java.lang.String,boolean)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  returnValue()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  java.lang.String  collectRecentColors(java.lang.Integer,net.hubalek.android.commons.components.ColorRectangle[])
net.hubalek.android.apps.barometer.activity.MainActivity$createLineChartView$1:  boolean  onTouch(android.view.View,android.view.MotionEvent)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$rememberChartZoom(net.hubalek.android.apps.barometer.activity.MainActivity,lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  broadcastWidgetUpdate()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  checkIsAlive(net.hubalek.android.apps.barometer.service.AirPressureStats)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  access$getARG_MAX_VALUE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  isOutOfNeighbours(java.util.List,int,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.model.ChartItem:  java.lang.String  getPlaceCode()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.model.PlaceInfo:  double  getLongitude()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  java.util.List  getOpenSourceLibraries()	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$OpenSourceLibrary:  void  <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
net.hubalek.android.apps.barometer.model.PlaceInfo:  net.hubalek.android.apps.barometer.model.PlaceInfo  copy$default(net.hubalek.android.apps.barometer.model.PlaceInfo,java.lang.String,int,double,double,java.lang.String,double,int,java.lang.Object)	net.hubalek.android.apps.barometer.model.PlaceInfo:  net.hubalek.android.apps.barometer.model.PlaceInfo  copy(java.lang.String,int,double,double,java.lang.String,double)
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$902(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$000(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  returnValue()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getRangeMaxPreference()
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  access$800(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.UpgradeActivity:  void  onBillingInitialized()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  itemClicked()
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  and()	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setSecondaryConditionOperator(net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator)
net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.utils.Utils:  android.content.Intent  getEmailIntent()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  void  persistData(android.content.Context,java.util.List)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.model.AlertDefinition:  java.lang.String  getNotificationTitle()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  boolean  checkPermissionAndAskIfNeeded(android.app.Activity,android.support.v4.app.FragmentManager,kotlin.jvm.functions.Function0)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  boolean  necessaryPermissionMissing(android.content.Context)
net.hubalek.android.apps.barometer.views.RoundButtonView:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.RoundButtonView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.widget.ProgressBar  getMLoadingProgressBar()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_TITLE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_TITLE()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)	net.hubalek.android.apps.barometer.model.PlaceInfo:  void  setDiameterMeters(int)
net.hubalek.android.apps.barometer.service.BarometerLoggingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.BarometerLoggingService$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updatePreview()	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSaveInstanceState(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_TO_EDIT()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.widget.TextView  getMNoDataNoteTv()
net.hubalek.android.apps.barometer.model.AlertCategory:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertCategory:  void  <init>(java.lang.String,int,int,int,int,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.widget.Button)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  boolean  access$2000(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$angleToY(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,double,double)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateIntValueSummary(android.support.v7.preference.Preference,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  int  getDecimalPoints(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.model.PressureUnit:  int  getDecimalPoints()
net.hubalek.android.apps.barometer.activity.MainActivity$onZoomOut$1:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainActivity$onZoomOut$1:  void  <init>()
net.hubalek.android.apps.barometer.BarometerApplication:  void  onCreate()	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  java.lang.String  getLOG_TAG()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  float  invoke()
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1000(net.hubalek.android.commons.dialogs.ColorPickerActivity,float[],int)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  android.content.Intent  newIntentForDataRemoval(android.content.Context,long)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getEXTRA_ITEM_TIME()
net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  void  <init>(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder)
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  restoreData()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  int  getDecimalPoints(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  int  access$getDiameterMeters$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onResume()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeNeverActionSelected()	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  setFirstStartToNever(android.content.Context)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  nHoursChange(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.activity.MainActivity:  float  convertToUnit(net.hubalek.android.apps.barometer.model.PressureUnit,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  access$convertToValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,float,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateIntValueSummary(android.support.v7.preference.Preference,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getMinorDivisionsPreference()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.Object  doWorkInBackground()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  net.hubalek.android.apps.barometer.model.PlaceInfo  doWorkInBackground()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  createUpgradeDialog(android.content.Context,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setMessage(java.lang.String)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$2:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onWeatherChangeSelected$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  java.lang.Object  doWorkInBackground()	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  void  persistData(android.content.Context,java.util.List)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getARG_CHOICES$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  setTrend(net.hubalek.android.apps.barometer.model.Trend)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  threeHoursChange()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  nHoursChange(int)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queyAirPressure()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  checkLocationPermission()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$valueToAngle(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,float,float)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  copy$default(net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change,java.lang.String,long,float,java.lang.String,long,float,float,int,java.lang.Object)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  copy(java.lang.String,long,float,java.lang.String,long,float,float)
net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(java.lang.Object)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  access$getDEFAULT_TREND_ICON$p(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  getDEFAULT_TREND_ICON()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$myPlacesOnClickListener$1:  void  onClick(android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  android.content.Intent  newIntent(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateBlue(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateBlueTv(int)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  access$updateWidgetPreview(net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment)	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  updateWidgetPreview()
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult)
net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  void  persistData(android.content.Context,java.util.List)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putString(android.content.Context,int,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  getUnitLabel(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxSummary(android.support.v7.preference.Preference,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  perform(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  perform(android.widget.Button)
net.hubalek.android.apps.barometer.utils.ColorUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.ColorUtils:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  perform(android.widget.Button)	net.hubalek.android.commons.dialogs.ColorPickerActivity$16$1:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity$16)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  createUpgradeDialog(android.content.Context,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  loadMSLPParameters()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getARG_SELECTION$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_SELECTION()
net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  net.hubalek.android.apps.barometer.model.PlaceInfo  doWorkInBackground()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getARG_PLACE_INFO()
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$2:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$2:  void  invoke()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  android.hardware.SensorManager  access$getMSensorManager$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$1:  void  afterTextChanged(android.text.Editable)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setNotificationText(java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.commons.dialogs.ColorPickerActivity$15$1:  void  onClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$000(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.utils.AssertionUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.AssertionUtils:  void  <init>()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  btnOkClicked$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  android.view.LayoutInflater  configureThemeToFragmentInOnCreateView(android.support.v4.app.Fragment,android.view.LayoutInflater)
net.hubalek.android.apps.barometer.utils.ArcUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  access$assertCallbackImplementation(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  assertCallbackImplementation()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  void  <init>(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog,android.content.Context)	net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme[]  values()
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  int  getItemViewType(java.lang.Object,int)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  int  getItemViewType(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData,int)
net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToInchesOfMercury(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createDataLine(int,java.util.List)	net.hubalek.android.apps.barometer.activity.MainActivity:  android.graphics.Shader  createShader(int,int)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  <init>()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  access$getEXTRA_ITEM_TIME$p(net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getEXTRA_ITEM_TIME()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  access$throwTargetDialogAssertionError(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  throwTargetDialogAssertionError()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog  newInstance(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  <init>()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$1:  void  onClick(android.view.View)	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  float  getTemperature()
net.hubalek.android.apps.barometer.model.ChartItem:  net.hubalek.android.apps.barometer.model.ChartItem  copy(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int)	net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int)
net.hubalek.android.apps.barometer.utils.MultipleClicksDetector:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.MultipleClicksDetector$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.AlertDefinition,int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$DialogFiringOnClickListener:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment,kotlin.jvm.functions.Function0,int,int)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onPrepareDialogBuilder(android.support.v7.app.AlertDialog$Builder)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$onPrepareDialogBuilder$1:  void  <init>(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog)
net.hubalek.android.apps.barometer.views.InAppProductView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.views.InAppProductView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.InAppProductView,android.view.View)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention  getInstance(android.content.Context)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  <init>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.PlaceInfo,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  android.content.Intent  newIntent(android.content.Context,int,net.hubalek.android.apps.barometer.model.PlaceInfo,java.util.Collection)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  java.util.List  processChartData(java.util.List)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  float  getValue(android.widget.EditText,android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PRESSURE_UNIT()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHue(float[])
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  removeRecord(long)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setOnInfoIconClickListener(net.hubalek.android.apps.barometer.views.AlertTypeView$OnInfoIconClickListener)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$1:  eu.inloop.simplerecycleradapter.SettableViewHolder  onCreateViewHolder(android.view.ViewGroup,int)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.content.Context,int,android.view.ViewGroup)
net.hubalek.android.apps.barometer.model.ChartItem:  void  <clinit>()	net.hubalek.android.apps.barometer.model.ChartItem$Creator:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getDecimalPlacesOnBigNumberPreference()
net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  void  invokePlayStore(android.content.Context,java.lang.String,java.lang.String)	net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  void  invokePlayStore(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  com.google.android.gms.maps.GoogleMap  access$getMMap$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)
net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onResume()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.views.DismissibleNote:  void  onOkButtonClicked$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$2:  void  afterTextChanged(android.text.Editable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  net.hubalek.android.apps.barometer.model.AlertDefinition  getMAlertDefinition$app_productionRelease()
net.hubalek.android.apps.barometer.activity.MainActivity:  float  getTopCorrection(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  getTopCorrection()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onMapReady(com.google.android.gms.maps.GoogleMap)	net.hubalek.android.apps.barometer.model.PlaceInfo:  double  getLongitude()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$12:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  configureDefaults()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  setDefaults(android.content.Context,int[])
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  onSuccess(java.lang.Object)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  onSuccess(android.location.Location)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_STRONG_WIND()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity,java.lang.String,int)
net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$2:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$2:  void  <init>()
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$dialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateGreen(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateGreenTv(int)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTRONG_WIND$p(net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTRONG_WIND()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  int  access$getDiameterMeters$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  int  getDiameterMeters()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_PREFIX()	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.lang.String  access$getFILE_NAME_PREFIX$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getRangeMinPreference()
net.hubalek.android.apps.barometer.activity.MainActivity$DateTimeFormatter:  int  formatValueForManualAxis(char[],lecho.lib.hellocharts.model.AxisValue)	net.hubalek.android.apps.barometer.activity.MainActivity$DateTimeFormatter:  int  formatValue(char[],float)
net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  configureThemeToActivityInOnCreate(android.app.Activity,boolean,boolean,boolean)
net.hubalek.android.apps.barometer.service.AirPressureStats:  java.io.File  getFileNameForDate(long)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_SUFFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onPositiveButtonClicked(int)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$Companion:  android.content.Intent  newIntent(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$300(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()
net.hubalek.android.apps.barometer.views.RoundButtonView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.RoundButtonView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  run()	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	net.hubalek.android.apps.barometer.views.BulletTextView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onAddWidgetFabClicked$app_productionRelease()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2$1:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2$1:  void  invoke()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType  getPressureChange()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  run()	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.views.GaugeView2  getMGaugeView2()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateGreen(int)
net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult  createLineChartView()	net.hubalek.android.apps.barometer.utils.Utils:  int  generateViewId()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPreExecute()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  eachInAppProductView$app_productionRelease(kotlin.jvm.functions.Function1)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  java.lang.String  getThemePreferenceKey(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$502(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setSampleData(android.content.Context)	net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  <init>(android.content.Context)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  sampleCouldBeAdded()	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.util.HashMap  access$getMDetails$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask)
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1700(net.hubalek.android.commons.dialogs.ColorPickerActivity,int,int)
net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToInchesOfMercury(float)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  java.util.List  processChartData(java.util.List)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$2:  void  run()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  android.support.design.widget.FloatingActionButton  getMFloatingActionButton()
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1802(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getCharLineColor(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MainActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onResume()	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getMInstance()	net.hubalek.android.apps.barometer.service.AirPressureStats:  net.hubalek.android.apps.barometer.service.AirPressureStats  access$getMInstance$cp()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2:  float  getCorrectedValue(float)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$3:  void  onOkButtonClicked()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putBoolean(android.content.Context,int,boolean)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc(android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int)	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc$default(net.hubalek.android.apps.barometer.utils.ArcUtils,android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean,int,java.lang.Object)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  skuPurchaseSuccessful(java.lang.String)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  getValueForProductId(java.lang.String)
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setMaxY(float)
net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  perform(android.widget.Button)	net.hubalek.android.commons.dialogs.ColorPickerActivity$15$1:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity$15)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show$default(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder,android.support.v4.app.FragmentManager,java.lang.String,int,java.lang.Object)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show(android.support.v4.app.FragmentManager,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$5:  boolean  onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  isCustomizationPackOwned()
net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getDefaultTheme(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.Object  getDefaultsForKey(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateAltitudeSummary(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.support.v7.widget.SwitchCompat  getMEnableMyPlacesFunctionality()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_TITLE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_TITLE$cp()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTRONG_WIND()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTRONG_WIND$cp()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  access$getSILENT_NOTIFICATION_THRESHOLD$p(net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  getSILENT_NOTIFICATION_THRESHOLD()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  <init>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  float  invoke()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateTemperatureSummary(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatTemperature(android.content.Context,float)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.views.InAppProductView:  java.lang.String  getSku()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer:  void  <init>()
net.hubalek.android.apps.barometer.service.AirPressureStats:  net.hubalek.android.apps.barometer.model.ChartItem  parseRow(java.lang.String,com.google.gson.JsonParser)	net.hubalek.android.apps.barometer.service.AirPressureStats:  com.google.gson.JsonObject  parseLine(java.lang.String,com.google.gson.JsonParser)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  void  persistData(android.content.Context,java.util.List)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putString(android.content.Context,int,java.lang.String)
net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <clinit>()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  onItemClick(java.lang.Object,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.AlertDefinition,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$2:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  deleteRecord()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.model.AlertCategory:  int  getDescriptionStringResId()
net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote)	net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote,android.view.View)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  access$getEXTRA_EXISTING_DEFINITIONS$p(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_EXISTING_DEFINITIONS()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  currentPressure()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  <init>()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  <init>()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  void  show(android.support.v4.app.FragmentManager)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  getUnitCode()	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_RESULT()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  reconfigureGaugeView(android.content.Context,net.hubalek.android.apps.barometer.views.GaugeView2,net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTRONG_WIND$p(net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  loadMSLPParameters()	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  onPreferencesChanged()	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  refreshPreview()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment  newInstance(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Float,java.lang.Float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_TITLE()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  getUnitCode()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.TableViewActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  perform(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  perform(android.widget.TextView)
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  suppressForAWhile()	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  access$getSILENT_NOTIFICATION_THRESHOLD$p(net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion)
net.hubalek.android.apps.barometer.service.AirPressureStats:  int  getWeight(int)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  access$getWEIGHTS$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_SUFFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_SUFFIX()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  double  altitudeToMeters(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.AlertDefinition,int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PRESSURE_UNIT()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment  newInstance(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Float,java.lang.Float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PREF_KEY()
net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.Object  getDefaultsForKey(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMAdapter$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.activity.PreferencesActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.PreferencesActivity$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  long  getItemId(java.lang.Object,int)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  long  getItemId(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData,int)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  <init>()
net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  access$getEXTRA_EXISTING_DEFINITIONS$p(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()	net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer:  void  setPlaceholdersToTextView(android.widget.TextView,int,java.util.Map,net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer$OnLinkClickedListener)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  loadFromBundle(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_INDEX()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment,int,int,boolean,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment,int,int,java.lang.Float,java.lang.Float,boolean,int)
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_MESSAGE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  void  startPolling(android.content.Context)	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  java.lang.String  getLOG_TAG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  void  <init>()
net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <init>(java.lang.String,int,double,double,java.lang.String,double,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <init>(java.lang.String,int,double,double,java.lang.String,double)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  rise()	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setPressureChange(net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  checkForAlerts$app_productionRelease(android.content.Context,net.hubalek.android.apps.barometer.service.AirPressureStats,net.hubalek.android.apps.barometer.model.AlertCategory[],java.util.Collection,boolean)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider:  void  <init>(java.util.List,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  float  getAxisStep(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSubmit$app_productionRelease()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  boolean  validatePlaceName()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setEnabled(boolean)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getThemeAccentColor(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocationAndTemperature(android.location.Location,float)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  <init>(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location,float)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  getDEFAULT_TREND_ICON()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  int  access$getDEFAULT_TREND_ICON$cp()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  void  <init>(java.lang.String,long,float,java.lang.String,long,float,float)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.support.v7.widget.RecyclerView  getMRecyclerView()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Object)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  void  <init>()
net.hubalek.android.apps.barometer.views.InAppProductView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(int,int,net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <init>(int,int,int,net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()	net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getSecondaryConditionTemplate()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onResume()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  <clinit>()	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  onTabChanged(java.lang.String)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_ALERT_TITLE$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TITLE()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1902(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  access$getARG_ALERT_DEFINITION_TO_EDITED$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getARG_ALERT_DEFINITION_TO_EDITED()
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$Mode:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder$Mode:  void  <init>(java.lang.String,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  altitudeDetected(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  void  launchSinglePoll(android.content.Context)
net.hubalek.android.apps.barometer.model.AlertDefinition$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.content.Context,int,android.view.ViewGroup)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  init()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  java.util.List  getOpenSourceLibraries()
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$900(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.views.InAppProductView:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.PreferencesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity$1:  void  onClick(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$000(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  checkForAlerts$app_productionRelease(android.content.Context,net.hubalek.android.apps.barometer.service.AirPressureStats,net.hubalek.android.apps.barometer.model.AlertCategory[],java.util.Collection,boolean)	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  copy$default(net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result,net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,int,java.lang.Object)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  copy(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  void  <clinit>()	net.hubalek.android.apps.barometer.utils.ConversionUtils:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getIF_YOU_LIKE_THRESHOLD$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getIF_YOU_LIKE_THRESHOLD()
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  getSInstance()	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  access$getSInstance$cp()
net.hubalek.android.apps.barometer.service.BarometerLoggingService:  boolean  onStopJob(com.firebase.jobdispatcher.JobParameters)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  onDestroy()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  access$validateForm(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.TextView)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  validateForm(android.support.v7.app.AlertDialog,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog  newInstance(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  <init>()
net.hubalek.android.apps.barometer.utils.ThemeUtils:  android.view.LayoutInflater  configureThemeToFragmentInOnCreateView(android.support.v4.app.Fragment,android.view.LayoutInflater)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getCurrentTheme(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  java.lang.Object  doWorkInBackground()	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setPositiveButton(int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.widget.TextView  getMNoDataNoteTv()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onContainerClicked()	net.hubalek.android.apps.barometer.views.AlertTypeView$onContainerClicked$1:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$rememberChartZoom(net.hubalek.android.apps.barometer.activity.MainActivity,lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberChartZoom(lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$600(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartHistoricalDataAreaColor(android.content.Context)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getColorByAttrId(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Viewport  calcCurrentViewPort(lecho.lib.hellocharts.model.Viewport)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateLightness(float[])	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateLightnessTv(int)
net.hubalek.android.apps.barometer.activity.MainActivity$reconfigureGauge$1:  void  run()	net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.views.GaugeView2  getMGaugeView()
net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PlaceInfo$Creator:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$900(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change$Creator:  void  <init>()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Object)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onSaveInstanceState(android.os.Bundle)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  java.lang.String  collectRecentColors(java.lang.Integer,net.hubalek.android.commons.components.ColorRectangle[])
net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1000(net.hubalek.android.commons.dialogs.ColorPickerActivity,float[],int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  hsvToColor(float[],int)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  boolean  checkPermissionAndAskIfNeeded(android.app.Activity,android.support.v4.app.FragmentManager,kotlin.jvm.functions.Function0)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  <init>()	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getSecondaryConditionTemplate()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  boolean  isSecondaryConditionAllowed()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setMessage(int)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  android.support.v7.preference.Preference  getTemperaturePreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  loadMSLPParameters()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$5:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  <init>()
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  setPressureMilliBars(float)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setDescription(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putFloat(android.content.Context,int,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_OTHER_PLACES()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getEXTRA_OTHER_PLACES$cp()
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  discardSampleIfReportedTooOften(long,java.lang.String,java.util.List)	net.hubalek.android.apps.barometer.model.ChartItem:  java.lang.String  getPlaceCode()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$DialogFiringOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_VALUE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_VALUE()
net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  int  getLabelStringResId()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMAdapter$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  <init>(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.model.DataSplitter$Point:  net.hubalek.android.apps.barometer.model.ChartItem  getChartItem()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_POSITIVE_BUTTON_TEXT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_POSITIVE_BUTTON_TEXT()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
net.hubalek.android.apps.barometer.service.BarometerLoggingService:  void  <clinit>()	net.hubalek.android.apps.barometer.service.BarometerLoggingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  restoreData()	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  setNeedleColor(int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  codeToTabIdx(java.lang.String)
net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator  getSecondaryConditionOperator()	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  boolean  isSecondaryConditionAllowed()
net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MainActivity$DateTimeFormatter:  int  formatValue(char[],float)	net.hubalek.android.apps.barometer.utils.Utils:  long  roundTimeToFifteenMinutes(long)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onDestroy()	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  purge()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  void  <init>()
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  resetFirstStart(android.content.Context)	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  getFirstStart(android.content.Context)
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView,android.view.View)	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding,net.hubalek.android.apps.barometer.views.AlertTypeView)
net.hubalek.android.apps.barometer.activity.MainActivity:  android.graphics.Shader  createShader(int,int)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getSemiSemiTransparentColor(int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMAdapter$p(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  <init>()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <init>()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  updateSentences()	net.hubalek.android.apps.barometer.model.AlertDefinition:  java.util.Map  toMap(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$1:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$1:  float  invoke()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  float  access$getValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment,android.widget.EditText,android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  refreshPreview()
net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  loadData(android.content.Context)	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  removeInvalidDefinitions(java.util.List)
net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc$default(net.hubalek.android.apps.barometer.utils.ArcUtils,android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean,int,java.lang.Object)	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc(android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$1:  eu.inloop.simplerecycleradapter.SettableViewHolder  onCreateViewHolder(android.view.ViewGroup,int)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.content.Context,int,android.view.ViewGroup)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$3:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.support.v7.widget.RecyclerView  getMRecyclerView()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  createUpgradeDialog(android.content.Context,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setPositiveButton(int)
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int)	net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  void  <init>(java.lang.String,int,int,int,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRed(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRedTv(int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onExtremeWeatherChangeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  returnWeatherTypes(net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateIntSettings(float,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateIntValueSummary(android.support.v7.preference.Preference,int)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Boolean)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  kotlin.jvm.functions.Function0  access$getStopSelf$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)
net.hubalek.android.apps.barometer.model.PressureUnit$5:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToTorrs(float)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  android.support.v7.preference.Preference  getTemperaturePreference()
net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  android.content.SharedPreferences  getSharedPreferences(android.content.Context)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  loadFromBundle(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_OTHER_PLACES()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_PREFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_PREFIX()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TITLE()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.views.InAppProductView:  void  <init>(android.content.Context,android.util.AttributeSet,int)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.views.InAppProductView:  void  <init>(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.MainActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSubmit$app_productionRelease()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.preferences.SeekBarPreference:  java.lang.Object  onGetDefaultValue(android.content.res.TypedArray,int)	net.hubalek.android.commons.preferences.SeekBarPreference:  int  validateValue(int)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <clinit>()	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result$Creator:  void  <init>()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.model.AlertCategory:  int  getIconDrawableResId()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getARG_CHOICES$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_CHOICES()
net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.BaseActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$1:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onOnlyWithMyPlacesNoteButtonDismissClicked$app_productionRelease()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onPrepareDialogBuilder(android.support.v7.app.AlertDialog$Builder)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  void  <init>(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog,android.content.Context)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onOnlyWithMyPlacesNoteButtonDismissClicked$app_productionRelease()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putBoolean(android.content.Context,int,boolean)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.views.DismissibleNote:  void  setOnOkGotItClickedListener(net.hubalek.android.apps.barometer.views.DismissibleNote$OkGotItCallback)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_STRONG_WIND()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTORM_WITH_STRONG_WIND$cp()
net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc(android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint)	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc$default(net.hubalek.android.apps.barometer.utils.ArcUtils,android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean,int,java.lang.Object)
net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  onTabChanged(java.lang.String)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$600(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  discardSampleIfReportedTooOften(long,java.lang.String,java.util.List)	net.hubalek.android.apps.barometer.service.AirPressureStats:  long  timeOfLastSample(java.util.List)
net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1602(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show$default(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder,android.support.v4.app.FragmentManager,java.lang.String,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment  newInstance(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Float,java.lang.Float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(java.lang.Object)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_GALE()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(java.lang.Object)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment,android.widget.CheckBox)
net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getSInstance()	net.hubalek.android.apps.barometer.utils.LicensingUtils:  net.hubalek.android.apps.barometer.utils.LicensingUtils  access$getSInstance$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.model.PlaceInfo  addAltitudeToPlaceInfo$app_productionRelease(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.model.PlaceInfo:  double  getLatitude()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TEXT()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getEXTRA_ALERT_TEXT$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_SELECTION()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getARG_SELECTION$cp()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateGauge(float)	net.hubalek.android.apps.barometer.activity.MainActivity:  float  convertToUnit(net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.WidgetConfigActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_1()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getPOORER_WEATHER_TO_COME_1$cp()
net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  copy(boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  void  <init>(boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)
net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  millibarsToTorrs(float)
net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertDefinition  copy$default(net.hubalek.android.apps.barometer.model.AlertDefinition,java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator,int,java.lang.Object)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertDefinition  copy(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  setGaugeBackgroundColor(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getDecimalPlacesOnScalePreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.model.AlertDefinition$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.AlertDefinition$Companion:  void  <init>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setColor(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRed(int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  java.lang.Object  getSInstanceLock()	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  java.lang.Object  access$getSInstanceLock$cp()
net.hubalek.android.commons.preferences.SeekBarPreference:  void  onProgressChanged(android.widget.SeekBar,int,boolean)	net.hubalek.android.commons.preferences.SeekBarPreference:  void  updatePreference(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  java.lang.String  access$getDEFAULT_TAG$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  setFirstStartToNever(android.content.Context)	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  android.content.SharedPreferences  getPreferences(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1502(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)
net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$1:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$1:  void  invoke()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatRadius(android.content.Context,int)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result$Creator:  java.lang.Object  createFromParcel(android.os.Parcel)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult)
net.hubalek.android.apps.barometer.BarometerApplication$Companion:  java.lang.String  getLOG_TAG()	net.hubalek.android.apps.barometer.BarometerApplication:  java.lang.String  access$getLOG_TAG$cp()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  java.lang.String  extractAppVersionFromManifest(android.app.Activity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog  newInstance(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getARG_PLACE_INFO()
net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.model.PlaceInfo  addAltitudeToPlaceInfo$app_productionRelease(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.model.PlaceInfo:  double  getLongitude()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  showDialog(android.support.v4.app.Fragment,int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.AlertDefinition,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertCategory  getAlertCategory()
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  access$800(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  returnWeatherTypes(net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_ADD_ALERT()
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  copy(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  void  <init>(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  setEnabled(boolean)
net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$alertDialog$1:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$alertDialog$1:  void  <init>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  revertCheckboxToUnchecked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.widget.CompoundButton$OnCheckedChangeListener  access$getMAlertsEnabledCheckboxListener$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressure(float)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$1:  void  afterTextChanged(android.text.Editable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  net.hubalek.android.apps.barometer.model.AlertDefinition  getMAlertDefinition$app_productionRelease()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getMEarliestTimeWhenGaugeUpdateIsPossible()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  android.content.Intent  newIntent$default(net.hubalek.android.apps.barometer.activity.MainActivity$Companion,android.content.Context,boolean,int,java.lang.Object)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  android.content.Intent  newIntent(android.content.Context,boolean)
net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator:  void  <clinit>()	net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator:  void  <init>(java.lang.String,int,int,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_VALUE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getARG_VALUE$cp()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onResume()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onResume()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$DialogFiringOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment  newInstance(java.lang.CharSequence,float,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_MIN_VALUE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_MIN_VALUE$cp()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.CharSequence  formatChangeInfo(float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressureChange(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  _$_clearFindViewByIdCache()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  <clinit>()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_TO_EDIT()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getEXTRA_PLACE_TO_EDIT$cp()
net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit:  void  <clinit>()	net.hubalek.android.apps.barometer.model.PressureUnit:  void  <init>(java.lang.String,int,int,float,float,net.hubalek.android.apps.barometer.model.PressureUnit$PressureConverter,int,int,int,int,java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit$PressureFormatter)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  android.content.Intent  newIntent(android.content.Context,boolean)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getEXTRA_SUPPRESS_NOTIFICATION()
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  void  <init>()	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  getEvaluationResult()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  myPlacesDisabled()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  boolean  getBoolean(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatAirPressureInfo(long,float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatTime(long)
net.hubalek.android.apps.barometer.model.DataSplitter:  void  addPointToPlace(net.hubalek.android.apps.barometer.model.DataSplitter$Result,net.hubalek.android.apps.barometer.model.DataSplitter$PointType,java.lang.String,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.model.DataSplitter$Result:  net.hubalek.android.apps.barometer.model.DataSplitter$PlaceLine  getPlaceLine$app_productionRelease(java.lang.String)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updatePreview()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.EditText)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getPREFIX_ARG$cp()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  setupPlusMinusButtons(int,int[])
net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  perform(android.view.View)	net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  perform(android.widget.Button)
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  long  getItemId(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData,int)	net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  long  getMTime$app_productionRelease()
net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.TableViewActivity)
net.hubalek.android.apps.barometer.activity.MainActivity$updateChartData$2:  void  onClick(android.view.View)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomOut(net.hubalek.android.apps.barometer.activity.MainActivity)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateAltitudeSummary(android.support.v7.preference.Preference)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatAltitude(android.content.Context,float)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <init>(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  net.hubalek.android.apps.barometer.model.PlaceInfo  doWorkInBackground()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.model.PlaceInfo  addAltitudeToPlaceInfo$app_productionRelease(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updatePreview()	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeLaterActionSelected()	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  resetFirstStart(android.content.Context)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  customAlertSaved(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  returnWeatherTypes(net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  access$convertToValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  convertToValue(float,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$500(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  between(float,float)
net.hubalek.android.apps.barometer.utils.Utils:  android.text.SpannableStringBuilder  makeTextClickable(android.content.Context,int,int,android.view.View$OnClickListener)	net.hubalek.android.apps.barometer.utils.Utils$makeTextClickable$click$1:  void  <init>(android.view.View$OnClickListener)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.widget.ProgressBar  getMLoadingProgressBar()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getRangeMaxPreference()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.support.v7.preference.Preference  findPreference(int)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  removeRecord(long)	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  removeSample(long)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  java.lang.Object  invoke()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  float  invoke()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  boolean  checkPlayServices()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocation$1:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  android.hardware.SensorManager  access$getMSensorManager$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1700(net.hubalek.android.commons.dialogs.ColorPickerActivity,int,int)
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  setFirstStartToNever(android.content.Context)	net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  void  storeTimeToPreferences(android.content.SharedPreferences,long)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  java.lang.Object  invoke(java.lang.Object)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment  newInstance(java.lang.CharSequence,float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  <init>()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.model.PressureUnit:  net.hubalek.android.apps.barometer.model.PressureUnit  valueOf(java.lang.String)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartAxisLineColor(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getRangeMaxPreference()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  enableDisableManualRangePreferences()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  android.support.v7.preference.Preference  getRangeMinPreference()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_POSITIVE_BUTTON_TEXT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  configureThemeToActivityInOnCreate(android.app.Activity,boolean,boolean,boolean)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getCurrentTheme(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHue(float[])	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHueTv(int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.Object  getDefaultsForKey(android.content.Context,java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  getShortUnit(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  reconfigureGauge()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getInstance$app_productionRelease(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  access$setMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion,long)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  setMEarliestTimeWhenGaugeUpdateIsPossible(long)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  android.support.v7.preference.Preference  getAltitudePreference()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AboutTheAppActivity)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AboutTheAppActivity,android.view.View)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onDialogClosed(boolean)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  android.support.v7.preference.ListPreference  getListPreference()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCreate(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  copy$default(net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change,int,java.lang.Object)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  copy(boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createDataLine(int,java.util.List)	net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartHistoricalDataAreaColor(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  loadMSLPParameters()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  java.lang.String  getString(android.content.Context,int)
net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator:  void  <clinit>()	net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator:  void  <init>(java.lang.String,int,int)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  float  getAltitude()	net.hubalek.android.apps.barometer.utils.ConfigUtils:  float  getFloat(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onDestroyView()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$5:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getGALE_WARNING()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocation(android.location.Location)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  boolean  canHaveAmbientTemperatureSensor()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  higherThan(float)
net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$2:  void  <clinit>()	net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$2:  void  <init>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$2:  void  doClick(android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  deleteRecord()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_VALUE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onAddPlaceButtonClicked$app_productionRelease()	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity$onZoomIn$1:  java.lang.Object  invoke(java.lang.Object,java.lang.Object)	net.hubalek.android.apps.barometer.activity.MainActivity$onZoomIn$1:  void  invoke(lecho.lib.hellocharts.view.LineChartView,lecho.lib.hellocharts.model.Viewport)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1000(net.hubalek.android.commons.dialogs.ColorPickerActivity,float[],int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  float[]  colorToHsv(int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  detectMyPlacesAltitudeIfNecessary()	net.hubalek.android.apps.barometer.utils.PlacesInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  void  invokePlayStore(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  java.lang.String  formatRestOfTheURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>()	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <init>(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator,int,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$3:  void  onOkButtonClicked()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  net.hubalek.android.apps.barometer.views.DismissibleNote  getMDismissibleNote()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  eachTab(int,net.hubalek.android.commons.dialogs.ColorPickerActivity$EachTabCallback)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.model.ChartItem:  void  setTemperatureCelsius(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog  newInstance()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  <init>()
net.hubalek.android.commons.components.ColorRectangle:  void  setBackgroundColor(int)	net.hubalek.android.commons.components.ColorRectangle:  void  setColor(int)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  android.widget.LinearLayout  getMInAppProductsContainer()
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  java.util.List  processChartData(java.util.List)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onResume()	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.util.ArrayList  getChartDataArrayList$app_productionRelease()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  <clinit>()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateSaturation(float[])
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1:  void  onClick(android.content.DialogInterface,int)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  com.anjlab.android.iab.v3.BillingProcessor  access$getMBillingProcessor$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity)
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  getSILENT_NOTIFICATION_THRESHOLD()	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  long  access$getSILENT_NOTIFICATION_THRESHOLD$cp()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  access$getARG_MIN_VALUE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_MIN_VALUE()
net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getDefaultTheme(android.content.Context)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  java.lang.String  getThemePreferenceKey(android.content.Context)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocation$1:  void  onSensorChanged(android.hardware.SensorEvent)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$queryAirPresureWithLocationAndTemperature(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location,float)
net.hubalek.android.apps.barometer.service.AirPressureStats:  java.io.File  getFileNameForDate(long)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_PREFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)
net.hubalek.android.commons.preferences.ImageViewPreference:  android.view.View  onCreateView(android.view.ViewGroup)	net.hubalek.android.commons.preferences.ImageViewPreference:  android.graphics.drawable.Drawable  getImageDrawable()
net.hubalek.android.apps.barometer.model.DataSplitter:  void  addPointToPlace(net.hubalek.android.apps.barometer.model.DataSplitter$Result,net.hubalek.android.apps.barometer.model.DataSplitter$PointType,java.lang.String,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.model.DataSplitter$PlaceLine:  void  addPoint$app_productionRelease(net.hubalek.android.apps.barometer.model.DataSplitter$Point)
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  void  <init>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  revertCheckboxToUnchecked()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  access$revertCheckboxToUnchecked(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.EditText  access$700(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity$4:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatValue(android.content.Context,float)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  removeRecord(long)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  int  onStartCommand(android.content.Intent,int,int)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity:  float  getTopCorrection(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  java.lang.String  access$getEXTRA_ITEM_TIME$cp()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getEXTRA_ITEM_TIME()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider:  void  <init>(java.util.List,boolean)	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  checkForAlerts$app_productionRelease(android.content.Context,net.hubalek.android.apps.barometer.service.AirPressureStats,net.hubalek.android.apps.barometer.model.AlertCategory[],java.util.Collection,boolean)
net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator:  net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator[]  values()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onLinkClicked(java.lang.String)
net.hubalek.android.apps.barometer.activity.MainActivity:  float  getAxisStep(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processResultInUiThread(java.lang.Object)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  boolean  validatePlaceName()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSubmit$app_productionRelease()
net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  java.lang.String  getMValue$app_productionRelease()	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$Companion:  android.content.Intent  newIntent(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  onPreferencesChanged()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder  doInBackground(java.lang.Void[])	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  java.lang.Object  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask  access$getMSensorEventLoggerTask$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  <init>(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location,float)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocationAndTemperature(android.location.Location,float)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  int  access$getDEFAULT_TREND_ICON$cp()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  getDEFAULT_TREND_ICON()
net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setAlertCategory(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  returnWeatherTypes(net.hubalek.android.apps.barometer.model.AlertCategory,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.util.Collection)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onAddPlaceButtonClicked$app_productionRelease()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$updateChartData(net.hubalek.android.apps.barometer.activity.MainActivity,java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$2:  void  onChartDataUpdated(java.util.ArrayList)
net.hubalek.android.apps.barometer.service.AirPressureStats:  long  getSystemTime()	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(float,java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateOtherChartsExcept(lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberChartZoom(lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  metersToMiles$app_productionRelease(int)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatRadius(android.content.Context,int)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_UNIT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCustomTypeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$3:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  inchesOfMercuryToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit$3:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  checkForAlerts$app_productionRelease(android.content.Context,net.hubalek.android.apps.barometer.service.AirPressureStats,net.hubalek.android.apps.barometer.model.AlertCategory[],java.util.Collection,boolean)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.support.v7.widget.RecyclerView  getMRecyclerView()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment,android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.UpgradeActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.UpgradeActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity)
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  boolean  canNotificationBeFired()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Boolean)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  android.support.v7.preference.ListPreference  access$getMOnClickActionPreference$p(net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment)	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment$onCreatePreferencesFix$1:  boolean  onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  void  show(android.support.v4.app.FragmentManager)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog  newInstance(java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onDisplayPreferenceDialog(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  int  access$getMClickedDialogEntryIndex$p(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  android.view.View  getView(int,android.view.View,android.view.ViewGroup)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  boolean  isPreferenceActivity()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.model.PressureUnit$4:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding,net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView,android.view.View)
net.hubalek.android.apps.barometer.model.ChartItem:  net.hubalek.android.apps.barometer.model.ChartItem  copy(long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int)	net.hubalek.android.apps.barometer.model.ChartItem:  net.hubalek.android.apps.barometer.model.ChartItem  copy$default(net.hubalek.android.apps.barometer.model.ChartItem,long,float,net.hubalek.android.apps.barometer.model.Trend,java.lang.String,int,int,int,java.lang.Object)
net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  setSInstance(net.hubalek.android.apps.barometer.utils.LicensingUtils)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getInstance(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaRgbTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaRgb(int)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  valueToAngle(float,float,float)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$valueToAngle(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,float,float)
net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$refreshPreview$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  refreshPreview()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  valueChanged(int,float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  <clinit>()
net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  loadDataFromStorage()	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean)
net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getDefaultTheme(android.content.Context)	net.hubalek.android.apps.barometer.utils.ThemeUtils:  net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme  getCurrentTheme(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  int  getNoActionBarThemeResId$app_productionRelease()	net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  configureThemeToActivityInOnCreate(android.app.Activity,boolean,boolean,boolean)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_NEGATIVE_BUTTON_TEXT$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_NEGATIVE_BUTTON_TEXT()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  java.lang.Object  invoke()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1902(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  setTextView(android.widget.TextView)
net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_RESULT$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  java.lang.String  getCurrentPlace()	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  boolean  addSample$app_productionRelease(float,java.lang.String,int,int)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  access$updateChartData(net.hubalek.android.apps.barometer.activity.TableViewActivity,java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  onChartDataUpdated(java.util.ArrayList)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatCoordinates(double,double)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  access$getARG_ALERT_DEFINITION_TO_EDITED$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getARG_ALERT_DEFINITION_TO_EDITED()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$myPlacesOnClickListener$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onInfoIconClicked()	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$2:  void  doClick(android.view.View)
net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.model.PressureUnit$3:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setRequestCode(int)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onDialogClosed(boolean)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  init()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.content.Context,int,android.view.ViewGroup)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)	net.hubalek.android.apps.barometer.service.AirPressureStats:  net.hubalek.android.apps.barometer.model.ChartItem  parseRow(java.lang.String,com.google.gson.JsonParser)
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  java.util.List  getOpenSourceLibraries()	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding,net.hubalek.android.apps.barometer.views.DismissibleNote)	net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote,android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getARG_CHOICES$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_CHOICES()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  isUnique(java.lang.String,java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  boolean  validatePlaceCode()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  access$getARG_ALERT_CATEGORY$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.Object  doWorkInBackground()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder  doInBackground(java.lang.Void[])
net.hubalek.android.apps.barometer.views.AlertTypeView:  net.hubalek.android.apps.barometer.model.AlertCategory  getAlertCategory()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onInfoIconClicked(net.hubalek.android.apps.barometer.views.AlertTypeView)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  getALL_VALUES()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  values()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setTitle(java.lang.CharSequence)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$rememberChartZoom(net.hubalek.android.apps.barometer.activity.MainActivity,lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity$createLineChartView$1:  boolean  onTouch(android.view.View,android.view.MotionEvent)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  checkIsAlive(net.hubalek.android.apps.barometer.service.AirPressureStats)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  broadcastWidgetUpdate()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_2()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.commons.preferences.ColorDisplayingPreference:  void  setColor(int)	net.hubalek.android.commons.preferences.ColorDisplayingPreference:  android.view.View  onCreateView(android.view.ViewGroup)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  copy(net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result  copy$default(net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result,net.hubalek.android.apps.barometer.model.AlertRuleDefinition,float,net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder,android.view.View)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getIF_YOU_LIKE_THRESHOLD()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getIF_YOU_LIKE_THRESHOLD$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$2:  void  onChartDataUpdated(java.util.ArrayList)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)
net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.model.PressureUnit$1:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.model.Trend  calcTrend$app_productionRelease(net.hubalek.android.apps.barometer.model.ChartItem,java.util.List)	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(long,float,java.lang.String,int,int)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)
net.hubalek.android.apps.barometer.model.PressureUnit$5:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatValue(android.content.Context,float)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  access$getSInstance$cp()	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  getSInstance()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  onDestroy()	net.hubalek.android.apps.barometer.service.BarometerLoggingService:  boolean  onStopJob(com.firebase.jobdispatcher.JobParameters)
net.hubalek.android.apps.barometer.model.PlaceInfo:  net.hubalek.android.apps.barometer.model.PlaceInfo  copy(java.lang.String,int,double,double,java.lang.String,double)	net.hubalek.android.apps.barometer.model.PlaceInfo:  net.hubalek.android.apps.barometer.model.PlaceInfo  copy$default(net.hubalek.android.apps.barometer.model.PlaceInfo,java.lang.String,int,double,double,java.lang.String,double,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  validateForm(android.support.v7.app.AlertDialog,android.widget.TextView)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  access$validateForm(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  onDestroyView()
net.hubalek.android.apps.barometer.model.PressureUnit$2:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.view.View)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queyAirPressure()	net.hubalek.android.apps.barometer.service.BarometerLoggingService:  boolean  onStartJob(com.firebase.jobdispatcher.JobParameters)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  <init>(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queyAirPressure()
net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$1:  void  <init>(net.hubalek.android.apps.barometer.service.BarometerLoggingService,com.firebase.jobdispatcher.JobParameters)	net.hubalek.android.apps.barometer.service.BarometerLoggingService:  boolean  onStartJob(com.firebase.jobdispatcher.JobParameters)
net.hubalek.android.apps.barometer.views.DismissibleNote:  void  setText1(java.lang.String)	net.hubalek.android.apps.barometer.views.DismissibleNote:  void  <init>(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  java.lang.String  getAlertText(android.content.Context,java.lang.String,int)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getGALE_WARNING$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getGALE_WARNING()
net.hubalek.android.apps.barometer.views.RoundButtonView$MyOutlineProvider:  void  <init>(int,int)	net.hubalek.android.apps.barometer.views.RoundButtonView:  void  onSizeChanged(int,int,int,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$setMTemperatureChangeListener$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.hardware.SensorEventListener)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocation$1:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.widget.TextView  getMNoDataNoteTv()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  android.content.IntentFilter  access$getINTENT_FILTER$cp()	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  android.content.IntentFilter  getINTENT_FILTER()
net.hubalek.android.apps.barometer.views.AlertTypeView$onContainerClicked$1:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onContainerClicked()
net.hubalek.android.apps.barometer.activity.MainActivity:  long  access$getMEarliestTimeWhenGaugeUpdateIsPossible$cp()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getMEarliestTimeWhenGaugeUpdateIsPossible()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity)	net.hubalek.android.apps.barometer.activity.UpgradeActivity:  void  onBillingInitialized()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  itemClicked()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setDescription(java.lang.CharSequence)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$setMAirPressureChangeListener$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.hardware.SensorEventListener)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  android.app.Notification  widgetUpdateNotification()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  int  onStartCommand(android.content.Intent,int,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  pickPlace$app_productionRelease()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_MAX_VALUE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_MAX_VALUE()
net.hubalek.android.apps.barometer.utils.Utils:  android.content.Intent  createMyOtherAppsIntent(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask,net.hubalek.android.apps.barometer.utils.LicensingUtils,boolean)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Viewport  calcCurrentViewPort(lecho.lib.hellocharts.model.Viewport)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)
net.hubalek.android.apps.barometer.service.AirPressureStats:  void  loadDataFromStorage()	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateLightnessTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateLightness(float[])
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  access$setMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion,long)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  throwCallbackAssertionError(android.app.Activity)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  assertCallbackImplementation()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocation$1:  void  <init>(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocation(android.location.Location)
net.hubalek.android.apps.barometer.utils.Utils:  android.content.Intent  getEmailIntent()	net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$onCreateDialog$dialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog,java.lang.Enum[])	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getCharLineColor(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createDataLine(int,java.util.List)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  android.widget.LinearLayout  getMPlacePropertiesContainer()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$2:  void  run()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Object)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawSubLabel(android.graphics.Canvas,float,float)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onDraw(android.graphics.Canvas)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  hsvToColor(float[],int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1000(net.hubalek.android.commons.dialogs.ColorPickerActivity,float[],int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  int  getMessageRes()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  onChartDataUpdated(java.util.ArrayList)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  onReceive(android.content.Context,android.content.Intent)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  long  getMatchingTime()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity:  long  access$getIF_YOU_LIKE_THRESHOLD$cp()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getIF_YOU_LIKE_THRESHOLD()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.widget.ProgressBar  getMLoadingProgressBar()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  int  getWallpaperPreferenceThemeResId$app_productionRelease()	net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  configureThemeToActivityInOnCreate(android.app.Activity,boolean,boolean,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.model.PressureUnit$TorrFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  restoreData()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  broadcastChartDataUpdate()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  broadcastNewDataCollected()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onDraw(android.graphics.Canvas)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.commons.dialogs.ColorPickerActivity$5:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  setLabelTextColor(int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener,android.widget.TextView,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_MESSAGE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_MESSAGE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.widget.TextView  getMNoDataNoteTv()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  boolean  access$2000(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.widget.Button)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  com.chauthai.swipereveallayout.ViewBinderHelper  access$getViewBinderHelper$p(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  java.lang.String  getMText$app_productionRelease()	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setDescription(int)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setNegativeButton(int)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  createUpgradeDialog(android.content.Context,int)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(float,java.lang.String,int,int)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$1:  java.lang.Object  invoke()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$400(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  onTabChanged(java.lang.String)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getEXTRA_OTHER_PLACES$cp()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_OTHER_PLACES()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressure(float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatAirPressureInfo(long,float)
net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean)	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <init>(android.content.Context,boolean,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.PreferencesActivity:  boolean  isPreferenceActivity()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$Companion:  android.content.Intent  newIntent(android.content.Context)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$3:  boolean  onPreferenceClick(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_REQUEST_CODE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_REQUEST_CODE()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  revertCheckboxToUnchecked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  com.google.android.gms.maps.model.LatLngBounds  toBounds(com.google.android.gms.maps.model.LatLng,double)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  updateMap(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder,android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment$onCreatePreferencesFix$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment,int)	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(java.lang.Object)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  restoreData()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$fireNotification(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.activity.MainActivity:  int  getDecimalPoints(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  fillOneChart(lecho.lib.hellocharts.view.LineChartView,java.util.List,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Long,long,java.lang.Float,boolean,float,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  valueChanged(int,float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  int  access$getDiameterMeters$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_POSITIVE_BUTTON_TEXT()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_POSITIVE_BUTTON_TEXT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setIcon(int)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  nHoursChange(android.content.Context,int)	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.model.Trend:  net.hubalek.android.apps.barometer.model.Trend  valueOf(java.lang.String)	net.hubalek.android.apps.barometer.model.ChartItem$Companion:  net.hubalek.android.apps.barometer.model.ChartItem  fromJson(com.google.gson.JsonObject)
net.hubalek.android.apps.barometer.service.BarometerLoggingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.BarometerLoggingService:  void  <clinit>()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  java.lang.String  access$getPREFIX_EXTRA$cp()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  setNeedleColor(int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  updateMap(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  access$updateMap(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion)
net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.widget.Button)	net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.view.View)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  codeToTabIdx(java.lang.String)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  purge()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onDestroy()
net.hubalek.android.apps.barometer.model.PressureUnit$InHgPressureFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$onCreateDialog$dialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment,android.widget.EditText,android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Object  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.model.PressureUnit$2:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  <init>(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocationAndTemperature$1:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  access$convertToValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding,net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView,android.view.View)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  java.lang.Object  invoke(java.lang.Object)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  int  getIconResIdVector()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getSemiSemiTransparentColor(int)	net.hubalek.android.apps.barometer.activity.MainActivity:  android.graphics.Shader  createShader(int,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$4:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.views.InAppProductView:  void  setOwned(boolean)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1202(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  setTextView(android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  net.hubalek.android.apps.barometer.model.PlaceInfo  doWorkInBackground()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.Object  doWorkInBackground()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  setMessage(java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder  createUpgradeDialog(android.content.Context,int)
net.hubalek.android.apps.barometer.views.BulletTextView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.BulletTextView,android.view.View)	net.hubalek.android.apps.barometer.views.BulletTextView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.BulletTextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$1:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$1:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider:  float  getCurrentPressure()	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onWeatherChangeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$2:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  broadcastNewDataCollected()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$broadcastNewDataCollected(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)
net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  removeInvalidDefinitions(java.util.List)	net.hubalek.android.apps.barometer.utils.AlertsInfoStorage:  java.util.List  loadData(android.content.Context)
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  boolean  secondaryCondition(float,net.hubalek.android.apps.barometer.model.AlertDefinition)	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc(android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean)	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc$default(net.hubalek.android.apps.barometer.utils.ArcUtils,android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean,int,java.lang.Object)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getARG_CHOICES$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  long  getCurrentTime()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomIn(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity$updateChartData$1:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$3:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.content.Context,int,android.view.ViewGroup)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$1:  eu.inloop.simplerecycleradapter.SettableViewHolder  onCreateViewHolder(android.view.ViewGroup,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$3:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)
net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  nHoursChange(int)	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  threeHoursChange()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.support.v7.widget.RecyclerView  getMRecyclerView()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  checkLocationPermission()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queyAirPressure()
net.hubalek.android.apps.barometer.views.InAppProductView:  void  setDescription(java.lang.String)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  copy(java.lang.String,long,float,java.lang.String,long,float,float)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  copy$default(net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change,java.lang.String,long,float,java.lang.String,long,float,float,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1,java.lang.String)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(java.lang.Object)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  getDEFAULT_TREND_ICON()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  int  access$getDEFAULT_TREND_ICON$p(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.view.View)
net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator:  net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator[]  values()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onLinkClicked(java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  <clinit>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRedTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRed(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  skuCancelled(java.lang.String)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  onDestroyView()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateBlueTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateBlue(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  convertFromValue(float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  angleToY(float,double,double)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$angleToY(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,double,double)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  updateWidgetPreview()	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  access$updateWidgetPreview(net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment)
net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  perform(android.widget.Button)	net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  perform(android.view.View)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  getUnitLabel(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  kotlin.jvm.functions.Function0  access$getStopSelf$p(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Boolean)
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  itemClicked()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder,android.view.View)
net.hubalek.android.apps.barometer.utils.Utils:  android.text.SpannableStringBuilder  makeTextClickable(android.content.Context,int,int,android.view.View$OnClickListener)	net.hubalek.android.apps.barometer.utils.Utils:  void  setClickableTextToTextView(android.widget.TextView,int,int,android.view.View$OnClickListener)
net.hubalek.android.commons.dialogs.ColorPickerActivity$16$1:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity$16)	net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  perform(android.widget.Button)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_NEGATIVE_BUTTON_TEXT()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_NEGATIVE_BUTTON_TEXT$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  access$updateMap(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onMapReady$1:  void  onMapLoaded()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onPreferencesChanged()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.model.AlertDefinition$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.AlertDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_PREFIX()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_PREFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onAddPlaceButtonClicked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$2:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getPOORER_WEATHER_TO_COME_2$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_2()
net.hubalek.android.apps.barometer.model.PressureUnit$5:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.activity.MainActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.BaseActivity:  boolean  isPreferenceActivity()	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSubmit$app_productionRelease()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeGoToRatingPageActionSelected()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2$multiClickDetected$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2:  void  multiClickDetected()
net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$2:  void  invoke()	net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$2:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawValue(android.graphics.Canvas,float,float)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onDraw(android.graphics.Canvas)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaHsvTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateAlphaHsv(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  java.lang.String  access$getARG_ALERT_CATEGORY$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getARG_ALERT_CATEGORY()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_POSITIVE_BUTTON_TEXT$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_POSITIVE_BUTTON_TEXT()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  access$getCurrentPressureUnit$p(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processResultInUiThread(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processResultInUiThread(java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$3:  void  onOkButtonClicked()	net.hubalek.android.apps.barometer.views.DismissibleNote:  void  onOkButtonClicked$app_productionRelease()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder,android.view.View)
net.hubalek.android.commons.preferences.SeekBarPreference:  int  validateValue(int)	net.hubalek.android.commons.preferences.SeekBarPreference:  java.lang.Object  onGetDefaultValue(android.content.res.TypedArray,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  btnOkClicked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.utils.ThemeUtils:  android.view.LayoutInflater  configureThemeToFragmentInOnCreateView(android.support.v4.app.Fragment,android.view.LayoutInflater)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  processResultInUiThread(java.lang.Object)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  assertCallbackImplementation()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Activity  access$assertCallbackImplementation(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)
net.hubalek.android.apps.barometer.activity.BaseActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onOnlyWithMyPlacesNoteButtonDismissClicked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$ThemesAdapter:  void  <init>(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog,android.content.Context)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onPrepareDialogBuilder(android.support.v7.app.AlertDialog$Builder)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  net.hubalek.android.apps.barometer.model.PressureUnit  getCurrentPressureUnit()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  updateRangeMinMaxSummary(android.support.v7.preference.Preference,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  android.content.Intent  newIntent(android.content.Context,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  int  getItemViewType(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData,int)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  int  getItemViewType(java.lang.Object,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.views.DismissibleNote:  void  setOnOkGotItClickedListener(net.hubalek.android.apps.barometer.views.DismissibleNote$OkGotItCallback)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTORM_WITH_STRONG_WIND$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_STRONG_WIND()
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  int  getWidgetId()	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit$6:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  com.chauthai.swipereveallayout.ViewBinderHelper  access$getViewBinderHelper$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  com.chauthai.swipereveallayout.ViewBinderHelper  access$getViewBinderHelper$p(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)
net.hubalek.android.commons.dialogs.ColorPickerActivity$18:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.MainActivity:  java.lang.String  access$getEXTRA_SUPPRESS_NOTIFICATION$cp()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getEXTRA_SUPPRESS_NOTIFICATION()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1602(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  setTextView(android.widget.TextView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  throwTargetDialogAssertionError()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  access$throwTargetDialogAssertionError(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onZoomIn()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomIn(net.hubalek.android.apps.barometer.activity.MainActivity)
net.hubalek.android.apps.barometer.model.AlertCategory:  int  getAlertIconDrawableResId()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  int  getAlertIconResId()
net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatValue(android.content.Context,float)
net.hubalek.android.apps.barometer.model.PressureUnit:  float  getAxisStep()	net.hubalek.android.apps.barometer.activity.MainActivity:  float  getAxisStep(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackEvent(android.content.Context,java.lang.String,java.lang.String)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$1:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.model.PressureUnit$4:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment  newInstance(java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.PressureUnit,java.lang.Float,java.lang.Float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$ValueEditPreferenceOnClickListener:  boolean  onPreferenceClick(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  exportData$app_productionRelease()	net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  android.content.Intent  newIntent(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(java.lang.Object)
net.hubalek.android.apps.barometer.model.PressureUnit$MillibarsPressureFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatValue(android.content.Context,float)
net.hubalek.android.apps.barometer.model.PressureUnit$KPaFormatter:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  java.lang.String  getDefaultPlaceCode(java.lang.String,java.util.List)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onActivityResult(int,int,android.content.Intent)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_GALE()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.utils.MultipleClicksDetector$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.MultipleClicksDetector:  void  <clinit>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateSaturationTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateSaturation(float[])
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(java.lang.Object)
net.hubalek.android.commons.dialogs.ColorPickerActivity$16:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_PRESSURE_UNIT$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PRESSURE_UNIT()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.util.HashSet  access$getOwnedSkus$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$Companion:  android.content.Intent  newIntent(android.content.Context)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  checkLocationPermission()
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  float  getAltitude(java.lang.String,float)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  convertMslp(android.content.Context,java.lang.String,float,boolean,float,float)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTORM_WITH_GALE$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_GALE()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment,android.widget.CheckBox)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.model.AlertDefinition:  float  getPressureChangeValueMilliBars2()	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  boolean  evaluateFallRise(net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.AlertDefinition,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  access$getALL_VALUES$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition[]  getALL_VALUES()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$fireNotification(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawRange(android.graphics.Canvas,float,float,int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onDraw(android.graphics.Canvas)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$onPrepareDialogBuilder$1:  void  <init>(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  onPrepareDialogBuilder(android.support.v7.app.AlertDialog$Builder)
net.hubalek.android.apps.barometer.views.InAppProductView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.InAppProductView,android.view.View)	net.hubalek.android.apps.barometer.views.InAppProductView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  net.hubalek.android.apps.barometer.utils.LicensingUtils  access$getSInstance$cp()	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getSInstance()
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  configureDefaults()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setMinY(float)	net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  int  getTemplateStringResId()	net.hubalek.android.apps.barometer.model.AlertDefinition:  int  getConditionTemplate()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3$1:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getEXTRA_ALERT_TEXT$cp()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TEXT()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getARG_SELECTION$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getARG_SELECTION()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.CharSequence  formatChangeInfo(float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setGmtCurrentMax$app_productionRelease(long)	net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$queryAirPresureWithLocation(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  onSuccess(android.location.Location)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.WidgetConfigActivity)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity,android.view.View)
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getEXTRA_RESULT$cp()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_RESULT()
net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.Path  createBezierArcDegrees(android.graphics.PointF,float,float,float,int,boolean,android.graphics.Path)	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc(android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getPOORER_WEATHER_TO_COME_1$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_1()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  android.content.Intent  newIntentForDataRemoval(android.content.Context,long)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  deleteRecord()
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  int  getCheckedItem(java.lang.Enum[],java.lang.Enum)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onLinkClicked(java.lang.String)	net.hubalek.android.apps.barometer.utils.PlaceholdersReplacer$replacePlaceholders$1:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  configureDefaults()	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  android.view.View  onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)
net.hubalek.android.commons.dialogs.ColorPickerActivity$23:  void  perform(android.widget.FrameLayout)	net.hubalek.android.commons.dialogs.ColorPickerActivity$23:  void  perform(android.view.View)
net.hubalek.android.commons.dialogs.ColorPickerActivity$14:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  readAll(java.io.Reader)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  org.json.JSONObject  readJsonFromUrl(java.lang.String)
net.hubalek.android.apps.barometer.BarometerApplication:  void  createNotificationChannels()	net.hubalek.android.apps.barometer.BarometerApplication:  void  onCreate()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  isPlatinumEditionOwned()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)
net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  angleToX(float,double,double)	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  float  access$angleToX(net.hubalek.android.apps.barometer.views.GaugeView2$Companion,float,double,double)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.content.Context,int,android.view.ViewGroup)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$1:  eu.inloop.simplerecycleradapter.SettableViewHolder  onCreateViewHolder(android.view.ViewGroup,int)
net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  int  getDefaultDiameter(android.content.Context)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onActivityResult(int,int,android.content.Intent)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  <clinit>()
net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  void  invokePlayStore(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)	net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  void  invokePlayStore(android.content.Context,java.lang.String,java.lang.String)
net.hubalek.android.apps.barometer.activity.MainActivity$createLineChartView$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult  createLineChartView()
net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertDefinition  copy(java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator)	net.hubalek.android.apps.barometer.model.AlertDefinition:  net.hubalek.android.apps.barometer.model.AlertDefinition  copy$default(net.hubalek.android.apps.barometer.model.AlertDefinition,java.lang.String,net.hubalek.android.apps.barometer.model.AlertCategory,java.lang.String,java.lang.String,net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionOperator,int,float,float,net.hubalek.android.apps.barometer.model.customalerts.PressureComparator,float,float,net.hubalek.android.apps.barometer.model.customalerts.SecondaryConditionPressureComparator,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.MainActivity$onOptionsItemSelected$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
net.hubalek.android.apps.barometer.views.DismissibleNote:  void  onOkButtonClicked$app_productionRelease()	net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getARG_TITLE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_TITLE()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.views.GaugeView2:  void  setGaugeBackgroundColor(int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)
net.hubalek.android.apps.barometer.activity.UpgradeActivity:  android.view.View  getMContent()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)
net.hubalek.android.apps.barometer.model.PlaceInfo$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.PlaceInfo:  void  <clinit>()
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache  getInstance(android.content.Context)	net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  convertMslp(android.content.Context,java.lang.String,float,boolean,float,float)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  <clinit>()
net.hubalek.android.apps.barometer.model.PressureUnit:  float  getTopCorrection()	net.hubalek.android.apps.barometer.activity.MainActivity:  float  getTopCorrection(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  java.lang.Object  access$getSInstanceLock$cp()	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  java.lang.Object  getSInstanceLock()
net.hubalek.android.apps.barometer.service.AlertsEvaluator:  boolean  evaluateFallRise(net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType,net.hubalek.android.apps.barometer.model.AlertDefinition,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)	net.hubalek.android.apps.barometer.service.AlertsEvaluator:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  evaluateAlert(android.content.Context,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$ValuesProvider,net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.commons.dialogs.ColorPickerActivity$12:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity,android.view.View)
net.hubalek.android.commons.preferences.SeekBarPreference:  void  updatePreference(int)	net.hubalek.android.commons.preferences.SeekBarPreference:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.model.PressureUnit$1:  float  convertToMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertToMillibars(float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  getPREFIX_ARG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  onSuccess(android.location.Location)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queyAirPressure$1:  void  onSuccess(java.lang.Object)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  setDefaults(android.content.Context,int[])	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  configureDefaults()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeNeverActionSelected()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$2:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM_WITH_STRONG_WIND()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  boolean  myPlacesDisabled()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queyAirPressure()
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  void  access$setMClickedDialogEntryIndex$p(net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog,int)	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$onPrepareDialogBuilder$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  java.lang.String  metersToAltitude(android.content.Context,double)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  updateChartData(java.util.ArrayList)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$1:  void  invoke()	net.hubalek.android.apps.barometer.service.BarometerLoggingService$onStartJob$1:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatRadius(android.content.Context,int)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog  newInstance(net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onActivityResult$1:  void  run()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1502(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  setTextView(android.widget.TextView)
net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity,java.lang.String,int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)
net.hubalek.android.apps.barometer.BarometerApplication:  java.lang.String  access$getLOG_TAG$cp()	net.hubalek.android.apps.barometer.BarometerApplication$Companion:  java.lang.String  getLOG_TAG()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  java.lang.String  extractAppVersionFromManifest(android.app.Activity)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  float  getValue(android.widget.EditText,android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  float  access$getValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment,android.widget.EditText,android.os.Bundle)
net.hubalek.android.apps.barometer.model.customalerts.PressureComparator:  net.hubalek.android.apps.barometer.model.customalerts.PressureComparator[]  values()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onLinkClicked(java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$dialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_ALERT_TITLE$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  valueChanged(int,float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  void  showDialog(android.support.v4.app.Fragment,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateGreenTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateGreen(int)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTRONG_WIND()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTRONG_WIND$p(net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onInfoIconClicked(net.hubalek.android.apps.barometer.views.AlertTypeView)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onInfoIconClicked()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment  newInstance()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AirPressureStats:  java.lang.String  access$getFILE_NAME_PREFIX$cp()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_PREFIX()
net.hubalek.android.apps.barometer.model.PressureUnit$6:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  configureThemeToActivityInOnCreate(android.app.Activity,boolean,boolean,boolean)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  android.content.Intent  newIntentForNotificationCancel(android.content.Context)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  fireNotification(java.lang.String,java.lang.String,int,int,net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  access$setSInstance$cp(net.hubalek.android.apps.barometer.utils.LicensingUtils)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  setSInstance(net.hubalek.android.apps.barometer.utils.LicensingUtils)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  reconfigureGauge(net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.model.PressureUnit  reconfigureGauge()
net.hubalek.android.apps.barometer.activity.MainActivity:  void  detectMyPlacesAltitudeIfNecessary()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_SUFFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.io.File  getFileNameForDate(long)
net.hubalek.android.apps.barometer.views.GaugeView2:  double  access$getDOUBLE$cp()	net.hubalek.android.apps.barometer.views.GaugeView2$Companion:  double  getDOUBLE()
net.hubalek.android.apps.barometer.utils.Utils:  boolean  isAvailable(android.content.Context,android.content.Intent)	net.hubalek.android.apps.barometer.utils.Utils:  android.content.Intent  createMyOtherAppsIntent(android.content.Context)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1102(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$6:  void  setTextView(android.widget.TextView)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  boolean  validatePlaceCode()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSubmit$app_productionRelease()
net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  java.lang.String  getMLocation$app_productionRelease()	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding,net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder,android.view.View)
net.hubalek.android.apps.barometer.activity.MainActivity$reconfigureGauge$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,net.hubalek.android.apps.barometer.model.PressureUnit)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  reconfigureGauge(net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$dialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.widget.EditText,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHSVSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$300(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.utils.ConversionUtils:  float  fahrenheitToCelsius(float)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  convertToValue(float,java.lang.String)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  android.widget.CompoundButton$OnCheckedChangeListener  access$getMAlertsEnabledCheckboxListener$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  revertCheckboxToUnchecked$app_productionRelease()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  java.lang.String  access$getARG_PLACE_INFO$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getARG_PLACE_INFO()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatValue(android.content.Context,float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressure(float)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  onContainerClicked()	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog:  java.lang.String  access$getFRAGMENT_TAG$cp()	net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  java.lang.String  getFRAGMENT_TAG()
net.hubalek.android.apps.barometer.views.BulletTextView:  void  init(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.BulletTextView:  void  <init>(android.content.Context,android.util.AttributeSet,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show$default(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder,android.support.v4.app.FragmentManager,java.lang.String,int,java.lang.Object)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity:  void  onAddWidgetFabClicked$app_productionRelease()	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.model.DataSplitter$Point:  void  <init>(net.hubalek.android.apps.barometer.model.DataSplitter$PointType,net.hubalek.android.apps.barometer.model.ChartItem)	net.hubalek.android.apps.barometer.model.DataSplitter:  void  addPointToPlace(net.hubalek.android.apps.barometer.model.DataSplitter$Result,net.hubalek.android.apps.barometer.model.DataSplitter$PointType,java.lang.String,net.hubalek.android.apps.barometer.model.ChartItem)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2$1:  void  invoke()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2$1:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  init(android.content.Context,android.util.AttributeSet)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  <init>(android.content.Context,android.util.AttributeSet)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$300(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity$3:  void  onTabChanged(java.lang.String)
net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)
net.hubalek.android.apps.barometer.utils.Utils:  int  generateViewId()	net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult  createLineChartView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_PREF_KEY$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_PREF_KEY()
net.hubalek.android.apps.barometer.views.GaugeView2$MyOutlineProvider:  void  <init>(net.hubalek.android.apps.barometer.views.GaugeView2)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onSizeChanged(int,int,int,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  getMEarliestTimeWhenGaugeUpdateIsPossible()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.service.AirPressureStats$MockAirPressureStats:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setSampleData(android.content.Context)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  getWEIGHTS()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  access$getWEIGHTS$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)
net.hubalek.android.apps.barometer.model.PressureUnit:  int  getRangeSteps()	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  reconfigureGaugeView(android.content.Context,net.hubalek.android.apps.barometer.views.GaugeView2,net.hubalek.android.apps.barometer.model.PressureUnit)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.EditText)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog  newInstance(net.hubalek.android.apps.barometer.model.AlertCategory)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onInfoIconClicked(net.hubalek.android.apps.barometer.views.AlertTypeView)
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.views.InAppProductView:  void  setTitle(java.lang.String)	net.hubalek.android.apps.barometer.views.InAppProductView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getARG_VALUE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_VALUE()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$2:  void  multiClickDetected()	net.hubalek.android.apps.barometer.utils.MultipleClicksDetector:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.model.AlertCategory:  int  getTitleStringResId()	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getEXTRA_PLACE_INDEX$cp()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_INDEX()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_MIN_VALUE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_MIN_VALUE()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setDisplayInfoIcon(boolean)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatPressureChange(float)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.CharSequence  formatChangeInfo(float)
net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,android.view.View,lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  net.hubalek.android.apps.barometer.activity.MainActivity$LineChartViewCreationResult  createLineChartView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.DisclaimerDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  <clinit>()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.model.Trend  delta2trend(float)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.model.Trend  calcTrend$app_productionRelease(net.hubalek.android.apps.barometer.model.ChartItem,java.util.List)
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  java.lang.String  access$getEXTRA_PLACE_TO_EDIT$cp()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$Companion:  java.lang.String  getEXTRA_PLACE_TO_EDIT()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTORM$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTORM()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)
net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  boolean  access$getMAlertsEnabled$p(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  setData(net.hubalek.android.apps.barometer.model.AlertDefinition)
net.hubalek.android.apps.barometer.views.ThemeSelectionPreference$ThemeSelectionPreferenceDialog$Companion:  java.lang.String  getFRAGMENT_TAG()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onDisplayPreferenceDialog(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$10:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TabHost  access$100(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity$2:  boolean  onLongClick(android.view.View)
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setTitle(int)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  getEvaluationResult()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1802(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  setTextView(android.widget.TextView)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onExtremeWeatherChangeSelected$app_productionRelease()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$1:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.MainActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.MainActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatTime(long)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  formatAirPressureInfo(long,float)
net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.WidgetConfigActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.WidgetConfigActivity)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setSampleData(android.content.Context)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  int  onStartCommand(android.content.Intent,int,int)
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  net.hubalek.android.apps.barometer.model.DataSplitter$PlaceLine  getPlaceLine$app_productionRelease(java.lang.String)	net.hubalek.android.apps.barometer.model.DataSplitter:  void  addPointToPlace(net.hubalek.android.apps.barometer.model.DataSplitter$Result,net.hubalek.android.apps.barometer.model.DataSplitter$PointType,java.lang.String,net.hubalek.android.apps.barometer.model.ChartItem)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,android.support.v7.app.AlertDialog,android.widget.EditText)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$3:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AirPressureStats:  net.hubalek.android.apps.barometer.service.AirPressureStats  access$getMInstance$cp()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  net.hubalek.android.apps.barometer.service.AirPressureStats  getMInstance()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getARG_UNIT$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getARG_UNIT()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  float  getCurrentPressure()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.views.GaugeView2:  float  getCorrectedValue(float)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawNeedle(android.graphics.Canvas,float,float,int)
net.hubalek.android.apps.barometer.model.PressureUnit:  java.lang.String  formatChange(android.content.Context,float)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView:  void  setToolbar(android.support.v7.widget.Toolbar)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  perform(android.widget.Button)	net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  perform(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  detectMyPlacesAltitudeIfNecessary()
net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change  getChange()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding$1:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.TableViewActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomOut(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity$updateChartData$2:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  getValueForProductId(java.lang.String)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  boolean  skuPurchaseSuccessful(java.lang.String)
net.hubalek.android.apps.barometer.model.PressureUnit$3:  float  convertFromMillibars(float)	net.hubalek.android.apps.barometer.model.PressureUnit:  float  convertFromMillibars(float)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <init>(android.content.Context)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)
net.hubalek.android.apps.barometer.model.AlertDefinition:  void  setPressureChangeValueMilliBars2(float)	net.hubalek.android.apps.barometer.model.AlertDefinition$Builder:  net.hubalek.android.apps.barometer.model.AlertDefinition$Builder  between(float,float)
net.hubalek.android.apps.barometer.utils.IfYouLikeUtils:  long  resetFirstStart(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeLaterActionSelected()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setMaxY(float)	net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)
net.hubalek.android.commons.dialogs.ColorPickerActivity$15$1:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity$15)	net.hubalek.android.commons.dialogs.ColorPickerActivity$15:  void  perform(android.widget.Button)
net.hubalek.android.apps.barometer.views.DismissibleNote:  void  setText2(java.lang.String)	net.hubalek.android.apps.barometer.views.DismissibleNote:  void  <init>(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show(android.support.v4.app.FragmentManager,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder:  void  show$default(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Builder,android.support.v4.app.FragmentManager,java.lang.String,int,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  convertToValue(float,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  float  access$convertToValue(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment,float,java.lang.String)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getPOORER_WEATHER_TO_COME_1()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getEXTRA_ALERT_TITLE$cp()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getEXTRA_ALERT_TITLE()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  java.lang.String  access$getEXTRA_SUPPRESS_NOTIFICATION$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getPREFIX_EXTRA()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getPREFIX_EXTRA$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$2:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_REQUEST_CODE()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  access$getARG_REQUEST_CODE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion)
net.hubalek.android.apps.barometer.utils.AnalyticsSupport:  void  trackScreen(android.content.Context,java.lang.String)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.support.v7.widget.SwitchCompat  getMEnableMyPlacesFunctionality()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  java.lang.String  access$getARG_TITLE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$Companion:  java.lang.String  getARG_TITLE()
net.hubalek.android.apps.barometer.utils.Utils$makeTextClickable$click$1:  void  <init>(android.view.View$OnClickListener)	net.hubalek.android.apps.barometer.utils.Utils:  android.text.SpannableStringBuilder  makeTextClickable(android.content.Context,int,int,android.view.View$OnClickListener)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  android.widget.ProgressBar  getMLoadingProgressBar()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$observer$1:  void  onChanged()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1,java.lang.String)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTRONG_WIND$cp()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getSTRONG_WIND()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  getSILENT_NOTIFICATION_THRESHOLD()	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  access$getSILENT_NOTIFICATION_THRESHOLD$p(net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.CharSequence[]  getChoices(android.content.Context,java.lang.Enum[])	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.BarometerApplication$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.BarometerApplication:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$2:  java.lang.Object  invoke()
net.hubalek.android.commons.components.RainbowImage:  int  measureWidth(int)	net.hubalek.android.commons.components.RainbowImage:  void  onMeasure(int,int)
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatTemperature(android.content.Context,float)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  updateTemperatureSummary(android.support.v7.preference.Preference)
net.hubalek.android.apps.barometer.service.AirPressureStats:  void  removeSample(long)	net.hubalek.android.apps.barometer.service.BarometerDataProcessingService:  void  removeRecord(long)
net.hubalek.android.apps.barometer.utils.ConfigUtils:  void  putString(android.content.Context,int,java.lang.String,java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment$onCreatePreferencesFix$1:  boolean  onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$2:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$observer$1:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onDestroyView()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  boolean  access$200(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$4:  float  invoke()	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$4:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  long  access$getIF_YOU_LIKE_THRESHOLD$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberViewPort(lecho.lib.hellocharts.view.LineChartView)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  rememberChartZoom(lecho.lib.hellocharts.view.LineChartView)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  java.lang.String  getDEFAULT_TAG()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onActivityResult$1:  void  run()
net.hubalek.android.apps.barometer.service.AirPressureStats:  com.google.gson.JsonObject  parseLine(java.lang.String,com.google.gson.JsonParser)	net.hubalek.android.apps.barometer.service.AirPressureStats:  net.hubalek.android.apps.barometer.model.ChartItem  parseRow(java.lang.String,com.google.gson.JsonParser)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change:  float  getMatchingPressure()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity$13:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.lang.Void  doInBackground(java.lang.Void[])	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  java.lang.Object  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.activity.TableViewActivity:  eu.inloop.simplerecycleradapter.SimpleRecyclerAdapter  access$getMRecyclerAdapter$p(net.hubalek.android.apps.barometer.activity.TableViewActivity)	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  deleteRecord()
net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setDescription2(java.lang.CharSequence)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder:  java.lang.Object  getMResult()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  void  onPostExecute(net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$broadcastNewDataCollected(net.hubalek.android.apps.barometer.service.BarometricPressureCollector)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  void  onPostExecute(java.lang.Boolean)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  java.lang.String  access$getEXTRA_EXISTING_DEFINITIONS$cp()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_EXISTING_DEFINITIONS()
net.hubalek.android.commons.dialogs.ColorPickerActivity$23:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity,int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateColorPreview(int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  int  getTitleRes()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getRule()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.Path  createBezierArcRadians(android.graphics.PointF,float,double,double,int,boolean,android.graphics.Path)	net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.Path  createBezierArcDegrees(android.graphics.PointF,float,float,float,int,boolean,android.graphics.Path)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.AirPressureStats:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.AlertDefinition,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$onCreate$onClickListener$1:  void  onItemClick(java.lang.Object,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)
net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView,android.view.View)	net.hubalek.android.apps.barometer.views.AlertTypeView_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.AlertTypeView)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$AlertInfoViewHolder_ViewBinding$2:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.model.AlertCategory:  int  getDescriptionStringResId()	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  setCategory(net.hubalek.android.apps.barometer.model.AlertCategory)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  java.lang.Object  invoke(java.lang.Object)
net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote,android.view.View)	net.hubalek.android.apps.barometer.views.DismissibleNote_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.views.DismissibleNote)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  access$updateWidgetPreview(net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment)	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment$onCreatePreferencesFix$1:  boolean  onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.WidgetConfigPreferencesFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment,android.widget.EditText,android.os.Bundle,float,float,android.support.v7.app.AlertDialog)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity$onZoomOut$1:  void  invoke(lecho.lib.hellocharts.view.LineChartView,lecho.lib.hellocharts.model.Viewport)	net.hubalek.android.apps.barometer.activity.MainActivity$onZoomOut$1:  java.lang.Object  invoke(java.lang.Object,java.lang.Object)
net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.BasePreferenceCompatFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  net.hubalek.android.apps.barometer.model.PlaceInfo  access$getMPlaceInfo$p(net.hubalek.android.apps.barometer.activity.PlaceEditActivity)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onCreate$3:  void  onValueChanged(int)
net.hubalek.android.apps.barometer.model.ChartItem$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.ChartItem:  void  <clinit>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHueTv(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateHue(float[])
net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,net.hubalek.android.apps.barometer.model.PressureUnit,float)	net.hubalek.android.apps.barometer.utils.DataFormatter:  java.lang.String  formatChange(android.content.Context,float)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$Result:  float  getChangeMilliBars()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.utils.ThemeUtils$Theme:  int  getPreferenceThemeResId$app_productionRelease()	net.hubalek.android.apps.barometer.utils.ThemeUtils:  void  configureThemeToActivityInOnCreate(android.app.Activity,boolean,boolean,boolean)
net.hubalek.android.apps.barometer.activity.UpgradeActivity:  android.widget.ProgressBar  getMProgressBar()	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPostExecute(java.lang.Void)
net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <init>(android.content.Context,kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  net.hubalek.android.apps.barometer.utils.LicensingUtils  getInstance(android.content.Context)
net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  setMEarliestTimeWhenGaugeUpdateIsPossible(long)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  access$setMEarliestTimeWhenGaugeUpdateIsPossible$p(net.hubalek.android.apps.barometer.activity.MainActivity$Companion,long)
net.hubalek.android.apps.barometer.service.AirPressureStats:  void  access$setMInstance$cp(net.hubalek.android.apps.barometer.service.AirPressureStats)	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  void  setMInstance(net.hubalek.android.apps.barometer.service.AirPressureStats)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  java.lang.Object  doWorkInBackground()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment$onCreate$1:  net.hubalek.android.apps.barometer.activity.fragment.dialog.DataHolder  doInBackground(java.lang.Void[])
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1402(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  setTextView(android.widget.TextView)
net.hubalek.android.commons.dialogs.ColorPickerActivity$17$1:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity$17)	net.hubalek.android.commons.dialogs.ColorPickerActivity$17:  void  perform(android.widget.Button)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  access$getSTRONG_WIND$p(net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  org.json.JSONObject  readJsonFromUrl(java.lang.String)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  net.hubalek.android.apps.barometer.model.PlaceInfo  addAltitudeToPlaceInfo$app_productionRelease(net.hubalek.android.apps.barometer.model.PlaceInfo)
net.hubalek.android.apps.barometer.utils.ArcUtils:  double  normalizeRadians(double)	net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.Path  createBezierArcRadians(android.graphics.PointF,float,double,double,int,boolean,android.graphics.Path)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding$2:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.view.View)
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  access$setSomePurchasesRestored$p(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask,boolean)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPostExecute$1:  void  invoke(net.hubalek.android.apps.barometer.views.InAppProductView)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  java.lang.String  access$getPREFIX_EXTRA$cp()	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  getPREFIX_EXTRA()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ValueEditDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.service.AirPressureStats:  java.lang.String  access$getFILE_NAME_SUFFIX$cp()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_SUFFIX()
net.hubalek.android.commons.dialogs.ColorPickerActivity$11:  void  <init>(net.hubalek.android.commons.dialogs.ColorPickerActivity)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  init()
net.hubalek.android.apps.barometer.activity.BaseActivity$onSharedPreferenceChanged$1:  void  <init>(net.hubalek.android.apps.barometer.activity.BaseActivity)	net.hubalek.android.apps.barometer.activity.BaseActivity:  void  onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
net.hubalek.android.apps.barometer.service.AirPressureStats:  int[]  access$getWEIGHTS$cp()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  int[]  getWEIGHTS()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity$onMapReady$1:  void  <init>(net.hubalek.android.apps.barometer.activity.PlaceEditActivity,com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.model.LatLng)	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onMapReady(com.google.android.gms.maps.GoogleMap)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onZoomOut()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$onZoomOut(net.hubalek.android.apps.barometer.activity.MainActivity)
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AboutTheAppActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AboutTheAppActivity)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  errorOccurredWhileDetectingAltitude(net.hubalek.android.apps.barometer.model.PlaceInfo,java.lang.Throwable)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  processErrorInUiThread(java.lang.Throwable)
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.MainScreenGaugeConfigurationActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog)	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  sampleCouldBeAdded()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onStart()
net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$onCreateDialog$1:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment,android.os.Bundle)	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  copy(boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change)	net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult:  net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult  copy$default(net.hubalek.android.apps.barometer.service.AlertsEvaluator$EvaluationResult,boolean,net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Change,int,java.lang.Object)
net.hubalek.android.apps.barometer.utils.ColorUtils:  int  getChartHistoricalDataAreaColor(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createDataLine(int,java.util.List)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  int  getAlertIconResId()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$SensorEventLoggerTask:  java.lang.Boolean  doInBackground(java.lang.Object[])
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  setBezelColor(int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  init(android.content.Context)
net.hubalek.android.apps.barometer.views.GaugeView2:  android.graphics.Bitmap  alocateBackgroundBitmap(int,int)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onDraw(android.graphics.Canvas)
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onActivityResult$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity,net.hubalek.android.apps.barometer.model.PlaceInfo)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  void  onActivityResult(int,int,android.content.Intent)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  updateAlpha(int,int)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  int  access$1700(net.hubalek.android.commons.dialogs.ColorPickerActivity,int,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  int  getMessageRes()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding$3:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding,net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity,android.view.View)
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setMaxX$app_productionRelease(java.lang.Float)	net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)
net.hubalek.android.apps.barometer.utils.LicensingUtils$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.utils.LicensingUtils:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment$onCreatePreferencesFix$5:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment)	net.hubalek.android.apps.barometer.activity.fragment.dialog.MainScreenGaugeConfigurationFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.service.BarometerDataProcessingService$Companion:  boolean  canHaveAmbientTemperatureSensor()	net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  queryAirPresureWithLocation(android.location.Location)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  net.hubalek.android.apps.barometer.model.AlertRuleDefinition  getGALE_WARNING()	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder:  void  deleteRecord()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$PlaceInfoViewHolder_ViewBinding$2:  void  doClick(android.view.View)
net.hubalek.android.apps.barometer.activity.TableViewActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MainActivity:  boolean  significantDiff(float,float)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  onIfYouLikeLaterActionSelected()	net.hubalek.android.apps.barometer.activity.fragment.dialog.IfYouLikeThisAppDialogFragment$onCreateDialog$3:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_VALUE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.MainActivity:  void  access$setMEarliestTimeWhenGaugeUpdateIsPossible$cp(long)	net.hubalek.android.apps.barometer.activity.MainActivity$Companion:  void  setMEarliestTimeWhenGaugeUpdateIsPossible(long)
net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  perform(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$22:  void  perform(android.view.View)
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  access$getSILENT_NOTIFICATION_THRESHOLD$p(net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion)	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  void  suppressForAWhile()
net.hubalek.android.apps.barometer.activity.MainActivity$onZoomIn$1:  void  invoke(lecho.lib.hellocharts.view.LineChartView,lecho.lib.hellocharts.model.Viewport)	net.hubalek.android.apps.barometer.activity.MainActivity$onZoomIn$1:  java.lang.Object  invoke(java.lang.Object,java.lang.Object)
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  getFILE_NAME_SUFFIX()	net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_SUFFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)
net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion:  java.lang.String  access$getPREFIX_ARG$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.AlertCategoryInfoDialog:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  java.lang.String  access$getEXTRA_ADD_ALERT$cp()	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  getEXTRA_ADD_ALERT()
net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  discardSampleIfReportedTooOften(long,java.lang.String,java.util.List)	net.hubalek.android.apps.barometer.service.AirPressureStats:  boolean  addSample$app_productionRelease(long,float,java.lang.String,int,int)
net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache:  void  access$setSInstance$cp(net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache)	net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache$Companion:  void  setSInstance(net.hubalek.android.apps.barometer.utils.PlaceCodeAltitudeCache)
net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  java.lang.String  formatRestOfTheURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)	net.hubalek.android.commons.utils.PlayStoreInvocationUtils:  void  invokePlayStore(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
net.hubalek.android.apps.barometer.activity.PreferencesActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.PreferencesActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  java.util.Map  getLinesForPlaces()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2$1:  void  <init>(net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$2:  void  onCheckedChanged(android.widget.CompoundButton,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  _$_clearFindViewByIdCache()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  void  onDestroyView()
net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  choiceSelected(int,java.lang.Enum)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$onCreateDialog$dialog$1:  void  onClick(android.content.DialogInterface,int)
net.hubalek.android.apps.barometer.activity.MyPlacesActivity:  net.hubalek.android.apps.barometer.views.DismissibleNote  getMDismissibleNote()	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$3:  void  onOkButtonClicked()
net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  boolean  validateAltitude()	net.hubalek.android.apps.barometer.activity.PlaceEditActivity:  void  onSubmit$app_productionRelease()
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  <init>(android.content.Context,android.hardware.SensorManager,android.hardware.Sensor,android.hardware.Sensor,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)	net.hubalek.android.apps.barometer.service.BarometerLoggingService:  boolean  onStartJob(com.firebase.jobdispatcher.JobParameters)
net.hubalek.android.apps.barometer.model.AlertCategory:  net.hubalek.android.apps.barometer.model.AlertCategory  valueOf(java.lang.String)	net.hubalek.android.apps.barometer.views.AlertTypeView:  void  init(android.content.Context,android.util.AttributeSet)
net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,java.util.List)	net.hubalek.android.apps.barometer.activity.MainActivity:  lecho.lib.hellocharts.model.Line  createGapLine(int,lecho.lib.hellocharts.model.PointValue[])
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog:  int  getTitleRes()	net.hubalek.android.apps.barometer.activity.fragment.dialog.AsyncTaskProgressDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  java.lang.String  access$getDEFAULT_TAG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  getDEFAULT_TAG()
net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  long  getItemId(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData,int)	net.hubalek.android.apps.barometer.activity.TableViewActivity$onCreate$2:  long  getItemId(java.lang.Object,int)
net.hubalek.android.commons.dialogs.ColorPickerActivity$9:  void  updateProgress(int)	net.hubalek.android.commons.dialogs.ColorPickerActivity$19:  void  onProgressChanged(android.widget.SeekBar,int,boolean)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  access$getARG_SELECTION$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity,android.view.View)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity_ViewBinding:  void  <init>(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity)
net.hubalek.android.apps.barometer.activity.PreferencesActivity$Companion:  android.content.Intent  newIntent(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity:  boolean  onOptionsItemSelected(android.view.MenuItem)
net.hubalek.android.apps.barometer.activity.TableViewActivity:  java.util.List  processChartData(java.util.List)	net.hubalek.android.apps.barometer.activity.TableViewActivity:  void  updateChartData(java.util.ArrayList)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask$onPreExecute$1:  void  <init>(net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask)	net.hubalek.android.apps.barometer.activity.UpgradeActivity$LoadInAppsAsyncTask:  void  onPreExecute()
net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion:  java.lang.String  access$getARG_TITLE$p(net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment$Companion)	net.hubalek.android.apps.barometer.activity.fragment.dialog.UnitBasedDialogFragment:  android.app.Dialog  onCreateDialog(android.os.Bundle)
net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.TextView  access$1302(net.hubalek.android.commons.dialogs.ColorPickerActivity,android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity$8:  void  setTextView(android.widget.TextView)
net.hubalek.android.commons.dialogs.ColorPickerActivity$7:  void  setTextView(android.widget.TextView)	net.hubalek.android.commons.dialogs.ColorPickerActivity:  android.widget.SeekBar  findSeekBar(int,int,net.hubalek.android.commons.dialogs.ColorPickerActivity$Converter,net.hubalek.android.commons.dialogs.ColorPickerActivity$SeekBarUpdateListener)
net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog$Companion:  net.hubalek.android.apps.barometer.activity.fragment.dialog.MultipleAltitudesDetectionProgressDialog  newInstance()	net.hubalek.android.apps.barometer.activity.MainActivity:  void  detectMyPlacesAltitudeIfNecessary()
net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion:  java.lang.String  access$getEXTRA_EXISTING_DEFINITIONS$p(net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity$Companion)	net.hubalek.android.apps.barometer.activity.AlertTypePickerActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData:  int  getMTrendIcon$app_productionRelease()	net.hubalek.android.apps.barometer.activity.TableViewActivity$MyDataViewHolder:  void  setData(net.hubalek.android.apps.barometer.activity.TableViewActivity$TableRowData)
net.hubalek.android.apps.barometer.utils.ArcUtils:  android.graphics.PointF  pointFromAngleDegrees(android.graphics.PointF,float,float)	net.hubalek.android.apps.barometer.utils.ArcUtils:  void  drawArc(android.graphics.Canvas,android.graphics.PointF,float,float,float,android.graphics.Paint,int,boolean)
net.hubalek.android.apps.barometer.model.DataSplitter$Result:  void  setBase$app_productionRelease(java.lang.Long)	net.hubalek.android.apps.barometer.model.DataSplitter:  net.hubalek.android.apps.barometer.model.DataSplitter$Result  splitData(java.util.List,boolean)
net.hubalek.android.apps.barometer.activity.TableViewActivity$Companion:  android.content.Intent  newIntent$app_productionRelease(android.content.Context)	net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$1:  void  onClick(android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.fragment.dialog.DetermineAltitudeProgressDialog:  void  <clinit>()
net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  updateRGBSliders()	net.hubalek.android.commons.dialogs.ColorPickerActivity:  void  access$400(net.hubalek.android.commons.dialogs.ColorPickerActivity)
net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog:  java.lang.String  access$getPREFIX_ARG$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.SentencePartSelectionFragmentDialog$Companion:  java.lang.String  getPREFIX_ARG()
net.hubalek.android.apps.barometer.BarometerApplication$Companion:  void  setAnalytics(com.google.android.gms.analytics.GoogleAnalytics)	net.hubalek.android.apps.barometer.BarometerApplication:  void  onCreate()
net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention:  long  access$getSILENT_NOTIFICATION_THRESHOLD$cp()	net.hubalek.android.apps.barometer.utils.TooOftenNotificationPrevention$Companion:  long  getSILENT_NOTIFICATION_THRESHOLD()
net.hubalek.android.commons.components.RainbowImage:  int  measureHeight(int)	net.hubalek.android.commons.components.RainbowImage:  void  onMeasure(int,int)
net.hubalek.android.apps.barometer.service.BarometricPressureCollector:  void  access$queryAirPresureWithLocationAndTemperature(net.hubalek.android.apps.barometer.service.BarometricPressureCollector,android.location.Location,float)	net.hubalek.android.apps.barometer.service.BarometricPressureCollector$queryAirPresureWithLocation$1:  void  onSensorChanged(android.hardware.SensorEvent)
net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment:  java.lang.String  access$getARG_MESSAGE$cp()	net.hubalek.android.apps.barometer.activity.fragment.dialog.ConfirmDialogFragment$Companion:  java.lang.String  getARG_MESSAGE()
net.hubalek.android.apps.barometer.service.AirPressureStats$Companion:  java.lang.String  access$getFILE_NAME_PREFIX$p(net.hubalek.android.apps.barometer.service.AirPressureStats$Companion)	net.hubalek.android.apps.barometer.service.AirPressureStats:  java.io.File  getFileNameForDate(long)
net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.service.BarometerHistoryDataUpdatedBroadcastReceiver:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.AboutTheAppActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.AboutTheAppActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType:  net.hubalek.android.apps.barometer.model.customalerts.PressureChangeType[]  values()	net.hubalek.android.apps.barometer.activity.fragment.dialog.CustomAlertEditDialog:  void  onLinkClicked(java.lang.String)
net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion:  java.lang.String  access$getEXTRA_ALERT_TEXT$p(net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity$Companion)	net.hubalek.android.apps.barometer.activity.FalseAlarmReportingActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$onCreate$1:  void  invoke()	net.hubalek.android.apps.barometer.activity.LocationPermissionRequestActivity$onCreate$1:  java.lang.Object  invoke()
net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.activity.AlertConfigurationActivity:  void  <clinit>()
net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  onItemClick(net.hubalek.android.apps.barometer.model.PlaceInfo,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)	net.hubalek.android.apps.barometer.activity.MyPlacesActivity$onCreate$onClickListener$1:  void  onItemClick(java.lang.Object,eu.inloop.simplerecycleradapter.SettableViewHolder,android.view.View)
net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment$onCreatePreferencesFix$3:  void  <init>(net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment)	net.hubalek.android.apps.barometer.activity.fragment.PreferencesFragment:  void  onCreatePreferencesFix(android.os.Bundle,java.lang.String)
net.hubalek.android.apps.barometer.activity.MainActivity$onCreate$4:  void  <init>(net.hubalek.android.apps.barometer.activity.MainActivity,net.hubalek.android.apps.barometer.views.ToolbarHidingScrollView)	net.hubalek.android.apps.barometer.activity.MainActivity:  void  onCreate(android.os.Bundle)
net.hubalek.android.apps.barometer.model.DataSplitter$PlaceLine:  void  addPoint$app_productionRelease(net.hubalek.android.apps.barometer.model.DataSplitter$Point)	net.hubalek.android.apps.barometer.model.DataSplitter:  void  addPointToPlace(net.hubalek.android.apps.barometer.model.DataSplitter$Result,net.hubalek.android.apps.barometer.model.DataSplitter$PointType,java.lang.String,net.hubalek.android.apps.barometer.model.ChartItem)
net.hubalek.android.apps.barometer.model.AlertRuleDefinition$Companion:  void  <init>(kotlin.jvm.internal.DefaultConstructorMarker)	net.hubalek.android.apps.barometer.model.AlertRuleDefinition:  void  <clinit>()
net.hubalek.android.apps.barometer.views.GaugeView2:  void  drawBackground(android.graphics.Canvas,android.graphics.RectF,int,android.graphics.Path)	net.hubalek.android.apps.barometer.views.GaugeView2:  void  onDraw(android.graphics.Canvas)
